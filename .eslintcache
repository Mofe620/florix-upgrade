[{"C:\\projects\\websites\\florix\\florix-frontend\\src\\index.js":"1","C:\\projects\\websites\\florix\\florix-frontend\\src\\reportWebVitals.js":"2","C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\store.js":"3","C:\\projects\\websites\\florix\\florix-frontend\\src\\App.js":"4","C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\reducers\\blogReducers.js":"5","C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\reducers\\productReducers.js":"6","C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\reducers\\orderReducers.js":"7","C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\reducers\\cartReducers.js":"8","C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\reducers\\authReducers.js":"9","C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\reducers\\userReducers.js":"10","C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\global\\Header.js":"11","C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\Footer.js":"12","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\baseScreens\\About.js":"13","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\authScreens\\SignUpScreen.js":"14","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\authScreens\\PasswordReset.js":"15","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\baseScreens\\Contact.js":"16","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\authScreens\\PasswordResetComplete..js":"17","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\authScreens\\PasswordResetConfirm.js":"18","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\authScreens\\RegisterScreen.js":"19","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\productScreens\\DrugStore.js":"20","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\authScreens\\SignInScreen.js":"21","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\authScreens\\UserProfile.js":"22","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\baseScreens\\Home.js":"23","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\productScreens\\ProductDetailsScreen.js":"24","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\authScreens\\ActivateAccount.js":"25","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\paymentScreen\\PaymentScreen.js":"26","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\productScreens\\ProductsScreen.js":"27","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\blogscreen\\BlogDetailsScreen.js":"28","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\orderScreens\\PlaceOrderScreen.js":"29","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\authScreens\\LoginScreen.js":"30","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\shippingScreens\\ShippingScreen.js":"31","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\cartScreen\\CartScreen.js":"32","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\orderScreens\\OrderScreen.js":"33","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\blogscreen\\BlogCategoryScreen.js":"34","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\blogscreen\\BlogListScreen.js":"35","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\authScreens\\_TextInput.js":"36","C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\global\\Navigation.js":"37","C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\actions\\types.js":"38","C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\actions\\cartActions.js":"39","C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\Message.js":"40","C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\CheckoutSteps.js":"41","C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\SearchBox.js":"42","C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\actions\\orderActions.js":"43","C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\FormContainer.js":"44","C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\Carousel.js":"45","C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\Loader.js":"46","C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\actions\\blogActions.js":"47","C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\global\\Navbar.js":"48","C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\actions\\authActions.js":"49","C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\actions\\productActions.js":"50","C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\Rating.js":"51","C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\Paginate.js":"52","C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\Product.js":"53","C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\spinners\\LoadingMain.js":"54","C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\SearchProduct.js":"55","C:\\projects\\websites\\florix\\florix-frontend\\src\\constants\\orderConstants.js":"56","C:\\projects\\websites\\florix\\florix-frontend\\src\\constants\\productConstants.js":"57","C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\blog\\Blog.js":"58","C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\blog\\BlogCarousel.js":"59","C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\global\\Sidebar.js":"60","C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\reducers\\contactReducer.js":"61","C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\actions\\contactAction.js":"62","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\baseScreens\\servicesScreen.js":"63","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\blogscreen\\BlogHomeScreen.js":"64","C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\FloatingAction.js":"65"},{"size":649,"mtime":1646885060000,"results":"66","hashOfConfig":"67"},{"size":362,"mtime":1646885060000,"results":"68","hashOfConfig":"67"},{"size":2994,"mtime":1646885060000,"results":"69","hashOfConfig":"67"},{"size":5033,"mtime":1651630294785,"results":"70","hashOfConfig":"67"},{"size":2622,"mtime":1646885060000,"results":"71","hashOfConfig":"67"},{"size":4067,"mtime":1646885060000,"results":"72","hashOfConfig":"67"},{"size":4068,"mtime":1646885060000,"results":"73","hashOfConfig":"67"},{"size":1476,"mtime":1646885060000,"results":"74","hashOfConfig":"67"},{"size":3254,"mtime":1646885060000,"results":"75","hashOfConfig":"67"},{"size":3916,"mtime":1646885060000,"results":"76","hashOfConfig":"67"},{"size":681,"mtime":1646885060000,"results":"77","hashOfConfig":"67"},{"size":2232,"mtime":1651631041424,"results":"78","hashOfConfig":"67"},{"size":6122,"mtime":1651808945963,"results":"79","hashOfConfig":"67"},{"size":3929,"mtime":1646885060000,"results":"80","hashOfConfig":"67"},{"size":1858,"mtime":1646885060000,"results":"81","hashOfConfig":"67"},{"size":4054,"mtime":1646885060000,"results":"82","hashOfConfig":"67"},{"size":570,"mtime":1646885060000,"results":"83","hashOfConfig":"67"},{"size":2778,"mtime":1646885060000,"results":"84","hashOfConfig":"67"},{"size":4805,"mtime":1646885060000,"results":"85","hashOfConfig":"67"},{"size":1355,"mtime":1646885060000,"results":"86","hashOfConfig":"67"},{"size":2761,"mtime":1646885060000,"results":"87","hashOfConfig":"67"},{"size":3666,"mtime":1646885060000,"results":"88","hashOfConfig":"67"},{"size":3707,"mtime":1651632843993,"results":"89","hashOfConfig":"67"},{"size":13690,"mtime":1646885060000,"results":"90","hashOfConfig":"67"},{"size":1577,"mtime":1646885060000,"results":"91","hashOfConfig":"67"},{"size":2198,"mtime":1646885060000,"results":"92","hashOfConfig":"67"},{"size":3714,"mtime":1646885060000,"results":"93","hashOfConfig":"67"},{"size":4276,"mtime":1646885060000,"results":"94","hashOfConfig":"67"},{"size":5869,"mtime":1646885060000,"results":"95","hashOfConfig":"67"},{"size":3375,"mtime":1646885060000,"results":"96","hashOfConfig":"67"},{"size":3730,"mtime":1646885060000,"results":"97","hashOfConfig":"67"},{"size":6913,"mtime":1646885060000,"results":"98","hashOfConfig":"67"},{"size":10445,"mtime":1646885060000,"results":"99","hashOfConfig":"67"},{"size":3741,"mtime":1646885060000,"results":"100","hashOfConfig":"67"},{"size":1832,"mtime":1646885060000,"results":"101","hashOfConfig":"67"},{"size":550,"mtime":1646885060000,"results":"102","hashOfConfig":"67"},{"size":585,"mtime":1646885060000,"results":"103","hashOfConfig":"67"},{"size":6963,"mtime":1646885060000,"results":"104","hashOfConfig":"67"},{"size":1322,"mtime":1646885060000,"results":"105","hashOfConfig":"67"},{"size":228,"mtime":1646885060000,"results":"106","hashOfConfig":"67"},{"size":1866,"mtime":1646885060000,"results":"107","hashOfConfig":"67"},{"size":984,"mtime":1646885060000,"results":"108","hashOfConfig":"67"},{"size":6588,"mtime":1646885060000,"results":"109","hashOfConfig":"67"},{"size":378,"mtime":1646885060000,"results":"110","hashOfConfig":"67"},{"size":1004,"mtime":1646885060000,"results":"111","hashOfConfig":"67"},{"size":458,"mtime":1646885060000,"results":"112","hashOfConfig":"67"},{"size":3809,"mtime":1646885060000,"results":"113","hashOfConfig":"67"},{"size":2760,"mtime":1646885060000,"results":"114","hashOfConfig":"67"},{"size":9277,"mtime":1646885060000,"results":"115","hashOfConfig":"67"},{"size":6169,"mtime":1646885060000,"results":"116","hashOfConfig":"67"},{"size":1886,"mtime":1646885060000,"results":"117","hashOfConfig":"67"},{"size":867,"mtime":1646885060000,"results":"118","hashOfConfig":"67"},{"size":1240,"mtime":1646885060000,"results":"119","hashOfConfig":"67"},{"size":469,"mtime":1646885060000,"results":"120","hashOfConfig":"67"},{"size":1328,"mtime":1646885060000,"results":"121","hashOfConfig":"67"},{"size":1240,"mtime":1646885060000,"results":"122","hashOfConfig":"67"},{"size":1502,"mtime":1646885060000,"results":"123","hashOfConfig":"67"},{"size":669,"mtime":1646885060000,"results":"124","hashOfConfig":"67"},{"size":883,"mtime":1646885060000,"results":"125","hashOfConfig":"67"},{"size":3877,"mtime":1646885060000,"results":"126","hashOfConfig":"67"},{"size":504,"mtime":1646885060000,"results":"127","hashOfConfig":"67"},{"size":953,"mtime":1646885060000,"results":"128","hashOfConfig":"67"},{"size":1635,"mtime":1651631107958,"results":"129","hashOfConfig":"67"},{"size":2539,"mtime":1651634097643,"results":"130","hashOfConfig":"67"},{"size":473,"mtime":1651809551045,"results":"131","hashOfConfig":"67"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},"xqa2wn",{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"134"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"158","usedDeprecatedRules":"134"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"134"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"134"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"134"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"134"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"134"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"134"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"134"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"134"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"134"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"134"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"134"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"134"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"134"},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"134"},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"134"},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"134"},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"134"},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"134"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"134"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"134"},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"134"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"134"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"134"},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"134"},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"134"},{"filePath":"280","messages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"134"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},"C:\\projects\\websites\\florix\\florix-frontend\\src\\index.js",[],["291","292"],"C:\\projects\\websites\\florix\\florix-frontend\\src\\reportWebVitals.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\store.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\App.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\reducers\\blogReducers.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\reducers\\productReducers.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\reducers\\orderReducers.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\reducers\\cartReducers.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\reducers\\authReducers.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\reducers\\userReducers.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\global\\Header.js",["293","294"],"import React, { Fragment, useEffect } from 'react';\nimport Navbar from './Navbar';\nimport { connect } from 'react-redux';\nimport { checkAuthenticated, load_user } from '../../redux/actions/authActions'\nimport Navigation from './Navigation';\nimport { Container } from 'react-bootstrap';\n\n\nconst Layout = ({ checkAuthenticated, load_user, children }) => {\n    useEffect(() => {\n        checkAuthenticated();\n        load_user();\n    }, []);\n\n    return (\n        <Fragment>\n            <Navigation />\n            <Container >\n                {children}\n            </Container>\n        </Fragment>\n    );\n};\n\nexport default connect(null, { checkAuthenticated, load_user })(Layout);\n\n","C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\Footer.js",["295","296","297"],"import React from 'react'\nimport {Link} from \"react-router-dom\"\nimport { Container, Row, Col, Form, Button } from 'react-bootstrap'\n\nconst Footer = () =>{\n    return(\n        <>\n        <Container className='footer p-4 mt-4'> \n        \n        <div className=\"footer__items\">\n            <p><Link to=\"/posts\">Blog Posts</Link></p>\n            <p><Link to=\"about\">About Us</Link></p>\n            <p><Link to=\"/contact\">Contact Us</Link></p>\n        </div>\n        \n        <Row className=\"\">\n            <Col md={8} className=\"px-0 footer\">\n                <div className=\"footer__media\">\n                    <span className=\"footer__media__icons\"><a href=\"https://www.facebook.com/florixhealthcare\" target=\"_blank\"><i className=\"fab fa-facebook\"></i></a></span>\n                    <span className=\"footer__media__icons\"><a href=\"http://instagram.com/flo_log.hq\" target=\"_blank\"><i className=\"fab fa-instagram\"></i></a></span>\n                    <span className=\"footer__media__icons\"><a href=\"https://tinyurl.com/2p98zk2h\" target=\"_blank\"><i className=\"fab fa-whatsapp\"></i></a></span>\n                    <span className=\"footer__media__icons\"><a href=\"/\"><i className=\"fab fa-twitter\"></i></a></span>\n                </div>\n            </Col>\n            <Col md={4} className=\"footer__subscription px-0\">\n            <p className=\"footer__subscription__text\">Get E-mail Updates About Our Latest News And Special Offers</p>\n                <Row>\n                    <Col xs={8} className=\"footer__subscription__form\" >\n                    <Form className=\"px-0\">\n                        <Form.Group  controlId=\"formGroupEmail\">\n                            <Form.Control className=\"search-ppty\" type=\"email\" placeholder=\"Enter your email\" /> \n                        </Form.Group>\n                    </Form>\n                    </Col>\n                    <Col xs={4} >\n                    <Button variant=\"danger\" className=\"search-ppty px-0\">Subscribe</Button>\n                    </Col>\n                </Row>\n            </Col>            \n        </Row>\n        </Container>\n        <p className=\"footer2 text-center py-3\">&copy; 2022 Florix Healthcare Ltd. All Rights Reserved. </p> \n    </>\n    )\n}\n\nexport default Footer\n","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\baseScreens\\About.js",["298"],"C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\authScreens\\SignUpScreen.js",["299","300","301","302","303","304","305","306","307"],"import React, { useState, useEffect } from 'react'\nimport { Link, Redirect } from 'react-router-dom'\nimport { Container, Button } from 'react-bootstrap'\nimport {Helmet} from \"react-helmet\";\nimport { connect, useDispatch, useSelector } from 'react-redux'\nimport Loader from '../../components/Loader'\nimport Message from '../../components/Message'\nimport { signup } from '../../redux/actions/authActions'\nimport { Formik, Form } from 'formik';\nimport { TextField } from './_TextInput';\nimport * as Yup from 'yup';\n\nconst SignUpScreen = ({ signup, isAuthenticated }) => {\n  const [accountCreated, setAccountCreated] = useState(false);\n  const [username, setUsername] = useState([])\n  const [email, setEmail] = useState([])\n  const [password, setPassword] = useState([])\n  const [re_password, setRe_password] = useState([])\n  const [message, setMessage] = useState('')\n\n\n  const dispatch = useDispatch()\n  const auth = useSelector(state => state.auth)\n  const { error, loading, userInfo } = auth\n\n  const submitHandler = (e) => {\n      e.preventDefault();\n      if (password !== re_password) {\n          setMessage('Both passwords must be the same')\n      } else {\n          dispatch(signup(username, email, password, re_password));\n          setAccountCreated(true);\n      }\n  }\n  \n  const validate = Yup.object().shape({\n    username: Yup.string()\n      .max(15, 'Must be 20 characters or less')\n      .required('Username is required'),\n    email: Yup.string()\n      .email('Email is invalid')\n      .required('Email is required'),\n    password: Yup.string()\n      .min(6, \"A minimum of 6 characters is required\")\n      .required('Password is required'),\n    confirmPassword: Yup.string()\n      .oneOf([Yup.ref('password'), null], 'Password must match')\n      .required('Confirm your password'),\n  })\n  \n  if (accountCreated) {\n      return <Redirect to='/login' />\n  }\n\n  if (isAuthenticated){\n      return <Redirect to=\"/\" />\n      }\n\n\n\n  return (\n    <Container className=\"content auth-container\">\n         <Helmet>\n                <meta charSet=\"utf-8\" />\n                <title>Create your Flolog Account</title>\n            </Helmet>\n      <Formik\n        initialValues={{\n          username: '',\n          email: '',\n          password: '',\n          confirmPassword: ''\n        }}\n        validationSchema={validate}\n        onSubmit={values => {\n          console.log(values)\n        }}\n      >\n        {({errors, touched}) => (\n          <div>\n            <h1 className=\"my-4 font-weight-bold .display-4\">Sign Up</h1>\n            <Form onSubmit={submitHandler}>\n              <TextField \n                name=\"username\" \n                label=\"Username\"\n                type=\"text\" \n                placeholder=\"Username\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                />\n              <TextField \n                name=\"email\" \n                label=\"Email\"\n                type=\"email\" \n                placeholder=\"Email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                />\n              <TextField \n                name=\"password\" \n                label=\"Password\"\n                type=\"password\" \n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                />\n              <TextField \n                name=\"confirmPassword\" \n                label=\"Confirm Password\"\n                type=\"password\" \n                value={re_password}\n                onChange={(e) => setRe_password(e.target.value)}\n                />\n              <button className=\"btn btn-primary mt-3\" type=\"submit\">Register</button>\n            </Form>\n          </div>\n        )}\n      </Formik>\n    </Container>\n  )\n}\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated\n});\n\nexport default connect(mapStateToProps, {signup}) (SignUpScreen)","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\authScreens\\PasswordReset.js",["308"],"import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport {Helmet} from \"react-helmet\";\nimport { connect, useDispatch } from 'react-redux';\nimport { Container, Form, Button } from 'react-bootstrap';\nimport { reset_password } from '../../redux/actions/authActions';\n\nconst PasswordReset = ({ reset_password }) => {\n    const [requestSent, setRequestSent] = useState(false);\n    const [email, setEmail] = useState('')\n\n\n    //const dispatch = useDispatch()\n    \n\n    const submitHandler = e => {\n        e.preventDefault();\n        reset_password(email)\n        //dispatch(reset_password(email));\n        setRequestSent(true);\n    };\n\n    if (requestSent) {\n        return <Redirect to='/' />\n    }\n\n    return (\n        <Container className='auth-container '>\n            <Helmet>\n                <meta charSet=\"utf-8\" />\n                <title>Reset Password</title>\n            </Helmet>\n            <div className=' auth-header text-center'>\n                <p className=\"auth-base\"> Reset password</p>\n            </div>\n            <Form className=\"auth-form\" onSubmit={e => submitHandler(e)}>\n                <Form.Group className=\"mb-3\" controlId=\"formGroupPassword\">\n                    <Form.Control \n                        className=\"auth-input search-ppty\" \n                        type=\"email\" \n                        placeholder=\"example@email.com\" \n                        name='email'\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                        required\n                        />\n                </Form.Group>\n                <Button className=\"auth-button btn btn-block w-100\" type=\"submit\">Submit</Button>\n            </Form>\n            \n        </Container>\n    )\n}\n\n\nexport default connect(null, { reset_password })(PasswordReset);\n","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\baseScreens\\Contact.js",["309","310","311","312"],"import React, {useState} from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Button, Container, Form } from 'react-bootstrap'\nimport { contactUs } from '../../redux/actions/contactAction';\nimport {Helmet} from \"react-helmet\";\n\nconst Contact = () => {\n    const [name, setname] = useState([])\n    const [email, setEmail] = useState([])\n    const [subject, setSubject] = useState([])\n    const [message, setMessage] = useState([])\n    const [alert, setAlert] = useState('')\n\n    const contact = useSelector(state => state.contact)\n    const { error, loading, contat_us } = contact\n    const dispatch = useDispatch()\n    const submitHandler = e => {\n        e.preventDefault();\n        console.log(name)\n        dispatch(contactUs(name, email, subject, message));\n        setAlert(\"Welcome! Click on the link sent to your email to activate your account\")\n        \n    };\n    console.log(subject)\n    return (\n        <Container className=\"content auth-container\">\n               <Helmet>\n                <meta charSet=\"utf-8\" />\n                <title>Contact Us</title>\n            </Helmet>\n                <div className=\"contact\">\n                    <Form classNam=\"auth-form\" onSubmit={submitHandler}>\n                        <Form.Group className=\"mb-3\" controlId=\"name\">\n                            <Form.Control \n                                required\n                                style={{backgroundColor:\"white\"}}\n                                className=\"contact-input\" \n                                type=\"name\" \n                                placeholder=\"Name\" \n                                value={name}\n                                onChange={(e) => setname(e.target.value)}\n                        \n                                />\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"email\">\n                            <Form.Control \n                                required\n                                style={{backgroundColor:\"white\"}}\n                                className=\"contact-input\" \n                                type=\"email\" \n                                placeholder=\"Enter Email\" \n                                value={email}\n                                onChange={(e) => setEmail(e.target.value)}\n                              \n                                />\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"subject\">\n                            <Form.Control \n                                required\n                                style={{backgroundColor:\"white\"}}\n                                className=\"contact-input\" \n                                type=\"text\" \n                                placeholder=\"Subject\" \n                                value={subject}\n                                onChange={(e) => setSubject(e.target.value)}\n                          \n                            />\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"message\">\n                            <Form.Control \n                                required\n                                style={{backgroundColor:\"white\"}}\n                                as=\"textarea\"\n                                cols=\"15\"\n                                className=\"contact-input\" \n                                type=\"text\" \n                                placeholder=\"Message\" \n                                value={message}\n                                onChange={(e) => setMessage(e.target.value)}\n                          \n                            />\n                        </Form.Group>\n                        <div className='d-grid gap-2' size=\"lg\">\n                            <Button className=\"contact-input\" type='submit' variant='primary'>Submit</Button>\n                        </div>\n                    </Form>\n                </div>\n                \n    </Container>\n    )\n}\n\nexport default Contact\n","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\authScreens\\PasswordResetComplete..js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\authScreens\\PasswordResetConfirm.js",["313"],"import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport {Helmet} from \"react-helmet\";\nimport { Container, Form, Button } from 'react-bootstrap'\nimport { connect, useDispatch } from 'react-redux';\nimport { reset_password_confirm } from '../../redux/actions/authActions';\n\nconst PasswordResetConfirm = ({ match, reset_password_confirm }) => {\n    const [requestSent, setRequestSent] = useState(false);\n    const [new_password, setNew_password] = useState('')\n    const [re_new_password, setRe_new_password] = useState('')\n\n    //const dispatch = useDispatch()\n\n\n    const submitHandler = e => {\n        e.preventDefault();\n\n        const uid = match.params.uid;\n        const token = match.params.token;\n        reset_password_confirm(uid, token, new_password, re_new_password)\n        //dispatch(reset_password_confirm(uid, token, new_password, re_new_password));\n        setRequestSent(true);\n    };\n\n    if (requestSent) {\n        return <Redirect to='/' />\n    }\n\n    return (\n        <Container className=' auth-container pt-4'>\n            <Helmet>\n                <meta charSet=\"utf-8\" />\n                <title>Password Reset Confirm</title>\n            </Helmet>\n                <div className=' auth-header text-center'>\n                    <p className=\"auth-base\"> Enter a new password</p>\n                </div>\n                <Form className=\"auth-form\" onSubmit={e => submitHandler(e)}>\n                    <Form.Group className=\"mb-3\" controlId=\"formGroupPassword\">\n                        <Form.Control \n                            className=\"auth-input search-ppty\" \n                            type=\"password\" \n                            placeholder=\"Password\" \n                            value={new_password}\n                            onChange={(e) => setNew_password(e.target.value)}\n                            minLength='6'\n                            required\n                            />\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"formGroupPassword\">\n                        <Form.Control \n                            className=\"auth-input search-ppty\" \n                            type=\"password\" \n                            placeholder=\"Password\" \n                            value={re_new_password}\n                            onChange={(e) => setRe_new_password(e.target.value)}\n                            minLength='6'\n                            required\n                            />\n                    </Form.Group>\n                    <Button className=\"auth-button btn btn-block w-100\" type=\"submit\">Submit</Button>\n                </Form>\n    </Container>\n    )\n}\n\nexport default connect(null, { reset_password_confirm })(PasswordResetConfirm);\n","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\authScreens\\RegisterScreen.js",["314","315","316"],"import React, { useState } from 'react'\nimport { Link, Redirect } from 'react-router-dom'\nimport {Helmet} from \"react-helmet\";\nimport { Container, Row, Col, Form, Button } from 'react-bootstrap'\nimport { connect, useSelector } from 'react-redux'\nimport Loader from '../../components/Loader'\nimport Message from '../../components/Message'\nimport { signup } from '../../redux/actions/authActions'\nimport swal from 'sweetalert';\n\nfunction RegisterScreen({ signup, isAuthenticated }) {\n\n    const [accountCreated, setAccountCreated] = useState(false);\n    const [username, setUsername] = useState([])\n    const [email, setEmail] = useState([])\n    const [password, setPassword] = useState([])\n    const [re_password, setRe_password] = useState([])\n    const [message, setMessage] = useState('')\n\n    const auth = useSelector(state => state.auth)\n    const { error, loading, userInfo } = auth\n\n    const submitHandler = e => {\n        e.preventDefault();\n\n        if (password === re_password) {\n            signup(username, email, password, re_password);\n            setAccountCreated(true);\n            setMessage(\"Welcome! Click on the link sent to your email to activate your account\")\n        }\n    };\n    \n    \n    if (accountCreated) {\n        return <Redirect to='/login' />\n    }\n\n    if (isAuthenticated){\n        return <Redirect to=\"/\" />\n        }\n    return (\n        <Container className='content auth-container'>\n            <Helmet>\n                <meta charSet=\"utf-8\" />\n                <title>Create your Flolog Account</title>\n            </Helmet>\n            <div className=\"auth-header text-center mb-4\">\n                <h2 className=\"auth-header\">Sign Up</h2>\n                <p>Add your deatils to sign up</p>\n            </div>\n            {/* {message && <Message variant='success'>{message}</Message>} */}\n            {error && <Message variant='danger'>{error}</Message>}\n            {loading && <Loader />}\n                    <Form className=\"auth-form\" onSubmit={submitHandler}>\n                        <Form.Group className=\"mb-3\" controlId='name'>\n                            <Form.Control \n                                className=\"auth-input search-ppty\" \n                                required\n                                minLength='6'\n                                type=\"name\" \n                                placeholder=\"Username\" \n                                value={username}\n                                onChange={(e) => setUsername(e.target.value)}\n                                />\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId='email'>\n                            <Form.Control\n                                required \n                                className=\"auth-input search-ppty\" \n                                type=\"email\" \n                                placeholder=\"Email\" \n                                value={email}\n                                onChange={(e) => setEmail(e.target.value)}\n                                \n                                />\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"password\">\n                            <Form.Control \n                                className=\"auth-input search-ppty\" \n                                type=\"password\" \n                                placeholder=\"Password\" \n                                value={password}\n                                onChange={(e) => setPassword(e.target.value)}\n                                \n                                />\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"passwordConfirm\">\n                            <Form.Control \n                                className=\"auth-input search-ppty\" \n                                type=\"password\" \n                                placeholder=\"Confirm Password\" \n                                value={re_password}\n                                onChange={(e) => setRe_password(e.target.value)}\n                                />\n                        </Form.Group>\n                        <Button type=\"submit\" className=\"auth-button\">Sign Up</Button>\n                    </Form>\n                    <Row className=\"p-2\">\n                        <Col>\n                            <div className=\"\"> Already have an account? <Link to=\"/login\">Login</Link></div>\n                        </Col>\n                        <Col>\n                            \n                        </Col>\n                    </Row>\n        </Container>\n        \n    )\n}\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated\n  });\n\nexport default connect(mapStateToProps, {signup}) (RegisterScreen)","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\productScreens\\DrugStore.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\authScreens\\SignInScreen.js",["317","318","319","320","321","322"],"import React, { useState} from 'react'\nimport { Container, Button} from 'react-bootstrap'\nimport {Helmet} from \"react-helmet\";\nimport { Link, Redirect, useLocation } from 'react-router-dom'\nimport { connect, useDispatch, useSelector } from 'react-redux'\nimport Loader from '../../components/Loader'\nimport Message from '../../components/Message'\nimport { login } from '../../redux/actions/authActions'\nimport { Formik, Form } from 'formik';\nimport { TextField } from './_TextInput';\nimport * as Yup from 'yup';\n\nconst SignInScreen = ({ isAuthenticated }) => {\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    \n    const dispatch = useDispatch()\n    const {state: {from = \"/\"} = {} } = useLocation();\n    \n    const auth = useSelector(state => state.auth)\n    const { error, loading } = auth\n        \n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(login(email, password))\n    }\n    \n    if (isAuthenticated){\n        return <Redirect to={from} />\n    }\n\n\n    const validate = Yup.object({\n        email: Yup.string()\n        .email('Email is invalid')\n        .required('Email is required'),\n        password: Yup.string()\n        .min(6, 'Password must be at least 6 charaters')\n        .required('Password is required'),\n    })\n    return (\n        <Container className=\"content auth-container\">\n               <Helmet>\n                <meta charSet=\"utf-8\" />\n                <title>Sign In</title>\n            </Helmet>\n        <Formik\n            initialValues={{\n            email: '',\n            password: '',\n            }}\n            validationSchema={validate}\n            onSubmit={values => {\n            }}\n        >\n            {formik => (\n            <div>\n                <h1 className=\"my-4 font-weight-bold .display-4\">Sign In</h1>\n                <Form onSubmit={submitHandler}>\n                <TextField  \n                    name=\"email\" \n                    type=\"email\" \n                    placeholder=\"Enter Email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    />\n                <TextField \n                    name=\"password\" \n                    type=\"password\" \n                    placeholder=\"Enter Password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    />\n                <button className=\"btn btn-primary mt-3\" type=\"submit\">Login</button>\n                </Form>\n            </div>\n            )}\n        </Formik>\n    </Container>\n  )\n}\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated\n  });\n  \nexport default connect(mapStateToProps, {login}) (SignInScreen)","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\authScreens\\UserProfile.js",["323","324","325","326","327","328","329","330","331","332"],"import React, { Component, useState, useEffect } from 'react'\nimport {useDispatch, useSelector, connect} from 'react-redux'\nimport {Helmet} from \"react-helmet\";\nimport { Container, Row, Col, Form, Button } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport { LOAD_USER_PROFILE_RESET } from '../../redux/actions/types'\nimport Message from '../../components/Message'\nimport Loader from '../../components/Loader'\nimport { load_user_profile } from '../../redux/actions/authActions'\n\nfunction UserProfile({location, history, isAuthenticated}) {\n    \n    const [username, setUsername] = useState('')\n    const [email, setEmail] = useState('')\n    const [company, setCompany] = useState('')\n    const [image, setImage] = useState('')\n    const [telephone, setTelephone] = useState('')\n  \n    const [message, setMessage] = useState('')\n\n\n    const dispatch = useDispatch()\n\n    const auth = useSelector(state => state.auth)\n    const { user } = auth\n    \n    const profileInfo = useSelector(state => state.profileInfo)\n    const {  error, loading, userInfo } = profileInfo\n    console.log(userInfo)\n    useEffect(() => {\n        if (!isAuthenticated) {\n            history.push('/login')\n        } else {\n                setUsername(user.username)\n                setEmail(user.email)\n                setImage(userInfo.image)\n                setCompany(userInfo.company)\n                setTelephone(userInfo.telephone)\n            }\n        \n    }, [history, isAuthenticated, userInfo, user])\n    return (\n        <Container className='content'>\n               <Helmet>\n                <meta charSet=\"utf-8\" />\n                <title>Profle</title>\n            </Helmet>\n            <Row className=\"\">\n                <h1 className=\"profile-header\">{company} profile</h1>\n                <Col md={3} className=\"\">\n                    <div className=\"\">\n                            <img className='profile-img img-fluid rounded-circle  mt-4 mb-4' src={image}  alt=''/>\n                            <p><Link href=\"/\">Edit profile</Link></p>\n                    </div>\n                </Col>\n                <Col md={8}>\n                    <Form className=\"mt-4\">\n                        <Form.Group className=\"mb-3\" controlId=\"formGroupEmail\">\n                            <Form.Control className=\"auth-input\" type=\"name\" value={username} disabled/>\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"formGroupEmail\">\n                            <Form.Control className=\"auth-input\" type=\"name\" value={email} disabled/>\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"formGroupEmail\">\n                            <Form.Control className=\"auth-input\" type=\"name\"   value={company ? company : \" Your company/organization name?\"  } />\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"formGroupPassword\">\n                            <Form.Control className=\"auth-input\" type=\"email\" value={telephone ? telephone : \" Mobile/telephone no.\"} />\n                        </Form.Group>\n                        {/*<Button className=\"auth-button btn btn-block w-100\" variant=\"primary\" value=\"reset\"> Save</Button>*/}\n                    </Form>\n                </Col>\n            </Row>\n                <div md={6}  className=\"mt-4\">\n                    <h2>My Order History</h2>\n                </div>\n        \n    </Container>\n    )\n}\n\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated\n  });\n  \n  export default connect(mapStateToProps, {load_user_profile}) (UserProfile)\n\n\n","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\baseScreens\\Home.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\productScreens\\ProductDetailsScreen.js",["333","334"],"import React, { useState, useEffect } from 'react'\nimport { useDispatch, useSelector, connect } from 'react-redux'\nimport {Helmet} from \"react-helmet\";\nimport { Link, useLocation } from 'react-router-dom'\nimport { Row, Col, Image, ListGroup, Button, Card, Form, Container } from 'react-bootstrap'\nimport Rating from '../../components/Rating'\nimport Message from '../../components/Message'\nimport LoadingMain from '../../components/spinners/LoadingMain'\nimport { listProductDetails, createProductReview } from '../../redux/actions/productActions'\nimport { PRODUCT_CREATE_REVIEW_RESET } from '../../constants/productConstants'\n\nfunction ProductScreen({ match, history, isAuthenticated }) {\n    const [qty, setQty] = useState(1)\n    const [rating, setRating] = useState(0)\n    const [comment, setComment] = useState('')\n\n    const dispatch = useDispatch()\n    const location = useLocation()\n\n    const productDetails = useSelector(state => state.productDetails)\n    const { loading, error, product } = productDetails\n\n \n    const auth = useSelector(state => state.auth)\n    const { user  } = auth\n\n    const productReviewCreate = useSelector(state => state.productReviewCreate)\n    const {\n        loading: loadingProductReview,\n        error: errorProductReview,\n        success: successProductReview,\n    } = productReviewCreate\n\n    useEffect(() => {\n        if (!isAuthenticated) {\n            history.push({\n                pathname: \"/login\",\n                state: {\n                    from: location\n                }\n            })\n        } else{\n            if (successProductReview) {\n                setRating(0)\n                setComment('')\n                dispatch({ type: PRODUCT_CREATE_REVIEW_RESET })\n            }\n            dispatch(listProductDetails(match.params.id))\n        }  \n    }, [dispatch, match, successProductReview])\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        if(qty <=e.target.value <=product.countInStock && qty > 0){\n               console.log(qty)\n                history.push(`/cart/${match.params.id}?qty=${qty}`)\n                console.log(qty)\n        }else{\n            alert(\"Insifficient Quantity in Stock\")\n            }\n    }\n\n    \n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(createProductReview(\n            match.params.id, {\n            rating,\n            comment\n        }\n        ))\n    }\n\n    return (\n        <div className=\"product mx-4\" style={{marginTop:\"70px\"}}>\n            <Helmet>\n                <meta charSet=\"utf-8\" />\n                <meta name=\"description\" content=\"Africa's Healthcare No. 1 Wholesale E-marketplace and Logistics Solution\" />\n                <title>{product.name}</title>\n            </Helmet>\n            <Container className=''>\n            {loading ?\n                <LoadingMain />\n                : error\n                    ? <Message variant='danger'>{error}</Message>\n                    : (\n                        <div>\n                            <Row>\n                                <Col md={4} className=\"\">\n                                    <Image src={product.image} alt={product.name} className=\"product__details__img\" fluid />   \n                                </Col>\n                                <Col md={4}>\n                                    <div>\n                                        <h4 className=\"product__name mt-3\">Generic Name: {product.name}</h4>\n                                        <p>Brand: {product.brand}  </p>\n                                        <p>Dosage form: {product.dosageForm} </p>\n                                        <p>Strength: {product.strength}</p>\n                                        <p> Description: {product.description} </p>\n                                    \n                                        \n                                    </div>\n                                </Col>\n                                <Col md={4}>\n                                    <Card className=\"product__details__card\">\n                                        <ListGroup variant='flush'>\n                                            <ListGroup.Item>\n                                                <Row>\n                                                    <Col>Price:</Col>\n                                                    <Col>\n                                                        <p className=\"product__price\">&#8358; {product.price}</p>\n                                                    </Col>\n                                                </Row>\n                                            </ListGroup.Item>\n                                            <ListGroup.Item>\n                                                <Row>\n                                                    <Col>Status:</Col>\n                                                    <Col>\n                                                        {product.countInStock > 0 ? 'In Stock' \n                                                        \n                                                        \n                                                        : <p className='product__oos'>Out of Stock</p>}\n                                                    </Col>\n                                                </Row>\n                                                 <ListGroup.Item>\n                                                {product.countInStock > 0 ? \n                                                       <Form onSubmit ={handleSubmit}>\n                                                       <Form.Control\n                                                           style={{backgroundColor:\"white\", height:\"3rem\"}}\n                                                           type=\"number\"\n                                                           min=\"1\"\n                           \n                                                           placeholder='Enter quantity'\n                                                           max={product.countInStock} \n                                                           onChange= {e=>setQty(e.target.value)}\n                                                         \n                                                       >\n                                                           \n\n                                                       </Form.Control>\n                                                       \n                                                       <div className=\"d-grid gap-2 pt-2\">\n                                                       <Button\n                                                       \n                                                       size=\"lg\"\n                                                       disabled={product.countInStock === 0}\n                                                       type=\"submit\">\n                                                       Add to Cart\n                                                   </Button>\n                                                       </div>\n                                                   </Form>\n                                                \n                                                    : <div className=\"d-grid gap-2 pt-2\">\n                                                    <Button\n                                                        size=\"lg\"\n                                                        disabled={product.countInStock === 0}\n                                                        type=\"submit\">\n                                                        Add to Cart\n                                                    </Button>\n                                                    </div>}\n                                                 \n                                                </ListGroup.Item>\n                                            </ListGroup.Item>\n\n                                        \n                                               \n            \n                                        </ListGroup>\n                                       \n                                    </Card>\n                                </Col>\n                            </Row>\n\n                            <Row className=\"product__details__feedback\">\n                                <Col md={6}>\n                            {/*\n                                    {product.reviews.length === 0 && <Message variant='info'>Product reviews will be shown here if present</Message>}\n\n                                    \n                                        {product.reviews.map((review) => (\n                                            <div key={review.id}>\n                                                <strong>{review.name}</strong>\n                                                <Rating value={review.rating} color='#f8e825' />\n                                                <p>{review.dateCreated.substring(0, 10)}</p>\n                                                <p>{review.comment}</p>\n                                            </div>\n                                        ))}\n                                        */}\n                                        <ListGroup variant='flush'>\n                                    \n                                        <ListGroup.Item>\n                                            \n\n                                            {loadingProductReview && <LoadingMain />}\n                                            {successProductReview && <Message variant='success'>Feedback was sent successfully</Message>}\n                                            {errorProductReview && <Message variant='warning'>Sorry, we couldn't submit your feedback. Select an option and try again OR you may have given feedback on this product before.</Message>}\n\n                                            {user ? (\n                                                <Form onSubmit={submitHandler}>\n                                                    <Form.Group controlId='rating'>\n                                                        <Form.Label className=\"my-3\">Leave Feedback on this Product</Form.Label>\n                                                        <Form.Control\n                                                            as='select'\n                                                            className=\"search-ppty\"\n                                                            value={rating}\n                                                            onChange={(e) => setRating(e.target.value)}\n                                                        >\n                                                            <option value=''>Option...</option>\n                                                            <option value='1'>1 - Very dissatisfied</option>\n                                                            <option value='2'>2 - Dissatisfied</option>\n                                                            <option value='3'>3 - Neither satisfied nor dissatisfied</option>\n                                                            <option value='4'>4 - Satisfied</option>\n                                                            <option value='5'>5 - Very satisfied</option>\n                                                        </Form.Control>\n                                                    </Form.Group>\n\n                                                    <Form.Group controlId='comment'>\n                                                        <Form.Label className=\"my-3\">Add a comment</Form.Label> {/* The label called review is named comment in the database(backend)*/}\n                                                        <Form.Control\n                                                            as='textarea'\n                                                            row='5'\n                                                            col='10'\n                                                            value={comment}\n                                                            onChange={(e) => setComment(e.target.value)}\n                                                        ></Form.Control>\n                                                    </Form.Group>\n\n                                                    <Button\n                                                        className=\"blog__comment__button\"\n                                                        disabled={loadingProductReview}\n                                                        type='submit'\n                                                        variant='primary'\n                                                    >\n                                                        Submit\n                                                    </Button>\n\n                                                </Form>\n                                            ) : (\n                                                    <Message variant='info'> <Link to='/login'>Sign In</Link> to Leave a feedback on this product</Message>\n                                                )}\n                                        </ListGroup.Item>\n                                    </ListGroup>\n                                </Col>\n                            </Row>\n                        </div>\n                    )\n\n            }\n\n            </Container>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated\n  });\n  \n  export default connect(mapStateToProps, {listProductDetails }) ( ProductScreen )\n","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\authScreens\\ActivateAccount.js",["335"],"import React, { useState } from 'react';\nimport {Helmet} from \"react-helmet\";\nimport { Link, Redirect } from 'react-router-dom';\nimport {Container, Form, Button} from 'react-bootstrap'\nimport { connect, useDispatch } from 'react-redux';\nimport { verify } from '../../redux/actions/authActions';\nimport swal from 'sweetalert';\n\nconst ActivateAccount = ({ verify, match }) => {\n    const [activated, setActivated] = useState(false);\n    const dispatch = useDispatch()\n\n\n    const accountActivation = e => {\n        const uid = match.params.uid;\n        const token = match.params.token;\n        dispatch(verify(uid, token));\n        setActivated(true);\n    };\n\n    if (activated) {\n        return <Redirect to='/' />\n    }\n\n    return (\n        <Container className=' auth-container pt-4'>\n            <Helmet>\n                <meta charSet=\"utf-8\" />\n                <title>Activate your flolog Account</title>\n            </Helmet>\n            <Form className=\"auth-form\">\n                <Button \n                    className=\"auth-button  btn btn-block w-100\" \n                    type=\"submit\"\n                    onClick={accountActivation}\n                    >\n                        Activate Account\n                    </Button>\n            </Form>\n            <div className=\"account-activate\">\n                <p>After clicking on the activation button, you will be redirected to the homepage of our website. If not, please use this <Link to=\"/\">Link</Link></p>\n            </div>\n    </Container>\n    )\n}\n\nexport default connect(null, { verify })(ActivateAccount);","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\paymentScreen\\PaymentScreen.js",["336","337"],"import React, { useState, useEffect } from 'react'\nimport { Form, Button, Col, Container } from 'react-bootstrap'\nimport {Helmet} from \"react-helmet\";\nimport { useDispatch, useSelector } from 'react-redux'\nimport FormContainer from '../../components/FormContainer'\nimport CheckoutSteps from '../../components/CheckoutSteps'\nimport { savePaymentMethod } from '../../redux/actions/cartActions'\n\nfunction PaymentScreen({ history }) {\n\n    const cart = useSelector(state => state.cart)\n    const { shippingAddress } = cart\n\n    const dispatch = useDispatch()\n\n    const [paymentMethod, setPaymentMethod] = useState('PayPal')\n\n    if (!shippingAddress.address) {\n        history.push('/shipping')\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(savePaymentMethod(paymentMethod))\n        history.push('/placeorder')\n    }\n\n    return (\n        <Container className=\"content\" >\n            <Helmet>\n                <meta charSet=\"utf-8\" />\n                <meta name=\"description\" content=\"Africa's Healthcare No. 1 Wholesale E-marketplace and Logistics Solution\" />\n                <title>Payment method</title>\n            </Helmet>\n            <CheckoutSteps step1 step2 step3 />\n            <div className=\"d-flex justify-content-center checkout__header\" style={{paddingTop:\"15rem\" }}>\n            <Form onSubmit={submitHandler}>\n                <Form.Group>\n                    <Form.Label as='legend'>Payment Options</Form.Label>\n                    <Col>\n                        <Form.Check\n                            type='radio'\n                            label='PayPal or Credit Card'\n                            id='paypal'\n                            name='paymentMethod'\n                            checked\n                            onChange={(e) => setPaymentMethod(e.target.value)}\n                        >\n\n                        </Form.Check>\n                    </Col>\n                </Form.Group>\n                <div className=\"d-grid gap-2 pt-2\">\n                    <Button size=\"lg\" type=\"submit\"> Continue</Button>\n                </div>\n            </Form>\n            </div>\n        </Container>\n    )\n}\n\nexport default PaymentScreen\n","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\productScreens\\ProductsScreen.js",["338","339","340","341","342","343","344"],"import React, { useState, useEffect } from 'react'\nimport { Link, useHistory, useLocation } from 'react-router-dom'\nimport {Helmet} from \"react-helmet\";\nimport { useDispatch, useSelector, connect} from 'react-redux'\nimport { Row, Col, Container, Button, Modal, Form } from 'react-bootstrap'\nimport Product from '../../components/Product'\nimport Loader from '../../components/Loader'\nimport Message from '../../components/Message'\nimport Paginate from '../../components/Paginate'\nimport ProductCarousel from '../../components/Carousel'\nimport LoadingMain from '../../components/spinners/LoadingMain'\n//import ProductCarousel from '../components/ProductCarousel'\nimport SearchBox from '../../components/SearchBox'\nimport { listProducts } from '../../redux/actions/productActions'\nimport SearchProduct from '../../components/SearchProduct'\n\n\nfunction HomeScreen({history, isAuthenticated}) {\n    \n\n    const location = useLocation()\n    const [lgShow, setLgShow] = useState(false);\n\n    const dispatch = useDispatch()\n    const productList = useSelector(state => state.productList)\n    const { error, loading, products, page, pages } = productList\n\n    const keyword = history.location.search\n    useEffect(() => {\n        if (!isAuthenticated) {\n            history.push({\n                pathname: \"/login\",\n                state: {\n                    from: location\n                }\n            })\n        } else{\n            dispatch(listProducts(keyword))\n        }  \n        \n\n    }, [dispatch, keyword])\n\n    return (\n        <div style={{marginTop:\"50px\"}}>\n            <Helmet>\n                <meta charSet=\"utf-8\" />\n                <meta name=\"description\" content=\"Africa's Healthcare No. 1 Wholesale E-marketplace and Logistics Solution\" />\n                <title>All products</title>\n            </Helmet>\n            <div className=\"product__carousel\">\n                <Container className=\"py-4\">\n                    {<ProductCarousel />}\n                </Container>\n            </div>\n            <div>\n                <h3 className=\"intro-caption\">Africa's Premium Healthcare E-marketplace and Logisttics Solution</h3>\n            </div>\n            <Container className=\"product\" >\n            {loading ? <LoadingMain />\n                : error ? <Message variant='danger'>{error}</Message>\n                    :\n                    <div>\n                        <Row>\n                            <Col xs={6}><h3><strong>Most Recent Products</strong></h3></Col>\n                            <Col xs={6}><SearchProduct/></Col>\n                            {/*<Col xs={6} className=\"float-end\"><Button onClick={() => setLgShow(true)} variant=\"outline-info\" className=\"ms-auto\">Search Products</Button></Col> */}\n                        </Row>\n                        \n                        \n                        <Row>\n                            {products.map(product => (\n                                <Col key={product.id} xs={6} md={4} lg={4} xl={3}>\n                                    <Product product={product} />\n                                </Col>\n                            ))}\n                        </Row>\n                        <Paginate page={page} pages={pages} keyword={keyword} />\n                    </div>\n            }\n            \n            </Container>\n        <Modal size=\"lg\" show={lgShow} onHide={() => setLgShow(false)} aria-labelledby=\"example-modal-sizes-title-lg\">\n            <Modal.Body>\n               <SearchProduct />\n            </Modal.Body>\n        </Modal>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated\n  });\n  \n  export default connect(mapStateToProps, {listProducts }) (HomeScreen)\n","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\blogscreen\\BlogDetailsScreen.js",["345","346","347","348","349","350"],"import React, { useState, useEffect } from 'react';\nimport { Button, Card, Col, Container, Form, Image, Row } from 'react-bootstrap';\nimport Message from '../../components/Message';\nimport Loader from '../../components/Loader';\nimport { useDispatch, useSelector } from 'react-redux'\nimport {Helmet} from \"react-helmet\";\nimport { Link } from 'react-router-dom';\nimport { BLOG_COMMENT_RESET } from '../../redux/actions/types';\nimport { listBlogDetails, getBlogComment } from '../../redux/actions/blogActions';\n\n\nconst BlogDetailsScreen = ({match}) => {\n\n    const [comment, setComment] = useState('')\n\n    const blogDetails = useSelector(state => state.blogDetails)\n    const { loading, error, blog } = blogDetails\n    \n\n    const dispatch = useDispatch()\n\n    const  blogComment = useSelector(state => state.blogComment)\n    const { loading:blogCommentLoading, error:blogCommentError, success:blogCommentSuccess} = blogComment\n\n    useEffect(() => {\n        const slug = match.params.id;\n        if (blogCommentSuccess) {\n            setComment('')\n            \n        }\n        dispatch(listBlogDetails(slug))\n    }, [dispatch, blogCommentSuccess])\n\n    const createBlog = () => {\n        return {__html: blog.body}\n    };\n\n    const capitalizeFirstLetter = (word) => {\n        if (word)\n            return word.charAt(0).toUpperCase() + word.slice(1);\n        return '';\n    };\n\n    const submitHandler = (e) => {\n        const slug = match.params.id\n        e.preventDefault()\n        dispatch(getBlogComment(\n            slug, {\n            comment\n        }\n        ))\n    }\n    \n    return (\n        <Container className=\"content post-details\">\n            <Helmet>\n                <meta charSet=\"utf-8\" />\n                <meta name=\"description\" content=\"Health related blog content\" />\n                <title>{blog.title}</title>\n            </Helmet>\n            <Row>\n                <Col sm={8}>\n                <div>\n                <h4 className='text-muted post-details__category'>Category: {capitalizeFirstLetter(blog.category)}</h4>\n                <Image className=\"post-details__img\" src={blog.image} fluid/>\n                <h3 className='display-2 post-details__title text-center'>{blog.title}</h3>\n                {/* <p className=\"blog__comment__date\"><i>{blog.dateCreated}</i></p> */}\n                \n                <div className='mt-5 mb-5' dangerouslySetInnerHTML={createBlog()} />\n            </div>\n            <div className=\"blog__content\">\n            <div className=\"blog__comments\">\n                \n            {!blog?.comments?.length ? (\n                    <p>No comments</p>\n                ) : (\n                <div className=\"blog__comment\">\n                    {blog?.comments.map((comment) => (\n                    <div key={comment?.id}>\n                        <p className='blog__comment__name'>{comment?.name}</p>          \n                        <p className=\"blog__comment__date\"><i>{comment?.dateCreated.substring(0, 10)}</i></p>\n                        <p className=\"blog__comment__comment\">{comment?.comment}</p>\n                    </div> \n                    ))}\n                </div>\n                )}\n            </div>\n            {blogCommentLoading && <Loader />}\n            {blogCommentSuccess && <Message variant='success'>Comment Submitted</Message>}\n            {blogCommentError && <Message variant='info'>Please login before adding a comment</Message>}\n                <Form onSubmit={submitHandler}>\n                <Form.Group controlId='comment'>\n                    <Form.Label className=\"blog__add-comment\">Comment</Form.Label> {/* The label called review is named comment in the database(backend)*/}\n                    <Form.Control\n                        as='textarea'\n                        row='5'\n                        value={comment}\n                        onChange={(e) => setComment(e.target.value)}\n                    ></Form.Control>\n                </Form.Group>\n                <Button type='submit' variant='primary' className=\"blog__comment__button\">Add Comment</Button>\n                </Form>\n            </div>\n                </Col>\n                <Col sm={4}></Col>\n            </Row>\n            \n        </Container>\n        \n    );\n};\n\nexport default BlogDetailsScreen;","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\orderScreens\\PlaceOrderScreen.js",["351","352","353"],"import React, { useEffect } from 'react'\nimport { Button, Row, Col, ListGroup, Image, Card, Container } from 'react-bootstrap'\nimport { Link, useLocation } from 'react-router-dom'\nimport { useDispatch, useSelector, connect } from 'react-redux'\nimport Message from '../../components/Message'\nimport CheckoutSteps from '../../components/CheckoutSteps'\nimport {Helmet} from \"react-helmet\";\nimport { createOrder } from '../../redux/actions/orderActions'\nimport { ORDER_CREATE_RESET } from '../../constants/orderConstants'\n\nfunction PlaceOrderScreen({ history, isAuthenticated }) {\n\n    const orderCreate = useSelector(state => state.orderCreate)\n    const { order, error, success } = orderCreate\n    const location = useLocation()\n    const dispatch = useDispatch()\n\n    const cart = useSelector(state => state.cart)\n\n    cart.itemsPrice = cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\n\n\n\n    if (!cart.paymentMethod) {\n        history.push('/payment')\n    }\n\n    useEffect(() => {\n        if (success) {\n            history.push(`/order/${order.id}`)\n            dispatch({ type: ORDER_CREATE_RESET })\n        }\n    }, [success, history])\n\n    const placeOrder = () => {\n        if (!isAuthenticated) {\n            history.push({\n                pathname: \"/login\",\n                state: {\n                    from: location\n                }\n            })\n        } else{\n            dispatch(createOrder({\n                orderItems: cart.cartItems,\n                shippingAddress: cart.shippingAddress,\n                paymentMethod: cart.paymentMethod,\n                itemsPrice: cart.itemsPrice,\n            }))\n        }  \n        \n    }\n    return (\n        <Container className=\"content\">\n            <Helmet>\n             <meta charSet=\"utf-8\" />\n                <meta name=\"description\" content=\"Africa's Healthcare No. 1 Wholesale E-marketplace and Logistics Solution\" />\n                <title>Place Order</title>\n            </Helmet>\n            <Row>\n                <Col md={4}>\n                     <div >\n                     \n                         <h3 className=\"me-2\" style={{marginTop:\"30px\"}}><strong>Shipping Address: </strong></h3>\n                         <p>\n                             {cart.shippingAddress.address},  {cart.shippingAddress.city}\n                             {'  '}\n                             {cart.shippingAddress.postalCode},\n                             {'  '}\n                             {cart.shippingAddress.country}\n                         </p>\n                     </div>\n                     <div >\n                         <h3 className=\"me-2\"><strong>Payment Method: </strong></h3>\n                         <p>\n                             {cart.paymentMethod}\n                         </p>\n                     </div> \n                            <h3><strong>Order Summary</strong></h3>\n                          \n                                <Row>\n                                    <Col><p>Sub total:</p></Col>\n                                    <Col><p>&#8358; {cart.itemsPrice}</p></Col>\n                                </Row>\n                          \n                                {error && <Message variant='danger'>{error}</Message>}\n                       \n                                <div className=\"d-grid gap-2\">\n                                    <Button\n                                        type='button'\n                                        size=\"lg\"\n                                        disabled={cart.cartItems === 0}\n                                        onClick={placeOrder}\n                                    >\n                                        Place Order\n                                    </Button>\n                                </div>\n                </Col>\n                <Col md={8}>\n                    <ListGroup variant='flush'>\n                        <ListGroup.Item>\n                            <h2>Order Items</h2>\n                            {cart.cartItems.length === 0 ? <Message variant='info'>\n                                No Product in the Cart\n                            </Message> : (\n                                <ListGroup variant='flush'>\n                                    {cart.cartItems.map((item, index) => (\n                                        <ListGroup.Item key={index}>\n                                            <Row>\n                                                <Col md={1}>\n                                                    {/*  <Image src={`${process.env.REACT_APP_API_URL}${item.image}`} alt={item.name} fluid rounded /> */}\n                                                    <Image src={item.image} alt={item.name} fluid rounded />\n                                                </Col>\n\n                                                <Col>\n                                                    <p className=\"mx-5\"><Link to={`/product/${item.product}`}>{item.name}</Link></p>\n                                                </Col>\n\n                                                <Col md={4}>\n                                                    <p className=\"product__price\">{item.qty} X &#8358; {item.price} = &#8358; {(item.qty * item.price).toFixed(2)}</p>\n                                                </Col>\n                                            </Row>\n                                        </ListGroup.Item>\n                                    ))}\n                                </ListGroup>\n                            )}\n                        </ListGroup.Item>\n                    </ListGroup>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated\n  });\n  \n  export default connect(mapStateToProps, {createOrder }) ( PlaceOrderScreen )","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\authScreens\\LoginScreen.js",["354","355","356"],"import React, { useState} from 'react'\nimport {Container, Row, Col, Form, Button} from 'react-bootstrap'\nimport { Link, Redirect, useLocation } from 'react-router-dom'\nimport { connect, useDispatch, useSelector } from 'react-redux'\nimport swal from 'sweetalert';\nimport {Helmet} from \"react-helmet\";\nimport Loader from '../../components/Loader'\nimport Message from '../../components/Message'\nimport { login } from '../../redux/actions/authActions'\n\nfunction LoginScreen({ isAuthenticated }) {\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [message, setMessage] = useState(false)\n\n    const dispatch = useDispatch()\n    const {state: {from = \"/\"} = {} } = useLocation();\n\n    const auth = useSelector(state => state.auth)\n    const { error, loading } = auth\n    console.log(error)\n    \n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(login(email, password))\n    }\n\n    if (isAuthenticated){\n        return <Redirect to={from} />\n      }\n\n\n    return (\n        <Container className='content auth-container'>\n            <Helmet>\n                <meta charSet=\"utf-8\" />\n                <title>Sign In</title>\n            </Helmet>\n            <div className=\"\">\n            <div className=' auth-header text-center'>\n            {error && <Message variant='danger'>{error}</Message>}\n            {loading && <Loader />}\n            \n                <h2 className=\"auth-header\">Welcome back!</h2>\n                <p className=\"auth-base\"> Don't have an account?<Link to=\"/register\"> Sign Up</Link></p>\n            </div>\n                <Form className=\"auth-form px-4\" onSubmit={submitHandler}>\n                    <Form.Group className=\"mb-3\" controlId=\"formGroupPassword\">\n                        <Form.Control \n                            className=\"auth-input search-ppty\" \n                            variant=\"lg\"\n                            type=\"email\" \n                            placeholder=\"Enter Email\" \n                            value={email}\n                            onChange={(e) => setEmail(e.target.value)}\n                            />\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"formGroupPassword\">\n                        <Form.Control \n                            className=\"auth-input search-ppty\" \n                            type=\"password\" \n                            variant=\"lg\"\n                            placeholder=\"password\"\n                            value={password}\n                            onChange={(e) => setPassword(e.target.value)}\n                            \n                            />\n                    </Form.Group>\n                    <Row className=\"p-2\">\n                    <Col>\n                        <div>\n                        <p>Forgotten password? <Link to=\"/reset-password\">Reset Password</Link></p>\n                        </div>\n                    </Col>\n                    <Col>\n                        <Button className=\"auth-button\" type=\"submit\">Sign In</Button>\n                    </Col>\n                </Row>\n                </Form>\n                </div>\n            \n    </Container>\n    )\n}\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated\n  });\n  \n  export default connect(mapStateToProps, {login}) (LoginScreen)\n","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\shippingScreens\\ShippingScreen.js",["357","358","359"],"import React, { useState} from 'react'\nimport { Container, Form, Button, Image, Card} from 'react-bootstrap'\nimport {Helmet} from \"react-helmet\";\nimport { Link, Redirect } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport CheckoutSteps from '../../components/CheckoutSteps'\nimport { saveShippingAddress } from '../../redux/actions/cartActions'\n\nfunction ShippingScreen({history}) {\n\n\n    const cart = useSelector(state => state.cart)\n    const { shippingAddress } = cart\n\n    const dispatch = useDispatch()\n\n    const [address, setAddress] = useState(shippingAddress.address)\n    const [city, setCity] = useState(shippingAddress.city)\n    const [postalCode, setPostalCode] = useState(shippingAddress.postalCode)\n    const [country, setCountry] = useState(shippingAddress.country)\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(saveShippingAddress({ address, city, postalCode, country }))\n        history.push('/payment')\n    }\n\n\n    return (\n        <Container className=' auth-container content'>\n            <Helmet>\n                <meta charSet=\"utf-8\" />\n                <meta name=\"description\" content=\"Africa's Healthcare No. 1 Wholesale E-marketplace and Logistics Solution\" />\n                <title>Billing address</title>\n            </Helmet>\n        <Card className=\"p-5\">\n       <CheckoutSteps step1 step2 />\n        <h2 className=\"text-center checkout__header\">Shipping Address</h2>\n         {/*} {error && <Message variant='danger'>{error}</Message>}\n        {loading && <Loader />} */}\n            <Form className=\"auth-form\" onSubmit={submitHandler}>\n                <Form.Group className=\"mb-3\" controlId=\"address\">\n                    <Form.Control \n                        className=\"auth-input\" \n                        type='text'\n                        placeholder='Shipping address'\n                        value={address ? address : ''}\n                        onChange={(e) => setAddress(e.target.value)}\n                        required\n                        />\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"city\">\n                    <Form.Control \n                        className=\"auth-input\" \n                        type='text'\n                        placeholder='City'\n                        value={city ? city : ''}\n                        onChange={(e) => setCity(e.target.value)}\n                        required\n                        />\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId='postalCode'>\n                    <Form.Control\n                        className=\"auth-input\"\n                        type='text'\n                        placeholder='Postal code'\n                        value={postalCode ? postalCode : ''}\n                        onChange={(e) => setPostalCode(e.target.value)}\n                        required\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\" controlId='country'>\n                    <Form.Control\n                        className=\"auth-input\" \n                        type='text'\n                        placeholder='Country'\n                        value={country ? country : ''}\n                        onChange={(e) => setCountry(e.target.value)}\n                        required\n                    >\n                    </Form.Control>\n                </Form.Group>\n                    <div className='d-grid gap-2'>\n                        <Button size=\"lg\" type=\"submit\">Next</Button>\n                    </div>\n            </Form>\n            </Card>\n</Container>\n    )\n}\n\nexport default ShippingScreen\n","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\cartScreen\\CartScreen.js",["360"],"import React, { useEffect} from 'react'\nimport { Link, Redirect, useLocation  } from 'react-router-dom'\nimport { useDispatch, useSelector, connect } from 'react-redux'\nimport {Helmet} from \"react-helmet\";\nimport { Row, Col, ListGroup, Image, Form, Button, Card, Container } from 'react-bootstrap'\nimport Message from '../../components/Message'\nimport { addToCart, removeFromCart } from '../../redux/actions/cartActions'\n\nfunction CartScreen({ match, history, isAuthenticated }) {\n    const productId = match.params.id\n    const location = useLocation()\n    const qty = location.search ? Number(location.search.split('=')[1]) : 1\n    const dispatch = useDispatch()\n\n    \n    const cart = useSelector(state => state.cart)\n    const { cartItems } = cart\n\n    useEffect(() => {\n        if (productId) {\n            dispatch(addToCart(productId, qty))\n        }\n    }, [dispatch, productId, qty])\n\n\n    const removeFromCartHandler = (id) => {\n        dispatch(removeFromCart(id))\n    }\n\n    const checkoutHandler = () => {\n        if (!isAuthenticated) {\n            history.push({\n                pathname: \"/login\",\n                state: {\n                    from: location\n                }\n            })\n        } else{\n            history.push('/shipping')\n        }  \n    }\n    const keepShopping = ()=>{\n        history.push('/products')\n    }\n\n    return (\n        <Container className=\"content checkout\">\n            <Helmet>\n             <meta charSet=\"utf-8\" />\n                <meta name=\"description\" content=\"Africa's Healthcare No. 1 Wholesale E-marketplace and Logistics Solution\" />\n                <title>Cart Page</title>\n            </Helmet>\n        <Row>\n            <Col md={8}>\n                <h2 className=\"checkout__header text-center\">Cart Page</h2>\n                {cartItems.length === 0 ? (\n                    <Message variant='info'>\n                        No Item in the Cart <Link to='/'>Go Back</Link>\n                    </Message>\n                    \n                ) : (\n                        <ListGroup variant='flush'>\n                            {cartItems.map(item => (\n                                <ListGroup.Item key={item.product}>\n\n                                    {/* Item info */}\n                                    \n                                    <Row>\n                                        <Col md={2}>\n                                            {/* <Image src={`${process.env.REACT_APP_API_URL}${item.image}`} alt={item.name} fluid rounded /> */}\n                                            <Image src={item.image} alt={item.name} fluid rounded />\n                                        </Col>\n                                        <Col md={3} className=\"cart__name\">\n                                            <Link to={`/product/${item.product}`}>{item.name}</Link>\n                                        </Col>\n\n                                        {/* Price of item */}\n                                        <Col md={2}>\n                                            <p className=\"product__price\">&#8358; {item.price}</p>\n                                        </Col>\n\n                                        {/* Column for adjusting quantity of items in the cart  */}\n                                        \n                                        <Col md={3}>\n                                            <Form.Control\n                                                style={{backgroundColor:\"white\", height:\"3rem\"}}\n                                                type=\"number\"\n                                                min=\"1\"\n                                                max={item.countInStock} \n                                                value={item.qty}\n                                                onChange={(e) => dispatch(addToCart(item.product, Number(e.target.value)))}\n                                            >\n                            \n\n                                            </Form.Control>\n                                        </Col>\n                                         {/* Remove Item from Cart Column */}       \n                                        <Col md={1} className=\"cart__btn\">\n                                            <Button\n                                                type='button'\n                                                variant='light'\n                                                onClick={() => removeFromCartHandler(item.product)}\n                                            >\n                                                {/*<i className='fas fa-trash'></i> */}\n                                                <span className=\"product__trash\">Remove</span>\n                                            </Button>\n                                            \n                                        </Col>\n                                    </Row>\n                                </ListGroup.Item>\n                            ))}\n                        </ListGroup>\n                    )}\n            </Col>\n\n            <Col md={4}>\n                <Card>\n                    <ListGroup variant='flush'>\n                        <ListGroup.Item className=\"\">\n                            <h2>{cartItems.reduce((acc, item) => acc + item.qty, 0)} Product(s) Added</h2>\n                            <p className=\"product__price\"> Sub total: &#8358; {cartItems.reduce((acc, item) => acc + item.qty * item.price, 0).toFixed(2)}</p>\n                        </ListGroup.Item>\n                        <ListGroup.Item>\n                            <div className=\"d-grid gap-2\">\n                                <Button\n                                    type='button'\n                                    size=\"lg\"\n                                    disabled={cartItems.length === 0}\n                                    onClick={checkoutHandler}\n                                >\n                                    Checkout\n                                </Button>\n                            </div>\n                        </ListGroup.Item>\n                    <ListGroup.Item>\n                        <div className=\"d-grid gap-2\">\n                            <Button\n                                type='button'\n                                size=\"lg\"\n                                variant=\"warning\"\n                                onClick={keepShopping}\n                            >\n                                Add More Products?\n                            </Button>\n                        </div>\n                    </ListGroup.Item>\n                    </ListGroup>\n                </Card>\n            </Col>\n        </Row>\n        </Container>\n    )\n}\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated\n  });\n  \n  export default connect(mapStateToProps, { addToCart, removeFromCart}) (CartScreen)","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\orderScreens\\OrderScreen.js",["361","362"],"import React, { useState, useEffect } from 'react'\nimport { Button, Row, Col, ListGroup, Image, Card, Container } from 'react-bootstrap'\nimport { Link, useLocation } from 'react-router-dom'\nimport { useDispatch, useSelector, connect } from 'react-redux'\nimport {Helmet} from \"react-helmet\";\nimport { PayPalButton } from 'react-paypal-button-v2'\nimport Message from '../../components/Message'\nimport LoadingMain from '../../components/spinners/LoadingMain'\nimport Loader from '../../components/Loader'\nimport { getOrderDetails, payOrder, deliverOrder } from '../../redux/actions/orderActions'\nimport { ORDER_PAY_RESET, ORDER_DELIVER_RESET } from '../../constants/orderConstants'\n\nfunction OrderScreen({ match, history, isAuthenticated }) {\n    const orderId = match.params.id\n    const dispatch = useDispatch()\n    const location = useLocation()\n\n    const [sdkReady, setSdkReady] = useState(false)\n\n    const orderDetails = useSelector(state => state.orderDetails)\n    const { order, error, loading } = orderDetails\n\n    const orderPay = useSelector(state => state.orderPay)\n    const { loading: loadingPay, success: successPay } = orderPay\n\n    const orderDeliver = useSelector(state => state.orderDeliver)\n    const { loading: loadingDeliver, success: successDeliver } = orderDeliver\n\n    if (!loading && !error) {\n        order.itemsPrice = order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\n    }\n\n\n    const addPayPalScript = () => {\n        const script = document.createElement('script')\n        script.type = 'text/javascript'\n        script.src = 'https://www.paypal.com/sdk/js?client-id=AU7EU-hk7Fhx_4JxjlZIdHXssAJDOBgt-ejulNmFSpuSPrrJPxj18G6uhouktuYEp3HRSFld1jaYfcWd'\n        script.async = true\n        script.onload = () => {\n            setSdkReady(true)\n        }\n        document.body.appendChild(script)\n    }\n\n    useEffect(() => {\n\n        if (!isAuthenticated) {\n            history.push({\n                pathname: \"/login\",\n                state: {\n                    from: location,\n                }\n            })\n        }\n\n        if (!order || successPay || order.id !== Number(orderId) || successDeliver) {\n            dispatch({ type: ORDER_PAY_RESET })\n            dispatch({ type: ORDER_DELIVER_RESET })\n\n            dispatch(getOrderDetails(orderId))\n        } else if (!order.isPaid) {\n            if (!window.paypal) {\n                addPayPalScript()\n            } else {\n                setSdkReady(true)\n            }\n        }\n    }, [dispatch, order, orderId, successPay, successDeliver])\n\n\n    const successPaymentHandler = (paymentResult) => {\n        dispatch(payOrder(orderId, paymentResult))\n    }\n\n    const deliverHandler = () => {\n        dispatch(deliverOrder(order))\n    }\n\n    return loading ? (\n        <LoadingMain />\n    ) : error ? (\n        <Message variant='danger'>{error}</Message>\n    ) : (\n                <Container className=\"content\">\n                    <Helmet>\n                     <meta charSet=\"utf-8\" />\n                        <meta name=\"description\" content=\"Africa's Healthcare No. 1 Wholesale E-marketplace and Logistics Solution\" />\n                        <title>Order products</title>\n                    </Helmet>\n                   {/* <h1>Order: {order.Id}</h1> */}\n                    <Row>\n                        <Col md={8}>\n                            <ListGroup variant='flush'>\n                                <ListGroup.Item>\n                                    <p><strong>Username: </strong> {order.user.username}</p>\n                                    <p><strong>Email: </strong><a href={`mailto:${order.user.email}`}>{order.user.email}</a></p>\n                                    <p>\n                                        <strong>Shipping Address: </strong>\n                                        {order.shippingAddress.address},  {order.shippingAddress.city}\n                                        {'  '}\n                                        {order.shippingAddress.postalCode},\n                                {'  '}\n                                        {order.shippingAddress.country}\n                                    </p>\n                                    <Row>\n                                        <Col sm={2}>\n                                            <p><strong>Delivery Status:</strong></p>\n                                        </Col>\n                                        <Col sm={10}>\n                                        {order.isDelivered ? (\n                                        <Message variant='success'>Delivered on {order.dateDelivered}</Message>\n                                    ) : (\n                                            <Message variant='info'>Not Delivered</Message>\n                                        )}\n                                        </Col>\n\n                                    </Row>\n                                    \n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                    <p>\n                                        <strong>Payment Method: </strong>\n                                        {order.paymentMethod}\n                                    </p>\n                                    <Row><Col sm={2}><p><strong>Payment Status:</strong></p></Col>\n                                    <Col sm={10}>{order.isPaid ? (\n                                        <Message variant='success'>Payment successfully {order.datePaid}</Message>\n                                    ) : (\n                                            <Message variant='info'>Not Paid</Message>\n                                        )}\n                                    </Col>\n                                    </Row>\n                                </ListGroup.Item>\n\n                                <ListGroup.Item>\n                                    <h2>Order Items</h2>\n                                    {order.orderItems.length === 0 ? <Message variant='info'>\n                                        Order is empty\n                            </Message> : (\n                                            <ListGroup variant='flush'>\n                                                {order.orderItems.map((item, index) => (\n                                                    <ListGroup.Item key={index}>\n                                                        <Row>\n                                                            <Col md={1}>\n                                                                {/* <Image src={`${process.env.REACT_APP_API_URL}${item.image}`} alt={item.name} fluid rounded /> */}\n                                                                <Image src={item.image} alt={item.name} fluid rounded />\n                                                            </Col>\n\n                                                            <Col>\n                                                                <p><Link to={`/product/${item.product}`}>{item.name}</Link></p>\n                                                            </Col>\n\n                                                            <Col md={4}>\n                                                                {item.qty} X &#8358; {item.price} = &#8358; {(item.qty * item.price).toFixed(2)}\n                                                            </Col>\n                                                        </Row>\n                                                    </ListGroup.Item>\n                                                ))}\n                                            </ListGroup>\n                                        )}\n                                </ListGroup.Item>\n\n                            </ListGroup>\n\n                        </Col>\n\n                        <Col md={4}>\n                            <Card>\n                                <ListGroup variant='flush'>\n                                    <ListGroup.Item>\n                                        <h2>Process Transaction</h2>\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item>\n                                        <Row className=\"product__price\">\n                                            <Col><p>Sub total:</p></Col>\n                                            <Col><p><strong>&#8358; {order.itemsPrice}</strong></p></Col>\n                                        </Row>\n                                    </ListGroup.Item>\n\n                                    {!order.isPaid && (\n                                        <ListGroup.Item>\n                                            {loadingPay && <LoadingMain />}\n\n                                            {!sdkReady ? (\n                                                <LoadingMain />\n                                            ) : (\n                                                    <PayPalButton\n                                                        amount={order.totalPrice}\n                                                        onSuccess={successPaymentHandler}\n                                                    />\n                                                )}\n                                        </ListGroup.Item>\n                                    )}\n                                </ListGroup>\n                                {loadingDeliver && <LoadingMain />}\n                                {isAuthenticated && isAuthenticated.isAdmin && order.isPaid && !order.isDelivered && (\n                                    <ListGroup.Item>\n                                        <Button\n                                            type='button'\n                                            className='btn btn-block'\n                                            onClick={deliverHandler}\n                                        >\n                                            Mark As Delivered\n                                        </Button>\n                                    </ListGroup.Item>\n                                )}\n                            </Card>\n                        </Col>\n                    </Row>\n                </Container>\n            )\n}\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated\n  });\n  \n  export default connect(mapStateToProps, { getOrderDetails, payOrder, deliverOrder }) (OrderScreen)\n","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\blogscreen\\BlogCategoryScreen.js",["363","364","365","366"],"import React, {useState, useEffect} from 'react'\nimport { Link } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {Helmet} from \"react-helmet\";\nimport {Button, Container, Image} from 'react-bootstrap'\nimport { getBlogCategory } from '../../redux/actions/blogActions'\n\n\nconst BlogCategoryScreen = ({match}) => {\n    const [currentCategory, setCurrentCategory] = useState('');\n\n    const blogCategory = useSelector(state => state.blogCategory)\n    const { error, loading, blogs } = blogCategory\n    console.log(blogs)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        const id = match.params.id\n        const category = match.params.id\n        setCurrentCategory(category);\n        dispatch(getBlogCategory(id))\n\n    }, [])\n\n\n    const getCategoryBlogs = () => {\n        let list = [];\n        let result = [];\n\n        blogs.map(blog => {\n            return list.push(\n                <div>\n                    <h2 className=\"blog__category__header\"><span className=\"d-inline-block mb-2\">Blog Category: <strong> {blog.category}</strong></span></h2>\n                    <div className=\"row no-gutters border rounded overflow-hidden flex-md-row mb-4 h-md-250 position-relative\">\n                        \n                        <div className=\"col p-4 d-flex flex-column position-static\">\n                           {/* <Image className=\"post__img\" src={`${process.env.REACT_APP_API_URL}${blog.image}`} alt={blog.title} fluid/> */}\n                            <Image className=\"post__img\" src={blog.image} alt={blog.title} fluid/>\n                            <h3 className=\"mb-0\">{blog.title}</h3>\n                            <p className=\" mb-auto\">{blog.introduction}</p>\n                            <Link to={`/post/${blog.slug}`} className=\"stretched-link\"><Button className=\"blog__category__btn\">Read More</Button></Link>\n                        </div>\n                        <div className=\"col-auto d-none d-lg-block\">\n                        </div>\n                    </div>\n                </div>\n            );\n        });\n\n        for (let i = 0; i < list.length; i += 2) {\n            result.push(\n                <div key={i} className='row mb-2'>\n                    <div className='col-md-6'>\n                        {list[i]}\n                    </div>\n                    <div className='col-md-6'>\n                        {list[i+1] ? list[i+1] : null}\n                    </div>\n                </div>\n            )\n        }\n\n        return result;\n    };\n\n    return (\n        <Container className='content'>\n            <Helmet>\n             <meta charSet=\"utf-8\" />\n                <meta name=\"description\" content=\"Health related blog content\" />\n                <title>Blog categories</title>\n            </Helmet>\n            {/*\n            <div className='container mt-3'>\n            <h3 className='display-4'>Category: {currentCategory} </h3>\n            <div className=\"nav-scroller py-1 mb-2\">\n                <nav className=\"nav d-flex justify-content-between\">\n                    <Link className=\"p-2 text-muted\" to='/blog/category/medications'>Medications</Link>\n                    <Link className=\"p-2 text-muted\" to='/blog/category/diseases/'>Diseases</Link>\n                    <Link className=\"p-2 text-muted\" to='/category/health_news'>Health News</Link>\n                    <Link className=\"p-2 text-muted\" to='/category/medications'>Medications</Link>\n                    <Link className=\"p-2 text-muted\" to='/category/medical_equipment'>Medical Equipment</Link>\n                </nav>\n            </div>\n           \n        </div>\n            */}\n            {getCategoryBlogs()}\n        </Container>\n    )\n}\n\nexport default BlogCategoryScreen\n","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\blogscreen\\BlogListScreen.js",["367","368","369","370","371","372","373"],"import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {Helmet} from \"react-helmet\";\nimport { Button, Card, Col, Container, Image, Row } from 'react-bootstrap'\nimport BlogCarousel from '../../components/blog/BlogCarousel'\nimport Blog from '../../components/blog/Blog'\nimport { listBlogs } from '../../redux/actions/blogActions'\nimport { getFeaturedBlog } from '../../redux/actions/blogActions'\nimport { Link } from 'react-router-dom'\n\n\nconst BlogListScreen = () => {\n    \n    const dispatch = useDispatch()\n    const blogList = useSelector(state => state.blogList)\n    const { error, loading, blogs } = blogList\n\n    const featuredBlog = useSelector(state => state.featuredBlog)\n    const { blog } = featuredBlog\n    const post = blog[0]\n\n    useEffect(() => {\n\n        dispatch(listBlogs())\n        dispatch(getFeaturedBlog())\n\n    }, [dispatch])\n    \n    return (\n        <Container className=\"content\">\n             <meta charSet=\"utf-8\" />\n                <Helmet>\n                <meta name=\"description\" content=\"Health related blog content\" />\n                <title>Blog posts</title>\n                </Helmet>\n            <BlogCarousel />\n            <div style={{marginTop:\"20px\"}}>\n                <div className=\"post\">\n                    <h3 className=\"m-0 p-0\"><strong>Latest Posts</strong></h3>\n                    <hr />\n                    <Row>\n                            {blogs.map(blog => (\n                                <Col key={blog.id} xs={12} sm={6} md={4} lg={4} xl={3}>\n                                    <Blog blog={blog} />\n                                </Col>\n                            ))}  \n                    </Row>\n                </div>\n           \n           \n            </div>\n        </Container>\n    )\n}\n\nexport default BlogListScreen\n","C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\authScreens\\_TextInput.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\global\\Navigation.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\actions\\types.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\actions\\cartActions.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\Message.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\CheckoutSteps.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\SearchBox.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\actions\\orderActions.js",["374","375","376","377","378","379","380","381","382"],"import axios from 'axios'\nimport {\n    ORDER_CREATE_REQUEST,\n    ORDER_CREATE_SUCCESS,\n    ORDER_CREATE_FAIL,\n\n    ORDER_DETAILS_REQUEST,\n    ORDER_DETAILS_SUCCESS,\n    ORDER_DETAILS_FAIL,\n\n    ORDER_PAY_REQUEST,\n    ORDER_PAY_SUCCESS,\n    ORDER_PAY_FAIL,\n    ORDER_PAY_RESET,\n\n    ORDER_LIST_MY_REQUEST,\n    ORDER_LIST_MY_SUCCESS,\n    ORDER_LIST_MY_FAIL,\n    ORDER_LIST_MY_RESET,\n\n    ORDER_LIST_REQUEST,\n    ORDER_LIST_SUCCESS,\n    ORDER_LIST_FAIL,\n\n    ORDER_DELIVER_REQUEST,\n    ORDER_DELIVER_SUCCESS,\n    ORDER_DELIVER_FAIL,\n    ORDER_DELIVER_RESET,\n\n    CART_CLEAR_ITEMS\n} from './types'\n\n\n\nexport const createOrder = (order) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_CREATE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `JWT ${localStorage.getItem('access')}`,\n                //Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.post(\n            `${process.env.REACT_APP_API_URL}/api/orders/add/`,\n            order,\n            config\n        )\n\n        dispatch({\n            type: ORDER_CREATE_SUCCESS,\n            payload: data\n        })\n\n        dispatch({\n            type: CART_CLEAR_ITEMS,\n            payload: data\n        })\n\n        localStorage.removeItem('cartItems')\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_CREATE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_DETAILS_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                 Authorization: `JWT ${localStorage.getItem('access')}`,\n                //Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `${process.env.REACT_APP_API_URL}/api/orders/${id}/`,\n            config\n        )\n\n        dispatch({\n            type: ORDER_DETAILS_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_DETAILS_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\nexport const payOrder = (id, paymentResult) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_PAY_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                 Authorization: `JWT ${localStorage.getItem('access')}`,\n                //Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `${process.env.REACT_APP_API_URL}/api/orders/${id}/pay/`,\n            paymentResult,\n            config\n        )\n\n        dispatch({\n            type: ORDER_PAY_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_PAY_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const deliverOrder = (order) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_DELIVER_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `JWT ${localStorage.getItem('access')}`,\n                //Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `${process.env.REACT_APP_API_URL}/api/orders/${order.id}/deliver/`,\n            {},\n            config\n        )\n\n        dispatch({\n            type: ORDER_DELIVER_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_DELIVER_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\nexport const listMyOrders = () => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_LIST_MY_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                 Authorization: `JWT ${localStorage.getItem('access')}`,\n                //Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `${process.env.REACT_APP_API_URL}/api/orders/myorders/`,\n            config\n        )\n\n        dispatch({\n            type: ORDER_LIST_MY_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_LIST_MY_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const listOrders = () => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_LIST_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                 Authorization: `JWT ${localStorage.getItem('access')}`,\n                //Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `${process.env.REACT_APP_API_URL}/api/orders/`,\n            config\n        )\n\n        dispatch({\n            type: ORDER_LIST_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_LIST_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}","C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\FormContainer.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\Carousel.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\Loader.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\actions\\blogActions.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\global\\Navbar.js",["383","384","385","386"],"import React, { Fragment } from 'react';\nimport {Link, NavLink} from 'react-router-dom'\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { useSelector, connect } from 'react-redux'\nimport { logout } from '../../redux/actions/authActions';\nimport {NavDropdown} from 'react-bootstrap';\n\n\nconst NavbarInfo = ({ toggleSidebar, isAuthenticated, logout }) => {\n\n    const auth = useSelector(state => state.auth)\n    const { error, loading, user } = auth\n  \n\n    const guestLinks = () => (\n\n        <Fragment>\n            <LinkContainer to='/login'>\n                <li className=\"navbar__auth-link\">Sign In</li>\n            </LinkContainer>\n        </Fragment>\n    );\n  \n    const authLinks = () => (\n        <Fragment>\n            <li className='navbar__list__item'>\n                <NavLink className='navbar__link' to='/products'>\n                        Drugstore\n                </NavLink>\n            </li>\n            <li className=\"navbar__auth-link\" onClick={logout}>Logout</li>\n        </Fragment>\n    );\n\n    return(\n        <nav className='navbar fixed-top shadow-sm'>\n            <div className=\"navbar__logobtn\">\n                <span className=\"navbar__logobtn__btn\" >&#9776;</span>\n        \n                <Link className='navbar__logo' exact to='/'>\n                    <img className='navbar__flolog-logo'  src='/assets/icons/logoandname.png' alt=\"brand-logo\" />\n                </Link>\n            </div>\n            <ul className='navbar__list ms-auto'>\n                <li className='navbar__list__item'>\n                    <NavLink className='navbar__link' exact to='/'>\n                        Home\n                    </NavLink>\n                </li>\n                <li className='navbar__list__item'>\n                    <NavLink className='navbar__link' to='/services'>\n                        Services\n                    </NavLink>\n                </li>\n                \n                <li className='navbar__list__item'>\n                    <NavLink className='navbar__link' to='/about'>\n                        About \n                    </NavLink>\n                </li>\n                <li className='navbar__list__item'>\n                    <NavLink className='navbar__link' to='/blog/categories'>\n                        Blog\n                    </NavLink>\n                </li>\n\n                    {isAuthenticated ? authLinks() : guestLinks()}\n        \n            </ul>\n     \n            <div className='navbar__button' onClick={toggleSidebar}>\n               \n            </div>\n            <div>\n            </div>  \n         \n        </nav>\n    );\n}\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated\n  });\n  \nexport default connect(mapStateToProps, { logout })(NavbarInfo);","C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\actions\\authActions.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\actions\\productActions.js",["387","388","389"],"import axios from 'axios'\nimport {\n    PRODUCT_LIST_REQUEST,\n    PRODUCT_LIST_SUCCESS,\n    PRODUCT_LIST_FAIL,\n\n    PRODUCT_DETAILS_REQUEST,\n    PRODUCT_DETAILS_SUCCESS,\n    PRODUCT_DETAILS_FAIL,\n\n    PRODUCT_DELETE_REQUEST,\n    PRODUCT_DELETE_SUCCESS,\n    PRODUCT_DELETE_FAIL,\n\n    PRODUCT_CREATE_REQUEST,\n    PRODUCT_CREATE_SUCCESS,\n    PRODUCT_CREATE_FAIL,\n\n    PRODUCT_UPDATE_REQUEST,\n    PRODUCT_UPDATE_SUCCESS,\n    PRODUCT_UPDATE_FAIL,\n\n    PRODUCT_CREATE_REVIEW_REQUEST,\n    PRODUCT_CREATE_REVIEW_SUCCESS,\n    PRODUCT_CREATE_REVIEW_FAIL,\n\n\n    PRODUCT_TOP_REQUEST,\n    PRODUCT_TOP_SUCCESS,\n    PRODUCT_TOP_FAIL,\n\n} from './types'\n\n\nexport const listProducts = (keyword = '') => async (dispatch) => {\n    try {\n        dispatch({ type: PRODUCT_LIST_REQUEST })\n\n        const { data } = await axios.get(`${process.env.REACT_APP_API_URL}/api/products${keyword}`)\n\n        dispatch({\n            type: PRODUCT_LIST_SUCCESS,\n            payload: data\n        })\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_LIST_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\nexport const listTopProducts = () => async (dispatch) => {\n    try {\n        dispatch({ type: PRODUCT_TOP_REQUEST })\n\n        const { data } = await axios.get(`${process.env.REACT_APP_API_URL}/api/products/top/`)\n\n        dispatch({\n            type: PRODUCT_TOP_SUCCESS,\n            payload: data\n        })\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_TOP_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const listProductDetails = (id) => async (dispatch) => {\n    try {\n        dispatch({ type: PRODUCT_DETAILS_REQUEST })\n\n        const { data } = await axios.get(`${process.env.REACT_APP_API_URL}/api/products/${id}`)\n\n        dispatch({\n            type: PRODUCT_DETAILS_SUCCESS,\n            payload: data\n        })\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_DETAILS_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const deleteProduct = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: PRODUCT_DELETE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.delete(\n            `${process.env.REACT_APP_API_URL}/api/products/delete/${id}/`,\n            config\n        )\n\n        dispatch({\n            type: PRODUCT_DELETE_SUCCESS,\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_DELETE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\n\nexport const createProduct = () => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: PRODUCT_CREATE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.post(\n            `${process.env.REACT_APP_API_URL}/api/products/create/`,\n            {},\n            config\n        )\n        dispatch({\n            type: PRODUCT_CREATE_SUCCESS,\n            payload: data,\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_CREATE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\nexport const updateProduct = (product) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: PRODUCT_UPDATE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `JWT ${localStorage.getItem('access')}`,\n            }\n        }\n\n        const { data } = await axios.put(\n            `${process.env.REACT_APP_API_URL}/api/products/update/${product.id}/`,\n            product,\n            config\n        )\n        dispatch({\n            type: PRODUCT_UPDATE_SUCCESS,\n            payload: data,\n        })\n\n\n        dispatch({\n            type: PRODUCT_DETAILS_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_UPDATE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\nexport const createProductReview = (productId, review) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: PRODUCT_CREATE_REVIEW_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `JWT ${localStorage.getItem('access')}`,\n            }\n        }\n        \n\n        const { data } = await axios.post(\n            `${process.env.REACT_APP_API_URL}/api/products/${productId}/reviews/`,\n            review,\n            config\n        )\n        dispatch({\n            type: PRODUCT_CREATE_REVIEW_SUCCESS,\n            payload: data,\n        })\n\n\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_CREATE_REVIEW_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}","C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\Rating.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\Paginate.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\Product.js",["390","391"],"import React from 'react'\nimport { Card, Image } from 'react-bootstrap'\nimport Rating from './Rating'\nimport { Link } from 'react-router-dom'\n\nfunction Product({ product }) {\n    return (\n        <div className=\"\">\n            <Link to={`/product/${product.id}`}>\n                \n                <Image className=\"product__img shadow-sm\" src={product.image} fluid/> \n\n                {/*Adding ${process.env.REACT_APP_API_URL} to image src doesn't work in production \n                <Image className=\"product__img shadow-sm\" src={`${process.env.REACT_APP_API_URL}${product.image}`} fluid/> \n                */}\n            </Link>\n            <div>\n                <Link to={`/product/${product.id}`}><h3 className='product__name'>{product.name}</h3></Link>\n                <p as=\"h3\" className=\"product__price\"> &#8358; {product.price}</p>\n                <p>Dosage form: {product.dosageForm}</p>\n                <p>Strength: {product.strength}</p>\n                {/*\n                <div className=\"my-3\">\n                    <Rating value={product.rating} text={`${product.numReviews} reviews`} color={'#f8e825'} />\n                </div>\n                */}\n            </div>\n        \n        </div>\n    )\n}\n\nexport default Product\n","C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\spinners\\LoadingMain.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\SearchProduct.js",["392"],"import React, { useState } from 'react'\nimport { Button, Form } from 'react-bootstrap'\nimport { useHistory } from 'react-router-dom'\nconst SearchProduct = () => {\n\n    const [keyword, setKeyword] = useState('')\n\n    let history = useHistory()\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        if (keyword) {\n            console.log(keyword)\n            history.push(`/products?keyword=${keyword}&page=1`)\n        } else {\n            history.push(history.push(history.location.pathname))\n        }\n    }\n    return (\n        <Form className=\"auth-form px-4\" onSubmit={submitHandler}>\n        <Form.Group controlId='searchbox' inline>\n            <Form.Control\n                variant=\"lg\"\n                className=\"search-ppty\"\n                type='text'\n                placeholder=\"Enter product...\"\n                name='q'\n                style={{backgroundColor:\"white\"}}\n                onChange={(e) => { \n                    setKeyword(e.target.value)\n                }}\n            >\n            </Form.Control>\n        </Form.Group>\n        {/*}\n        <Button\n                type='submit'\n                variant='outline-success'\n                className='p-2'\n            >\n                Submit\n            </Button>\n            */}\n        </Form>\n    )\n}\n\nexport default SearchProduct\n","C:\\projects\\websites\\florix\\florix-frontend\\src\\constants\\orderConstants.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\constants\\productConstants.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\blog\\Blog.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\blog\\BlogCarousel.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\global\\Sidebar.js",["393","394","395","396"],"import React, { Fragment } from 'react';\nimport {Link, NavLink} from 'react-router-dom'\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { useSelector, connect } from 'react-redux'\nimport { logout } from '../../redux/actions/authActions';\nimport {Dropdown, NavDropdown} from 'react-bootstrap';\n\nconst Sidebar = ({\n    isAuthenticated, \n    logout, \n    isOpen,\n    closeSidebar\n}) => {\n    const styles = isOpen ? 'sidebar sidebar--open' : 'sidebar sidebar--closed';\n\n    \nconst guestLinks = () => (\n\n        <Fragment>\n            <LinkContainer className='sidebar__link' to='/register'>\n                <li className='sidebar__list__item sidebar__auth-link' onClick={closeSidebar}>Sign Up</li>\n            </LinkContainer>\n            <LinkContainer className='sidebar__link' to='/login'>\n                <li className='sidebar__list__item sidebar__auth-link' onClick={closeSidebar}>Sign In</li>\n            </LinkContainer>\n        </Fragment>\n    );\n    \n    const authLinks = () => (\n        <Fragment>\n            <li className='sidebar__list__item' onClick={closeSidebar}>\n                <NavLink className='sidebar__link' to='/products'><img src=\"/assets/icons/Store.png\" alt=\"\" style={{height:\"25px\", marginRight:\"20px\"}}/>\n                    Drugstore\n                </NavLink>\n            </li>\n       <LinkContainer className='sidebar__link' to='/profile'>\n            <li className='sidebar__list__item' onClick={closeSidebar}><img src=\"/assets/icons/Profile.png\" alt=\"\" style={{height:\"25px\", marginRight:\"20px\"}}/>\n                Profile\n            </li>\n        </LinkContainer>\n\n            <li className='sidebar__list__item sidebar__auth-link' onClick={closeSidebar} onClick={logout}>Logout</li>\n        </Fragment>\n    );\n\n    return (\n        <Fragment>\n            {isOpen ? <div className='sidebar__backdrop' onClick={closeSidebar}></div> : <Fragment></Fragment>}\n            <nav className={`${styles}`}>\n                <ul className='sidebar__list mt-5'>\n                    <div className='sidebar__logo'>\n                        Navbar App\n                    </div>\n                    <li className='sidebar__list__item' onClick={closeSidebar}>\n                        <NavLink className='sidebar__link' exact to='/'><img src=\"/assets/icons/Home_icon.png\" alt=\"\" style={{height:\"25px\", marginRight:\"20px\"}}/>\n                            Home\n                        </NavLink>\n                    </li>\n                \n                    <li className='sidebar__list__item' onClick={closeSidebar}>\n                        <NavLink className='sidebar__link' to='/services'><img src=\"/assets/icons/Product_icon.png\" alt=\"\" style={{height:\"25px\", marginRight:\"20px\"}}/>\n                            Services\n                        </NavLink>\n                    </li>\n                    <li className='sidebar__list__item' onClick={closeSidebar}>\n                        <NavLink className='sidebar__link' to='/about'><img src=\"/assets/icons/AboutUs_icon.png\" alt=\"\" style={{height:\"25px\", marginRight:\"20px\"}}/>\n                            About Us\n                        </NavLink>\n                    </li>\n                    <li className='sidebar__list__item' onClick={closeSidebar}>\n                        <NavLink className='sidebar__link' to='/blog/categories'><img src=\"/assets/icons/Blog.png\" alt=\"\" style={{height:\"25px\", marginRight:\"20px\"}}/>\n                            Blog\n                        </NavLink>\n                    </li>\n                   \n                    <Dropdown.Divider />\n                    {isAuthenticated ? authLinks() : guestLinks()}\n                    \n                </ul>\n            </nav>\n        </Fragment>\n    );\n};\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated\n  });\n  \nexport default connect(mapStateToProps, { logout })(Sidebar);","C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\reducers\\contactReducer.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\redux\\actions\\contactAction.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\baseScreens\\servicesScreen.js",[],"C:\\projects\\websites\\florix\\florix-frontend\\src\\screens\\blogscreen\\BlogHomeScreen.js",["397"],"import React, { useEffect } from 'react';\nimport { Button, Col, Container, Image, Row } from 'react-bootstrap';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport BlogCarousel from '../../components/blog/BlogCarousel';\nimport { getFeaturedBlog } from '../../redux/actions/blogActions'\n\nconst BlogHomeScreen = () => {\n\n  const featuredBlog = useSelector(state => state.featuredBlog)\n  const { blog } = featuredBlog\n  const post = blog[0]\n\n  const dispatch = useDispatch()\n  useEffect(() => {\n      dispatch(getFeaturedBlog())\n\n  }, [dispatch])\n  return (\n  <Container className=\"content\">\n    <meta charSet=\"utf-8\" />\n        <Helmet>\n        <meta name=\"description\" content=\"Health related blog content\" />\n        <title>Blog post categories</title>\n         </Helmet>\n    <BlogCarousel />\n    <h2 className=\"blog__home__vap mt-5\"><Link to=\"/blog/posts\">All Posts </Link></h2>\n      <div className=\"blog__home\">\n          <h2 className='blog__home__header'><strong>Categories: </strong></h2>\n          <div className='blog__home__lead'>\n              <p className='blog__home__lead__tab'><Link to=\"/blog/category/pharmaceuticals\">Pharmaceuticals</Link></p>\n              <p className='blog__home__lead__tab'><Link to=\"/blog/category/diseases\">Diseases</Link></p>\n          </div>\n          <div className='blog__home__lead mt-2'>\n              <p className='blog__home__lead__tab'><Link to=\"/blog/category/natural-medicine\">Natural Medicine</Link></p>\n              <p className='blog__home__lead__tab mx-4'><Link to=\"/blog/category/lifestyle\">Lifestyle</Link></p>\n          </div>\n      <div className=\"blog__home__bgc px-5 pb-5\">\n        <h4 className=\"mt-5 pt-4\"><strong>Popular Posts</strong></h4>\n      <hr />\n     \n      <Row>\n        <Col xs={12} sm={8}>\n          <Row>\n            <Col xm={4} className=\"\"> <Image className=\"blog__home__img\" src={post?.image} alt={blog?.title}  fluid/></Col>\n            <Col xm={8}>\n                <div className=''>\n                    <p className=\"blog__home__title\"><strong>{post?.title}</strong></p>\n                    <p className=\"blog__home__date\">{post?.datePublished.substring(0, 10)}</p>\n                    <p><Link to={`/post/${post?.slug}`}>Read More</Link></p> \n                </div>\n            </Col>\n          </Row>\n        </Col>\n\n        <Col xs={12} sm={4}>\n        \n        </Col>\n      </Row>\n      </div>\n      </div>\n  </Container>\n\n  )\n};\n\nexport default BlogHomeScreen;\n","C:\\projects\\websites\\florix\\florix-frontend\\src\\components\\FloatingAction.js",["398"],{"ruleId":"399","replacedBy":"400"},{"ruleId":"401","replacedBy":"402"},{"ruleId":"403","severity":1,"message":"404","line":2,"column":8,"nodeType":"405","messageId":"406","endLine":2,"endColumn":14},{"ruleId":"407","severity":1,"message":"408","line":13,"column":8,"nodeType":"409","endLine":13,"endColumn":10,"suggestions":"410"},{"ruleId":"411","severity":1,"message":"412","line":19,"column":60,"nodeType":"413","messageId":"414","endLine":19,"endColumn":128,"fix":"415"},{"ruleId":"411","severity":1,"message":"412","line":20,"column":60,"nodeType":"413","messageId":"414","endLine":20,"endColumn":118,"fix":"416"},{"ruleId":"411","severity":1,"message":"412","line":21,"column":60,"nodeType":"413","messageId":"414","endLine":21,"endColumn":115,"fix":"417"},{"ruleId":"403","severity":1,"message":"418","line":3,"column":39,"nodeType":"405","messageId":"406","endLine":3,"endColumn":48},{"ruleId":"403","severity":1,"message":"419","line":1,"column":27,"nodeType":"405","messageId":"406","endLine":1,"endColumn":36},{"ruleId":"403","severity":1,"message":"420","line":2,"column":10,"nodeType":"405","messageId":"406","endLine":2,"endColumn":14},{"ruleId":"403","severity":1,"message":"421","line":3,"column":21,"nodeType":"405","messageId":"406","endLine":3,"endColumn":27},{"ruleId":"403","severity":1,"message":"422","line":6,"column":8,"nodeType":"405","messageId":"406","endLine":6,"endColumn":14},{"ruleId":"403","severity":1,"message":"423","line":7,"column":8,"nodeType":"405","messageId":"406","endLine":7,"endColumn":15},{"ruleId":"403","severity":1,"message":"424","line":19,"column":10,"nodeType":"405","messageId":"406","endLine":19,"endColumn":17},{"ruleId":"403","severity":1,"message":"425","line":24,"column":11,"nodeType":"405","messageId":"406","endLine":24,"endColumn":16},{"ruleId":"403","severity":1,"message":"426","line":24,"column":18,"nodeType":"405","messageId":"406","endLine":24,"endColumn":25},{"ruleId":"403","severity":1,"message":"427","line":24,"column":27,"nodeType":"405","messageId":"406","endLine":24,"endColumn":35},{"ruleId":"403","severity":1,"message":"428","line":4,"column":19,"nodeType":"405","messageId":"406","endLine":4,"endColumn":30},{"ruleId":"403","severity":1,"message":"429","line":12,"column":12,"nodeType":"405","messageId":"406","endLine":12,"endColumn":17},{"ruleId":"403","severity":1,"message":"425","line":15,"column":13,"nodeType":"405","messageId":"406","endLine":15,"endColumn":18},{"ruleId":"403","severity":1,"message":"426","line":15,"column":20,"nodeType":"405","messageId":"406","endLine":15,"endColumn":27},{"ruleId":"403","severity":1,"message":"430","line":15,"column":29,"nodeType":"405","messageId":"406","endLine":15,"endColumn":38},{"ruleId":"403","severity":1,"message":"428","line":5,"column":19,"nodeType":"405","messageId":"406","endLine":5,"endColumn":30},{"ruleId":"403","severity":1,"message":"431","line":9,"column":8,"nodeType":"405","messageId":"406","endLine":9,"endColumn":12},{"ruleId":"403","severity":1,"message":"424","line":18,"column":12,"nodeType":"405","messageId":"406","endLine":18,"endColumn":19},{"ruleId":"403","severity":1,"message":"427","line":21,"column":29,"nodeType":"405","messageId":"406","endLine":21,"endColumn":37},{"ruleId":"403","severity":1,"message":"421","line":2,"column":21,"nodeType":"405","messageId":"406","endLine":2,"endColumn":27},{"ruleId":"403","severity":1,"message":"420","line":4,"column":10,"nodeType":"405","messageId":"406","endLine":4,"endColumn":14},{"ruleId":"403","severity":1,"message":"422","line":6,"column":8,"nodeType":"405","messageId":"406","endLine":6,"endColumn":14},{"ruleId":"403","severity":1,"message":"423","line":7,"column":8,"nodeType":"405","messageId":"406","endLine":7,"endColumn":15},{"ruleId":"403","severity":1,"message":"425","line":21,"column":13,"nodeType":"405","messageId":"406","endLine":21,"endColumn":18},{"ruleId":"403","severity":1,"message":"426","line":21,"column":20,"nodeType":"405","messageId":"406","endLine":21,"endColumn":27},{"ruleId":"403","severity":1,"message":"432","line":1,"column":17,"nodeType":"405","messageId":"406","endLine":1,"endColumn":26},{"ruleId":"403","severity":1,"message":"421","line":4,"column":37,"nodeType":"405","messageId":"406","endLine":4,"endColumn":43},{"ruleId":"403","severity":1,"message":"433","line":6,"column":10,"nodeType":"405","messageId":"406","endLine":6,"endColumn":33},{"ruleId":"403","severity":1,"message":"423","line":7,"column":8,"nodeType":"405","messageId":"406","endLine":7,"endColumn":15},{"ruleId":"403","severity":1,"message":"422","line":8,"column":8,"nodeType":"405","messageId":"406","endLine":8,"endColumn":14},{"ruleId":"403","severity":1,"message":"424","line":19,"column":12,"nodeType":"405","messageId":"406","endLine":19,"endColumn":19},{"ruleId":"403","severity":1,"message":"434","line":19,"column":21,"nodeType":"405","messageId":"406","endLine":19,"endColumn":31},{"ruleId":"403","severity":1,"message":"435","line":22,"column":11,"nodeType":"405","messageId":"406","endLine":22,"endColumn":19},{"ruleId":"403","severity":1,"message":"425","line":28,"column":14,"nodeType":"405","messageId":"406","endLine":28,"endColumn":19},{"ruleId":"403","severity":1,"message":"426","line":28,"column":21,"nodeType":"405","messageId":"406","endLine":28,"endColumn":28},{"ruleId":"403","severity":1,"message":"436","line":6,"column":8,"nodeType":"405","messageId":"406","endLine":6,"endColumn":14},{"ruleId":"407","severity":1,"message":"437","line":50,"column":8,"nodeType":"409","endLine":50,"endColumn":47,"suggestions":"438"},{"ruleId":"403","severity":1,"message":"431","line":7,"column":8,"nodeType":"405","messageId":"406","endLine":7,"endColumn":12},{"ruleId":"403","severity":1,"message":"419","line":1,"column":27,"nodeType":"405","messageId":"406","endLine":1,"endColumn":36},{"ruleId":"403","severity":1,"message":"439","line":5,"column":8,"nodeType":"405","messageId":"406","endLine":5,"endColumn":21},{"ruleId":"403","severity":1,"message":"420","line":2,"column":10,"nodeType":"405","messageId":"406","endLine":2,"endColumn":14},{"ruleId":"403","severity":1,"message":"440","line":2,"column":16,"nodeType":"405","messageId":"406","endLine":2,"endColumn":26},{"ruleId":"403","severity":1,"message":"421","line":5,"column":31,"nodeType":"405","messageId":"406","endLine":5,"endColumn":37},{"ruleId":"403","severity":1,"message":"441","line":5,"column":46,"nodeType":"405","messageId":"406","endLine":5,"endColumn":50},{"ruleId":"403","severity":1,"message":"422","line":7,"column":8,"nodeType":"405","messageId":"406","endLine":7,"endColumn":14},{"ruleId":"403","severity":1,"message":"442","line":13,"column":8,"nodeType":"405","messageId":"406","endLine":13,"endColumn":17},{"ruleId":"407","severity":1,"message":"437","line":42,"column":8,"nodeType":"409","endLine":42,"endColumn":27,"suggestions":"443"},{"ruleId":"403","severity":1,"message":"444","line":2,"column":18,"nodeType":"405","messageId":"406","endLine":2,"endColumn":22},{"ruleId":"403","severity":1,"message":"420","line":7,"column":10,"nodeType":"405","messageId":"406","endLine":7,"endColumn":14},{"ruleId":"403","severity":1,"message":"445","line":8,"column":10,"nodeType":"405","messageId":"406","endLine":8,"endColumn":28},{"ruleId":"403","severity":1,"message":"426","line":17,"column":13,"nodeType":"405","messageId":"406","endLine":17,"endColumn":20},{"ruleId":"403","severity":1,"message":"425","line":17,"column":22,"nodeType":"405","messageId":"406","endLine":17,"endColumn":27},{"ruleId":"407","severity":1,"message":"446","line":32,"column":8,"nodeType":"409","endLine":32,"endColumn":38,"suggestions":"447"},{"ruleId":"403","severity":1,"message":"444","line":2,"column":46,"nodeType":"405","messageId":"406","endLine":2,"endColumn":50},{"ruleId":"403","severity":1,"message":"448","line":6,"column":8,"nodeType":"405","messageId":"406","endLine":6,"endColumn":21},{"ruleId":"407","severity":1,"message":"449","line":33,"column":8,"nodeType":"409","endLine":33,"endColumn":26,"suggestions":"450"},{"ruleId":"403","severity":1,"message":"431","line":5,"column":8,"nodeType":"405","messageId":"406","endLine":5,"endColumn":12},{"ruleId":"403","severity":1,"message":"424","line":14,"column":12,"nodeType":"405","messageId":"406","endLine":14,"endColumn":19},{"ruleId":"403","severity":1,"message":"434","line":14,"column":21,"nodeType":"405","messageId":"406","endLine":14,"endColumn":31},{"ruleId":"403","severity":1,"message":"451","line":2,"column":35,"nodeType":"405","messageId":"406","endLine":2,"endColumn":40},{"ruleId":"403","severity":1,"message":"420","line":4,"column":10,"nodeType":"405","messageId":"406","endLine":4,"endColumn":14},{"ruleId":"403","severity":1,"message":"452","line":4,"column":16,"nodeType":"405","messageId":"406","endLine":4,"endColumn":24},{"ruleId":"403","severity":1,"message":"452","line":2,"column":16,"nodeType":"405","messageId":"406","endLine":2,"endColumn":24},{"ruleId":"403","severity":1,"message":"422","line":9,"column":8,"nodeType":"405","messageId":"406","endLine":9,"endColumn":14},{"ruleId":"407","severity":1,"message":"437","line":68,"column":8,"nodeType":"409","endLine":68,"endColumn":62,"suggestions":"453"},{"ruleId":"403","severity":1,"message":"454","line":10,"column":12,"nodeType":"405","messageId":"406","endLine":10,"endColumn":27},{"ruleId":"403","severity":1,"message":"425","line":13,"column":13,"nodeType":"405","messageId":"406","endLine":13,"endColumn":18},{"ruleId":"403","severity":1,"message":"426","line":13,"column":20,"nodeType":"405","messageId":"406","endLine":13,"endColumn":27},{"ruleId":"407","severity":1,"message":"455","line":23,"column":8,"nodeType":"409","endLine":23,"endColumn":10,"suggestions":"456"},{"ruleId":"403","severity":1,"message":"421","line":4,"column":10,"nodeType":"405","messageId":"406","endLine":4,"endColumn":16},{"ruleId":"403","severity":1,"message":"444","line":4,"column":18,"nodeType":"405","messageId":"406","endLine":4,"endColumn":22},{"ruleId":"403","severity":1,"message":"451","line":4,"column":40,"nodeType":"405","messageId":"406","endLine":4,"endColumn":45},{"ruleId":"403","severity":1,"message":"420","line":9,"column":10,"nodeType":"405","messageId":"406","endLine":9,"endColumn":14},{"ruleId":"403","severity":1,"message":"425","line":16,"column":13,"nodeType":"405","messageId":"406","endLine":16,"endColumn":18},{"ruleId":"403","severity":1,"message":"426","line":16,"column":20,"nodeType":"405","messageId":"406","endLine":16,"endColumn":27},{"ruleId":"403","severity":1,"message":"457","line":20,"column":11,"nodeType":"405","messageId":"406","endLine":20,"endColumn":15},{"ruleId":"403","severity":1,"message":"458","line":14,"column":5,"nodeType":"405","messageId":"406","endLine":14,"endColumn":20},{"ruleId":"403","severity":1,"message":"459","line":19,"column":5,"nodeType":"405","messageId":"406","endLine":19,"endColumn":24},{"ruleId":"403","severity":1,"message":"460","line":28,"column":5,"nodeType":"405","messageId":"406","endLine":28,"endColumn":24},{"ruleId":"403","severity":1,"message":"427","line":42,"column":26,"nodeType":"405","messageId":"406","endLine":42,"endColumn":34},{"ruleId":"403","severity":1,"message":"427","line":90,"column":26,"nodeType":"405","messageId":"406","endLine":90,"endColumn":34},{"ruleId":"403","severity":1,"message":"427","line":131,"column":26,"nodeType":"405","messageId":"406","endLine":131,"endColumn":34},{"ruleId":"403","severity":1,"message":"427","line":172,"column":26,"nodeType":"405","messageId":"406","endLine":172,"endColumn":34},{"ruleId":"403","severity":1,"message":"427","line":214,"column":26,"nodeType":"405","messageId":"406","endLine":214,"endColumn":34},{"ruleId":"403","severity":1,"message":"427","line":254,"column":26,"nodeType":"405","messageId":"406","endLine":254,"endColumn":34},{"ruleId":"403","severity":1,"message":"461","line":6,"column":9,"nodeType":"405","messageId":"406","endLine":6,"endColumn":20},{"ruleId":"403","severity":1,"message":"425","line":12,"column":13,"nodeType":"405","messageId":"406","endLine":12,"endColumn":18},{"ruleId":"403","severity":1,"message":"426","line":12,"column":20,"nodeType":"405","messageId":"406","endLine":12,"endColumn":27},{"ruleId":"403","severity":1,"message":"462","line":12,"column":29,"nodeType":"405","messageId":"406","endLine":12,"endColumn":33},{"ruleId":"403","severity":1,"message":"463","line":117,"column":17,"nodeType":"405","messageId":"406","endLine":117,"endColumn":21},{"ruleId":"403","severity":1,"message":"427","line":187,"column":26,"nodeType":"405","messageId":"406","endLine":187,"endColumn":34},{"ruleId":"403","severity":1,"message":"427","line":231,"column":26,"nodeType":"405","messageId":"406","endLine":231,"endColumn":34},{"ruleId":"403","severity":1,"message":"444","line":2,"column":10,"nodeType":"405","messageId":"406","endLine":2,"endColumn":14},{"ruleId":"403","severity":1,"message":"436","line":3,"column":8,"nodeType":"405","messageId":"406","endLine":3,"endColumn":14},{"ruleId":"403","severity":1,"message":"421","line":2,"column":10,"nodeType":"405","messageId":"406","endLine":2,"endColumn":16},{"ruleId":"403","severity":1,"message":"420","line":2,"column":9,"nodeType":"405","messageId":"406","endLine":2,"endColumn":13},{"ruleId":"403","severity":1,"message":"464","line":4,"column":10,"nodeType":"405","messageId":"406","endLine":4,"endColumn":21},{"ruleId":"403","severity":1,"message":"461","line":6,"column":19,"nodeType":"405","messageId":"406","endLine":6,"endColumn":30},{"ruleId":"465","severity":1,"message":"466","line":42,"column":91,"nodeType":"467","messageId":"468","endLine":42,"endColumn":107},{"ruleId":"403","severity":1,"message":"421","line":2,"column":10,"nodeType":"405","messageId":"406","endLine":2,"endColumn":16},{"ruleId":"411","severity":1,"message":"412","line":8,"column":50,"nodeType":"413","messageId":"414","endLine":8,"endColumn":143,"fix":"469"},"no-native-reassign",["470"],"no-negated-in-lhs",["471"],"no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkAuthenticated' and 'load_user'. Either include them or remove the dependency array. If 'checkAuthenticated' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["472"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"473","text":"474"},{"range":"475","text":"474"},{"range":"476","text":"474"},"'ListGroup' is defined but never used.","'useEffect' is defined but never used.","'Link' is defined but never used.","'Button' is defined but never used.","'Loader' is defined but never used.","'Message' is defined but never used.","'message' is assigned a value but never used.","'error' is assigned a value but never used.","'loading' is assigned a value but never used.","'userInfo' is assigned a value but never used.","'useDispatch' is defined but never used.","'alert' is assigned a value but never used.","'contat_us' is assigned a value but never used.","'swal' is defined but never used.","'Component' is defined but never used.","'LOAD_USER_PROFILE_RESET' is defined but never used.","'setMessage' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'Rating' is defined but never used.","React Hook useEffect has missing dependencies: 'history', 'isAuthenticated', and 'location'. Either include them or remove the dependency array.",["477"],"'FormContainer' is defined but never used.","'useHistory' is defined but never used.","'Form' is defined but never used.","'SearchBox' is defined but never used.",["478"],"'Card' is defined but never used.","'BLOG_COMMENT_RESET' is defined but never used.","React Hook useEffect has a missing dependency: 'match.params.id'. Either include it or remove the dependency array.",["479"],"'CheckoutSteps' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'order.id'. Either include them or remove the dependency array.",["480"],"'Image' is defined but never used.","'Redirect' is defined but never used.",["481"],"'currentCategory' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'match.params.id'. Either include them or remove the dependency array.",["482"],"'post' is assigned a value but never used.","'ORDER_PAY_RESET' is defined but never used.","'ORDER_LIST_MY_RESET' is defined but never used.","'ORDER_DELIVER_RESET' is defined but never used.","'NavDropdown' is defined but never used.","'user' is assigned a value but never used.","'data' is assigned a value but never used.","'useSelector' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps",{"range":"483","text":"474"},"no-global-assign","no-unsafe-negation",{"desc":"484","fix":"485"},[714,714]," rel=\"noreferrer\"",[878,878],[1040,1040],{"desc":"486","fix":"487"},{"desc":"488","fix":"489"},{"desc":"490","fix":"491"},{"desc":"492","fix":"493"},{"desc":"494","fix":"495"},{"desc":"496","fix":"497"},[304,304],"Update the dependencies array to be: [checkAuthenticated, load_user]",{"range":"498","text":"499"},"Update the dependencies array to be: [dispatch, history, isAuthenticated, location, match, successProductReview]",{"range":"500","text":"501"},"Update the dependencies array to be: [dispatch, history, isAuthenticated, keyword, location]",{"range":"502","text":"503"},"Update the dependencies array to be: [dispatch, blogCommentSuccess, match.params.id]",{"range":"504","text":"505"},"Update the dependencies array to be: [success, history, order.id, dispatch]",{"range":"506","text":"507"},"Update the dependencies array to be: [dispatch, order, orderId, successPay, successDeliver, isAuthenticated, history, location]",{"range":"508","text":"509"},"Update the dependencies array to be: [dispatch, match.params.id]",{"range":"510","text":"511"},[434,436],"[checkAuthenticated, load_user]",[1810,1849],"[dispatch, history, isAuthenticated, location, match, successProductReview]",[1489,1508],"[dispatch, history, isAuthenticated, keyword, location]",[1118,1148],"[dispatch, blogCommentSuccess, match.params.id]",[1150,1168],"[success, history, order.id, dispatch]",[2506,2560],"[dispatch, order, orderId, successPay, successDeliver, isAuthenticated, history, location]",[771,773],"[dispatch, match.params.id]"]