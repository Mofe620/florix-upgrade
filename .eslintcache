[{"C:\\projects\\websites\\flolog-final\\frontend\\src\\index.js":"1","C:\\projects\\websites\\flolog-final\\frontend\\src\\reportWebVitals.js":"2","C:\\projects\\websites\\flolog-final\\frontend\\src\\App.js":"3","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\ProductDetailsScreen.js":"4","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\ProfileScreen.js":"5","C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\global\\Header.js":"6","C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\Footer.js":"7","C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\global\\Navbar.js":"8","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\UserListScreen.js":"9","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\ProductEditScreen.js":"10","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\authScreens\\LoginScreen.js":"11","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\authScreens\\PasswordResetComplete..js":"12","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\ProductListScreen.js":"13","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\authScreens\\PasswordResetConfirm.js":"14","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\authScreens\\UserProfile.js":"15","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\authScreens\\PasswordReset.js":"16","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\UserEditScreen.js":"17","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\authScreens\\ActivateAccount.js":"18","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\authScreens\\RegisterScreen.js":"19","C:\\projects\\websites\\flolog-final\\frontend\\src\\redux\\reducers\\cartReducers.js":"20","C:\\projects\\websites\\flolog-final\\frontend\\src\\redux\\reducers\\authReducers.js":"21","C:\\projects\\websites\\flolog-final\\frontend\\src\\redux\\reducers\\orderReducers.js":"22","C:\\projects\\websites\\flolog-final\\frontend\\src\\redux\\reducers\\productReducers.js":"23","C:\\projects\\websites\\flolog-final\\frontend\\src\\redux\\reducers\\userReducers.js":"24","C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\Loader.js":"25","C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\Message.js":"26","C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\Rating.js":"27","C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\CheckoutSteps.js":"28","C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\FormContainer.js":"29","C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\ProductCarousel.js":"30","C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\Paginate.js":"31","C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\Product.js":"32","C:\\projects\\websites\\flolog-final\\frontend\\src\\constants\\productConstants.js":"33","C:\\projects\\websites\\flolog-final\\frontend\\src\\constants\\userConstants.js":"34","C:\\projects\\websites\\flolog-final\\frontend\\src\\redux\\actions\\orderActions.js":"35","C:\\projects\\websites\\flolog-final\\frontend\\src\\redux\\actions\\userActions.js":"36","C:\\projects\\websites\\flolog-final\\frontend\\src\\constants\\orderConstants.js":"37","C:\\projects\\websites\\flolog-final\\frontend\\src\\redux\\actions\\productActions.js":"38","C:\\projects\\websites\\flolog-final\\frontend\\src\\redux\\actions\\authActions.js":"39","C:\\projects\\websites\\flolog-final\\frontend\\src\\redux\\actions\\cartActions.js":"40","C:\\projects\\websites\\flolog-final\\frontend\\src\\redux\\actions\\types.js":"41","C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\global\\Navigation.js":"42","C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\global\\Sidebar.js":"43","C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\Carousel.js":"44","C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\global\\_global\\_navbar.js":"45","C:\\projects\\websites\\flolog-final\\frontend\\src\\redux\\reducers\\blogReducers.js":"46","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\blogscreen\\BlogListScreen.js":"47","C:\\projects\\websites\\flolog-final\\frontend\\src\\redux\\actions\\blogActions.js":"48","C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\blog\\Blog.js":"49","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\blogscreen\\BlogDetailsScreen.js":"50","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\blogscreen\\BlogCategoryScreen.js":"51","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\authScreens\\SignUpScreen.js":"52","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\authScreens\\_TextInput.js":"53","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\authScreens\\SignInScreen.js":"54","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\productScreens\\ProductDetailsScreen.js":"55","C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\SearchBox.js":"56","C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\SearchProduct.js":"57","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\productScreens\\DrugStore.js":"58","C:\\projects\\websites\\flolog-final\\frontend\\src\\redux\\store.js":"59","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\productScreens\\ProductsScreen.js":"60","C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\spinners\\LoadingMain.js":"61","C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\testSearch.js":"62","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\cartScreen\\CartScreen.js":"63","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\orderScreens\\PlaceOrderScreen.js":"64","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\orderScreens\\OrderScreen.js":"65","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\orderScreens\\OrderListScreen.js":"66","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\paymentScreen\\PaymentScreen.js":"67","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\baseScreens\\About.js":"68","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\baseScreens\\Home.js":"69","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\baseScreens\\Contact.js":"70","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\shippingScreens\\ShippingScreen.js":"71","C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\blog\\BlogCarousel.js":"72"},{"size":649,"mtime":1642131764362,"results":"73","hashOfConfig":"74"},{"size":362,"mtime":1616789579000,"results":"75","hashOfConfig":"74"},{"size":4577,"mtime":1642805613522,"results":"76","hashOfConfig":"74"},{"size":11634,"mtime":1641728234098,"results":"77","hashOfConfig":"74"},{"size":6793,"mtime":1642018895928,"results":"78","hashOfConfig":"74"},{"size":707,"mtime":1641616244436,"results":"79","hashOfConfig":"74"},{"size":2064,"mtime":1642797106133,"results":"80","hashOfConfig":"74"},{"size":2831,"mtime":1642804839996,"results":"81","hashOfConfig":"74"},{"size":3517,"mtime":1640627957270,"results":"82","hashOfConfig":"74"},{"size":7925,"mtime":1640869778536,"results":"83","hashOfConfig":"74"},{"size":3176,"mtime":1642622966974,"results":"84","hashOfConfig":"74"},{"size":409,"mtime":1640775967817,"results":"85","hashOfConfig":"74"},{"size":5036,"mtime":1640869778536,"results":"86","hashOfConfig":"74"},{"size":2642,"mtime":1640836989404,"results":"87","hashOfConfig":"74"},{"size":3588,"mtime":1642795866935,"results":"88","hashOfConfig":"74"},{"size":1730,"mtime":1640836900641,"results":"89","hashOfConfig":"74"},{"size":3918,"mtime":1640869586986,"results":"90","hashOfConfig":"74"},{"size":1154,"mtime":1640835154480,"results":"91","hashOfConfig":"74"},{"size":4731,"mtime":1642513895488,"results":"92","hashOfConfig":"74"},{"size":1476,"mtime":1640626293250,"results":"93","hashOfConfig":"74"},{"size":3254,"mtime":1642623193413,"results":"94","hashOfConfig":"74"},{"size":4068,"mtime":1640626293249,"results":"95","hashOfConfig":"74"},{"size":4067,"mtime":1640626293249,"results":"96","hashOfConfig":"74"},{"size":3916,"mtime":1640628882334,"results":"97","hashOfConfig":"74"},{"size":458,"mtime":1616789579000,"results":"98","hashOfConfig":"74"},{"size":228,"mtime":1616789579000,"results":"99","hashOfConfig":"74"},{"size":1886,"mtime":1616789579000,"results":"100","hashOfConfig":"74"},{"size":1866,"mtime":1642710927115,"results":"101","hashOfConfig":"74"},{"size":378,"mtime":1616789579000,"results":"102","hashOfConfig":"74"},{"size":1461,"mtime":1640868353016,"results":"103","hashOfConfig":"74"},{"size":867,"mtime":1642442053954,"results":"104","hashOfConfig":"74"},{"size":964,"mtime":1642647722416,"results":"105","hashOfConfig":"74"},{"size":1502,"mtime":1616789579000,"results":"106","hashOfConfig":"74"},{"size":1479,"mtime":1616789579000,"results":"107","hashOfConfig":"74"},{"size":6588,"mtime":1641329361770,"results":"108","hashOfConfig":"74"},{"size":7376,"mtime":1640625584258,"results":"109","hashOfConfig":"74"},{"size":1240,"mtime":1616789579000,"results":"110","hashOfConfig":"74"},{"size":6169,"mtime":1642135198383,"results":"111","hashOfConfig":"74"},{"size":8031,"mtime":1642622816420,"results":"112","hashOfConfig":"74"},{"size":1322,"mtime":1641254150750,"results":"113","hashOfConfig":"74"},{"size":6809,"mtime":1642133086808,"results":"114","hashOfConfig":"74"},{"size":615,"mtime":1641816832085,"results":"115","hashOfConfig":"74"},{"size":3849,"mtime":1642795596459,"results":"116","hashOfConfig":"74"},{"size":1046,"mtime":1642215446625,"results":"117","hashOfConfig":"74"},{"size":585,"mtime":1641465389301,"results":"118","hashOfConfig":"74"},{"size":2736,"mtime":1642133086807,"results":"119","hashOfConfig":"74"},{"size":3079,"mtime":1642646245048,"results":"120","hashOfConfig":"74"},{"size":3968,"mtime":1642167051645,"results":"121","hashOfConfig":"74"},{"size":623,"mtime":1642646133126,"results":"122","hashOfConfig":"74"},{"size":3871,"mtime":1642680773688,"results":"123","hashOfConfig":"74"},{"size":3253,"mtime":1642646581688,"results":"124","hashOfConfig":"74"},{"size":3873,"mtime":1641982609511,"results":"125","hashOfConfig":"74"},{"size":567,"mtime":1641980673035,"results":"126","hashOfConfig":"74"},{"size":2679,"mtime":1641867597177,"results":"127","hashOfConfig":"74"},{"size":12896,"mtime":1642793322740,"results":"128","hashOfConfig":"74"},{"size":984,"mtime":1642390200722,"results":"129","hashOfConfig":"74"},{"size":1295,"mtime":1642476763818,"results":"130","hashOfConfig":"74"},{"size":1085,"mtime":1642107779759,"results":"131","hashOfConfig":"74"},{"size":2906,"mtime":1642133086807,"results":"132","hashOfConfig":"74"},{"size":3418,"mtime":1642805951509,"results":"133","hashOfConfig":"74"},{"size":484,"mtime":1642250077894,"results":"134","hashOfConfig":"74"},{"size":0,"mtime":1642415673900,"results":"135","hashOfConfig":"74"},{"size":6197,"mtime":1642795154935,"results":"136","hashOfConfig":"74"},{"size":5568,"mtime":1642793901542,"results":"137","hashOfConfig":"74"},{"size":9958,"mtime":1642712963799,"results":"138","hashOfConfig":"74"},{"size":3608,"mtime":1642471307435,"results":"139","hashOfConfig":"74"},{"size":1904,"mtime":1642655434397,"results":"140","hashOfConfig":"74"},{"size":6229,"mtime":1642805267111,"results":"141","hashOfConfig":"74"},{"size":2678,"mtime":1642773607649,"results":"142","hashOfConfig":"74"},{"size":2417,"mtime":1642514710124,"results":"143","hashOfConfig":"74"},{"size":3524,"mtime":1642679528539,"results":"144","hashOfConfig":"74"},{"size":888,"mtime":1642773448438,"results":"145","hashOfConfig":"74"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},"jxk2v8",{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"159"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"148"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"159"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"159"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"148"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"159"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"148"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"148"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"148"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"159"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"148"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"148"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"148"},{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"159"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"148"},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"148"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"148"},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"148"},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"148"},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"148"},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"148"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"148"},{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"148"},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"297"},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"148"},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"148"},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"148"},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"159"},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"148"},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"315","messages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"148"},{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},"C:\\projects\\websites\\flolog-final\\frontend\\src\\index.js",[],["324","325"],"C:\\projects\\websites\\flolog-final\\frontend\\src\\reportWebVitals.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\App.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\ProductDetailsScreen.js",[],["326","327"],"C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\ProfileScreen.js",["328","329"],"import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Form, Button, Row, Col, Table } from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport { getUserDetails, updateUserProfile } from '../redux/actions/userActions'\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\nimport { listMyOrders } from '../redux/actions/orderActions'\n\nfunction ProfileScreen({ history }) {\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n    const [message, setMessage] = useState('')\n\n    const dispatch = useDispatch()\n\n    const userDetails = useSelector(state => state.userDetails)\n    const { error, loading, user } = userDetails\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\n    const { success } = userUpdateProfile\n\n    const orderListMy = useSelector(state => state.orderListMy)\n    const { loading: loadingOrders, error: errorOrders, orders } = orderListMy\n\n\n    useEffect(() => {\n        if (!userInfo) {\n            history.push('/login')\n        } else {\n            if (!user || !user.name || success || userInfo._id !== user._id) {\n                dispatch({ type: USER_UPDATE_PROFILE_RESET })\n                dispatch(getUserDetails('profile'))\n                dispatch(listMyOrders())\n            } else {\n                setName(user.name)\n                setEmail(user.email)\n            }\n        }\n    }, [dispatch, history, userInfo, user, success])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n\n        if (password != confirmPassword) {\n            setMessage('Passwords do not match')\n        } else {\n            dispatch(updateUserProfile({\n                'id': user._id,\n                'name': name,\n                'email': email,\n                'password': password\n            }))\n            setMessage('')\n        }\n\n    }\n    return (\n        <Row>\n            <Col md={3}>\n                <h2>User Profile</h2>\n\n                {message && <Message variant='danger'>{message}</Message>}\n                {error && <Message variant='danger'>{error}</Message>}\n                {loading && <Loader />}\n                <Form onSubmit={submitHandler}>\n\n                    <Form.Group controlId='name'>\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control\n                            required\n                            type='name'\n                            placeholder='Enter name'\n                            value={name}\n                            onChange={(e) => setName(e.target.value)}\n                        >\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group controlId='email'>\n                        <Form.Label>Email Address</Form.Label>\n                        <Form.Control\n                            required\n                            type='email'\n                            placeholder='Enter Email'\n                            value={email}\n                            onChange={(e) => setEmail(e.target.value)}\n                        >\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group controlId='password'>\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control\n\n                            type='password'\n                            placeholder='Enter Password'\n                            value={password}\n                            onChange={(e) => setPassword(e.target.value)}\n                        >\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group controlId='passwordConfirm'>\n                        <Form.Label>Confirm Password</Form.Label>\n                        <Form.Control\n\n                            type='password'\n                            placeholder='Confirm Password'\n                            value={confirmPassword}\n                            onChange={(e) => setConfirmPassword(e.target.value)}\n                        >\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Button type='submit' variant='primary'>\n                        Update\n                </Button>\n\n                </Form>\n            </Col>\n\n            <Col md={9}>\n                <h2>My Orders</h2>\n                {loadingOrders ? (\n                    <Loader />\n                ) : errorOrders ? (\n                    <Message variant='danger'>{errorOrders}</Message>\n                ) : (\n                            <Table striped responsive className='table-sm'>\n                                <thead>\n                                    <tr>\n                                        <th>ID</th>\n                                        <th>Date</th>\n                                        <th>Total</th>\n                                        <th>Paid</th>\n                                        <th>Delivered</th>\n                                        <th></th>\n                                    </tr>\n                                </thead>\n\n                                <tbody>\n                                    {orders.map(order => (\n                                        <tr key={order._id}>\n                                            <td>{order._id}</td>\n                                            <td>{order.createdAt.substring(0, 10)}</td>\n                                            <td>&#8358; {order.totalPrice}</td>\n                                            <td>{order.isPaid ? order.paidAt.substring(0, 10) : (\n                                                <i className='fas fa-times' style={{ color: 'red' }}></i>\n                                            )}</td>\n                                            <td>\n                                                <LinkContainer to={`/order/${order._id}`}>\n                                                    <Button className='btn-sm'>Details</Button>\n                                                </LinkContainer>\n                                            </td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </Table>\n                        )}\n            </Col>\n        </Row>\n    )\n}\n\nexport default ProfileScreen",["330","331"],"C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\global\\Header.js",["332","333"],"import React, { Fragment, useEffect } from 'react';\r\nimport Navbar from './Navbar';\r\nimport { connect } from 'react-redux';\r\nimport { checkAuthenticated, load_user } from '../../redux/actions/authActions'\r\nimport Navigation from './Navigation';\r\nimport { Container } from 'react-bootstrap';\r\n\r\n\r\nconst Layout = ({ checkAuthenticated, load_user, children }) => {\r\n    useEffect(() => {\r\n        checkAuthenticated();\r\n        load_user();\r\n    }, []);\r\n\r\n    return (\r\n        <Fragment>\r\n            <Navigation />\r\n            <Container >\r\n                {children}\r\n            </Container>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default connect(null, { checkAuthenticated, load_user })(Layout);\r\n\r\n","C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\Footer.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\global\\Navbar.js",["334","335","336","337"],"C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\UserListScreen.js",["338"],"import React, { useState, useEffect } from 'react'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Table, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport { listUsers, deleteUser } from '../redux/actions/userActions'\n\nfunction UserListScreen({ history }) {\n\n    const dispatch = useDispatch()\n\n    const userList = useSelector(state => state.userList)\n    const { loading, error, users } = userList\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    const userDelete = useSelector(state => state.userDelete)\n    const { success: successDelete } = userDelete\n\n\n    useEffect(() => {\n        if (userInfo && userInfo.isAdmin) {\n            dispatch(listUsers())\n        } else {\n            history.push('/login')\n        }\n\n    }, [dispatch, history, successDelete, userInfo])\n\n\n    const deleteHandler = (id) => {\n\n        if (window.confirm('Are you sure you want to delete this user?')) {\n            dispatch(deleteUser(id))\n        }\n    }\n\n    return (\n        <div>\n            <h1>Users</h1>\n            {loading\n                ? (<Loader />)\n                : error\n                    ? (<Message variant='danger'>{error}</Message>)\n                    : (\n                        <Table striped bordered hover responsive className='table-sm'>\n                            <thead>\n                                <tr>\n                                    <th>ID</th>\n                                    <th>NAME</th>\n                                    <th>EMAIL</th>\n                                    <th>ADMIN</th>\n                                    <th></th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                {users.map(user => (\n                                    <tr key={user._id}>\n                                        <td>{user._id}</td>\n                                        <td>{user.name}</td>\n                                        <td>{user.email}</td>\n                                        <td>{user.isAdmin ? (\n                                            <i className='fas fa-check' style={{ color: 'green' }}></i>\n                                        ) : (\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\n                                            )}</td>\n\n                                        <td>\n                                            <LinkContainer to={`/admin/user/${user._id}/edit`}>\n                                                <Button variant='light' className='btn-sm'>\n                                                    <i className='fas fa-edit'></i>\n                                                </Button>\n                                            </LinkContainer>\n\n                                            <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(user._id)}>\n                                                <i className='fas fa-trash'></i>\n                                            </Button>\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </Table>\n                    )}\n        </div>\n    )\n}\n\nexport default UserListScreen\n","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\ProductEditScreen.js",["339"],"import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { Link } from 'react-router-dom'\nimport { Form, Button, Container } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport { listProductDetails, updateProduct } from '../redux/actions/productActions'\nimport { PRODUCT_UPDATE_RESET } from '../constants/productConstants'\n\n\nfunction ProductEditScreen({ match, history }) {\n\n    const productId = match.params.id\n\n    const [name, setName] = useState('')\n    const [price, setPrice] = useState(0)\n    const [image, setImage] = useState('')\n    const [brand, setBrand] = useState('')\n    const [category, setCategory] = useState('')\n    const [countInStock, setCountInStock] = useState(0)\n    const [description, setDescription] = useState('')\n    const [uploading, setUploading] = useState(false)\n\n    const dispatch = useDispatch()\n\n    const productDetails = useSelector(state => state.productDetails)\n    const { error, loading, product } = productDetails\n\n    const productUpdate = useSelector(state => state.productUpdate)\n    const { error: errorUpdate, loading: loadingUpdate, success: successUpdate } = productUpdate\n\n\n    useEffect(() => {\n\n        if (successUpdate) {\n            dispatch({ type: PRODUCT_UPDATE_RESET })\n            history.push('/admin/productlist')\n        } else {\n            if (!product.name || product._id !== Number(productId)) {\n                dispatch(listProductDetails(productId))\n            } else {\n                setName(product.name)\n                setPrice(product.price)\n                setImage(product.image)\n                setBrand(product.brand)\n                setCategory(product.category)\n                setCountInStock(product.countInStock)\n                setDescription(product.description)\n\n            }\n        }\n\n\n\n    }, [dispatch, product, productId, history, successUpdate])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(updateProduct({\n            _id: productId,\n            name,\n            price,\n            image,\n            brand,\n            category,\n            countInStock,\n            description\n        }))\n    }\n\n    const uploadFileHandler = async (e) => {\n        const file = e.target.files[0]\n        const formData = new FormData()\n\n        formData.append('image', file)\n        formData.append('product_id', productId)\n\n        setUploading(true)\n\n        try {\n            const config = {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            }\n\n            const { data } = await axios.post('/api/products/upload/', formData, config)\n\n\n            setImage(data)\n            setUploading(false)\n\n        } catch (error) {\n            setUploading(false)\n        }\n    }\n\n    return (\n        <div>\n            <Link to='/admin/productlist'>\n                Go Back\n            </Link>\n\n            <Container>\n                <h1>Edit Product</h1>\n                {loadingUpdate && <Loader />}\n                {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n\n                {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\n                    : (\n                        <Form onSubmit={submitHandler}>\n\n                            <Form.Group controlId='name'>\n                                <Form.Label>Name</Form.Label>\n                                <Form.Control\n\n                                    type='name'\n                                    placeholder='Enter name'\n                                    value={name}\n                                    onChange={(e) => setName(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId='price'>\n                                <Form.Label>Price</Form.Label>\n                                <Form.Control\n\n                                    type='number'\n                                    placeholder='Enter price'\n                                    value={price}\n                                    onChange={(e) => setPrice(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n\n                            <Form.Group controlId='image'>\n                                <Form.Label>Image</Form.Label>\n                                <Form.Control\n\n                                    type='text'\n                                    placeholder='Enter image'\n                                    value={image}\n                                    onChange={(e) => setImage(e.target.value)}\n                                >\n                                </Form.Control>\n\n                                <Form.File\n                                    id='image-file'\n                                    label='Choose File'\n                                    custom\n                                    onChange={uploadFileHandler}\n                                >\n\n                                </Form.File>\n                                {uploading && <Loader />}\n\n                            </Form.Group>\n\n\n                            <Form.Group controlId='brand'>\n                                <Form.Label>Brand</Form.Label>\n                                <Form.Control\n\n                                    type='text'\n                                    placeholder='Enter brand'\n                                    value={brand}\n                                    onChange={(e) => setBrand(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId='countinstock'>\n                                <Form.Label>Stock</Form.Label>\n                                <Form.Control\n\n                                    type='number'\n                                    placeholder='Enter stock'\n                                    value={countInStock}\n                                    onChange={(e) => setCountInStock(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId='category'>\n                                <Form.Label>Category</Form.Label>\n                                <Form.Control\n\n                                    type='text'\n                                    placeholder='Enter category'\n                                    value={category}\n                                    onChange={(e) => setCategory(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId='description'>\n                                <Form.Label>Description</Form.Label>\n                                <Form.Control\n\n                                    type='text'\n                                    placeholder='Enter description'\n                                    value={description}\n                                    onChange={(e) => setDescription(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n\n                            <Button type='submit' variant='primary'>\n                                Update\n                        </Button>\n\n                        </Form>\n                    )}\n\n            </Container >\n        </div>\n\n    )\n}\n\nexport default ProductEditScreen","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\authScreens\\LoginScreen.js",["340","341"],"import React, { useState} from 'react'\r\nimport { Container, Row, Col, Form, Button, Image, Card} from 'react-bootstrap'\r\nimport { Link, Redirect, useLocation } from 'react-router-dom'\r\nimport { connect, useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\n//import FormContainer from '../components/FormContainer'\r\nimport { login } from '../../redux/actions/authActions'\r\n\r\nfunction LoginScreen({ isAuthenticated }) {\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n    const {state: {from = \"/\"} = {} } = useLocation();\r\n\r\n    const auth = useSelector(state => state.auth)\r\n    const { error, loading } = auth\r\n    console.log(error)\r\n    \r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(login(email, password))\r\n    }\r\n\r\n    if (isAuthenticated){\r\n        return <Redirect to={from} />\r\n      }\r\n\r\n\r\n    return (\r\n        <Container className='content auth-container'>\r\n            \r\n                <div className=\"\">\r\n            <div className=' auth-header text-center'>\r\n            \r\n                <h2>Welcome back!</h2>\r\n                <p className=\"auth-base\"> Don't have an account?<Link to=\"/register\"> Sign Up</Link></p>\r\n            </div>\r\n              {error && <Message variant='danger'>{error}</Message>}\r\n            {loading && <Loader />}\r\n                <Form className=\"auth-form px-4\" onSubmit={submitHandler}>\r\n                    <Form.Group className=\"mb-3\" controlId=\"formGroupPassword\">\r\n                        <Form.Control \r\n                            className=\"auth-input\" \r\n                            type=\"email\" \r\n                            placeholder=\"Enter Email\" \r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            />\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-3\" controlId=\"formGroupPassword\">\r\n                        <Form.Control \r\n                            className=\"auth-input\" \r\n                            type=\"password\" \r\n                            placeholder=\"password\"\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                            \r\n                            />\r\n                    </Form.Group>\r\n                    <Row className=\"p-2\">\r\n                    <Col>\r\n                        <div>\r\n                        <p>Forgotten password? <Link to=\"/reset-password\">Reset Password</Link></p>\r\n                        </div>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button className=\"auth-button\" type=\"submit\">Login</Button>\r\n                    </Col>\r\n                </Row>\r\n                </Form>\r\n                </div>\r\n            \r\n    </Container>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated\r\n  });\r\n  \r\n  export default connect(mapStateToProps, {login}) (LoginScreen)\r\n","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\authScreens\\PasswordResetComplete..js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\ProductListScreen.js",["342"],"import React, { useState, useEffect } from 'react'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Table, Button, Row, Col, Container } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport Paginate from '../components/Paginate'\nimport { listProducts, deleteProduct, createProduct } from '../redux/actions/productActions'\nimport { PRODUCT_CREATE_RESET } from '../constants/productConstants'\n\nfunction ProductListScreen({ history, match }) {\n\n    const dispatch = useDispatch()\n\n    const productList = useSelector(state => state.productList)\n    const { loading, error, products, pages, page } = productList\n\n    const productDelete = useSelector(state => state.productDelete)\n    const { loading: loadingDelete, error: errorDelete, success: successDelete } = productDelete\n\n    const productCreate = useSelector(state => state.productCreate)\n    const { loading: loadingCreate, error: errorCreate, success: successCreate, product: createdProduct } = productCreate\n\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    let keyword = history.location.search\n    useEffect(() => {\n        dispatch({ type: PRODUCT_CREATE_RESET })\n\n        if (!userInfo.isAdmin) {\n            history.push('/login')\n        }\n\n        if (successCreate) {\n            history.push(`/admin/product/${createdProduct._id}/edit`)\n        } else {\n            dispatch(listProducts(keyword))\n        }\n\n    }, [dispatch, history, userInfo, successDelete, successCreate, createdProduct, keyword])\n\n\n    const deleteHandler = (id) => {\n\n        if (window.confirm('Are you sure you want to delete this product?')) {\n            dispatch(deleteProduct(id))\n        }\n    }\n\n    const createProductHandler = () => {\n        dispatch(createProduct())\n    }\n\n    return (\n        <Container>\n            <Row className='align-items-center'>\n                <Col>\n                    <h1>Products</h1>\n                </Col>\n\n                <Col className='text-right'>\n                    <Button className='my-3' onClick={createProductHandler}>\n                        <i className='fas fa-plus'></i> Create Product\n                    </Button>\n                </Col>\n            </Row>\n\n            {loadingDelete && <Loader />}\n            {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\n\n\n            {loadingCreate && <Loader />}\n            {errorCreate && <Message variant='danger'>{errorCreate}</Message>}\n\n            {loading\n                ? (<Loader />)\n                : error\n                    ? (<Message variant='danger'>{error}</Message>)\n                    : (\n                        <div>\n                            <Table striped bordered hover responsive className='table-sm'>\n                                <thead>\n                                    <tr>\n                                        <th>ID</th>\n                                        <th>NAME</th>\n                                        <th>PRICE</th>\n                                        <th>CATEGORY</th>\n                                        <th>BRAND</th>\n                                        <th></th>\n                                    </tr>\n                                </thead>\n\n                                <tbody>\n                                    {products.map(product => (\n                                        <tr key={product._id}>\n                                            <td>{product._id}</td>\n                                            <td>{product.name}</td>\n                                            <td>${product.price}</td>\n                                            <td>{product.category}</td>\n                                            <td>{product.brand}</td>\n\n                                            <td>\n                                                <LinkContainer to={`/admin/product/${product._id}/edit`}>\n                                                    <Button variant='light' className='btn-sm'>\n                                                        <i className='fas fa-edit'></i>\n                                                    </Button>\n                                                </LinkContainer>\n\n                                                <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(product._id)}>\n                                                    <i className='fas fa-trash'></i>\n                                                </Button>\n                                            </td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </Table>\n                            <Paginate pages={pages} page={page} isAdmin={true} />\n                        </div>\n                    )}\n        </Container>\n    )\n}\n\nexport default ProductListScreen","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\authScreens\\PasswordResetConfirm.js",["343"],"import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Container, Form, Button } from 'react-bootstrap'\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { reset_password_confirm } from '../../redux/actions/authActions';\r\n\r\nconst PasswordResetConfirm = ({ match, reset_password_confirm }) => {\r\n    const [requestSent, setRequestSent] = useState(false);\r\n    const [new_password, setNew_password] = useState('')\r\n    const [re_new_password, setRe_new_password] = useState('')\r\n\r\n    //const dispatch = useDispatch()\r\n\r\n\r\n    const submitHandler = e => {\r\n        e.preventDefault();\r\n\r\n        const uid = match.params.uid;\r\n        const token = match.params.token;\r\n        reset_password_confirm(uid, token, new_password, re_new_password)\r\n        //dispatch(reset_password_confirm(uid, token, new_password, re_new_password));\r\n        setRequestSent(true);\r\n    };\r\n\r\n    if (requestSent) {\r\n        return <Redirect to='/' />\r\n    }\r\n\r\n    return (\r\n        <Container className=' auth-container pt-4'>\r\n                <div className=' auth-header text-center'>\r\n                    <p className=\"auth-base\"> Enter a new password</p>\r\n                </div>\r\n                <Form className=\"auth-form\" onSubmit={e => submitHandler(e)}>\r\n                    <Form.Group className=\"mb-3\" controlId=\"formGroupPassword\">\r\n                        <Form.Control \r\n                            className=\"auth-input\" \r\n                            type=\"password\" \r\n                            placeholder=\"Password\" \r\n                            value={new_password}\r\n                            onChange={(e) => setNew_password(e.target.value)}\r\n                            minLength='6'\r\n                            required\r\n                            />\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-3\" controlId=\"formGroupPassword\">\r\n                        <Form.Control \r\n                            className=\"auth-input\" \r\n                            type=\"password\" \r\n                            placeholder=\"Password\" \r\n                            value={re_new_password}\r\n                            onChange={(e) => setRe_new_password(e.target.value)}\r\n                            minLength='6'\r\n                            required\r\n                            />\r\n                    </Form.Group>\r\n                    <Button className=\"auth-button btn btn-block w-100\" type=\"submit\">Submit</Button>\r\n                </Form>\r\n    </Container>\r\n    )\r\n}\r\n\r\nexport default connect(null, { reset_password_confirm })(PasswordResetConfirm);\r\n","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\authScreens\\UserProfile.js",["344","345","346","347","348","349","350","351","352","353"],"import React, { Component, useState, useEffect } from 'react'\r\nimport {useDispatch, useSelector, connect} from 'react-redux'\r\nimport { Container, Row, Col, Form, Button } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { LOAD_USER_PROFILE_RESET } from '../../redux/actions/types'\r\nimport Message from '../../components/Message'\r\nimport Loader from '../../components/Loader'\r\nimport { load_user_profile } from '../../redux/actions/authActions'\r\n\r\nfunction UserProfile({location, history, isAuthenticated}) {\r\n    \r\n    const [username, setUsername] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [company, setCompany] = useState('')\r\n    const [image, setImage] = useState('')\r\n    const [telephone, setTelephone] = useState('')\r\n  \r\n    const [message, setMessage] = useState('')\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const auth = useSelector(state => state.auth)\r\n    const { user } = auth\r\n    \r\n    const profileInfo = useSelector(state => state.profileInfo)\r\n    const {  error, loading, userInfo } = profileInfo\r\n    console.log(userInfo)\r\n    useEffect(() => {\r\n        if (!isAuthenticated) {\r\n            history.push('/login')\r\n        } else {\r\n                setUsername(user.username)\r\n                setEmail(user.email)\r\n                setImage(userInfo.image)\r\n                setCompany(userInfo.company)\r\n                setTelephone(userInfo.telephone)\r\n            }\r\n        \r\n    }, [history, isAuthenticated, userInfo, user])\r\n    return (\r\n        <Container className='content'>\r\n            <Row className=\"\">\r\n                <h1 className=\"profile-header\">{company} profile</h1>\r\n                <Col md={3} className=\"\">\r\n                    <div className=\"\">\r\n                            <img className='profile-img img-fluid rounded-circle  mt-4 mb-4' src={image}  alt=''/>\r\n                            <p><Link href=\"/\">Edit profile</Link></p>\r\n                    </div>\r\n                </Col>\r\n                <Col md={8}>\r\n                    <Form className=\"mt-4\">\r\n                        <Form.Group className=\"mb-3\" controlId=\"formGroupEmail\">\r\n                            <Form.Control className=\"auth-input\" type=\"name\" value={username} disabled/>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-3\" controlId=\"formGroupEmail\">\r\n                            <Form.Control className=\"auth-input\" type=\"name\" value={email} disabled/>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-3\" controlId=\"formGroupEmail\">\r\n                            <Form.Control className=\"auth-input\" type=\"name\"   value={company ? company : \" Your company/organization name?\"  } />\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-3\" controlId=\"formGroupPassword\">\r\n                            <Form.Control className=\"auth-input\" type=\"email\" value={telephone ? telephone : \" Mobile/telephone no.\"} />\r\n                        </Form.Group>\r\n                        {/*<Button className=\"auth-button btn btn-block w-100\" variant=\"primary\" value=\"reset\"> Save</Button>*/}\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n                <div md={6}  className=\"mt-4\">\r\n                    <h2>My Order History</h2>\r\n                </div>\r\n        \r\n    </Container>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated\r\n  });\r\n  \r\n  export default connect(mapStateToProps, {load_user_profile}) (UserProfile)\r\n\r\n\r\n","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\authScreens\\PasswordReset.js",["354"],"import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { Container, Form, Button } from 'react-bootstrap';\r\nimport { reset_password } from '../../redux/actions/authActions';\r\n\r\nconst PasswordReset = ({ reset_password }) => {\r\n    const [requestSent, setRequestSent] = useState(false);\r\n    const [email, setEmail] = useState('')\r\n\r\n\r\n    //const dispatch = useDispatch()\r\n    \r\n\r\n    const submitHandler = e => {\r\n        e.preventDefault();\r\n        reset_password(email)\r\n        //dispatch(reset_password(email));\r\n        setRequestSent(true);\r\n    };\r\n\r\n    if (requestSent) {\r\n        return <Redirect to='/' />\r\n    }\r\n\r\n    return (\r\n        <Container className='auth-container '>\r\n            <div className=' auth-header text-center'>\r\n                <p className=\"auth-base\"> Reset password</p>\r\n            </div>\r\n            <Form className=\"auth-form\" onSubmit={e => submitHandler(e)}>\r\n                <Form.Group className=\"mb-3\" controlId=\"formGroupPassword\">\r\n                    <Form.Control \r\n                        className=\"auth-input\" \r\n                        type=\"email\" \r\n                        placeholder=\"example@email.com\" \r\n                        name='email'\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                        required\r\n                        />\r\n                </Form.Group>\r\n                <Button className=\"auth-button btn btn-block w-100\" type=\"submit\">Submit</Button>\r\n            </Form>\r\n            \r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\nexport default connect(null, { reset_password })(PasswordReset);\r\n","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\UserEditScreen.js",["355"],"import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Form, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport { getUserDetails, updateUser } from '../redux/actions/userActions'\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\n\nfunction UserEditScreen({ match, history }) {\n\n    const userId = match.params.id\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [isAdmin, setIsAdmin] = useState(false)\n\n    const dispatch = useDispatch()\n\n    const userDetails = useSelector(state => state.userDetails)\n    const { error, loading, user } = userDetails\n\n    const userUpdate = useSelector(state => state.userUpdate)\n    const { error: errorUpdate, loading: loadingUpdate, success: successUpdate } = userUpdate\n\n    useEffect(() => {\n\n        if (successUpdate) {\n            dispatch({ type: USER_UPDATE_RESET })\n            history.push('/admin/userlist')\n        } else {\n\n            if (!user.name || user._id !== Number(userId)) {\n                dispatch(getUserDetails(userId))\n            } else {\n                setName(user.name)\n                setEmail(user.email)\n                setIsAdmin(user.isAdmin)\n            }\n        }\n\n    }, [user, userId, successUpdate, history])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(updateUser({ _id: user._id, name, email, isAdmin }))\n    }\n\n    return (\n        <div>\n            <Link to='/admin/userlist'>\n                Go Back\n            </Link>\n\n            <FormContainer>\n                <h1>Edit User</h1>\n                {loadingUpdate && <Loader />}\n                {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n\n                {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\n                    : (\n                        <Form onSubmit={submitHandler}>\n\n                            <Form.Group controlId='name'>\n                                <Form.Label>Name</Form.Label>\n                                <Form.Control\n\n                                    type='name'\n                                    placeholder='Enter name'\n                                    value={name}\n                                    onChange={(e) => setName(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId='email'>\n                                <Form.Label>Email Address</Form.Label>\n                                <Form.Control\n                                    type='email'\n                                    placeholder='Enter Email'\n                                    value={email}\n                                    onChange={(e) => setEmail(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId='isadmin'>\n                                <Form.Check\n                                    type='checkbox'\n                                    label='Is Admin'\n                                    checked={isAdmin}\n                                    onChange={(e) => setIsAdmin(e.target.checked)}\n                                >\n                                </Form.Check>\n                            </Form.Group>\n\n                            <Button type='submit' variant='primary'>\n                                Update\n                        </Button>\n\n                        </Form>\n                    )}\n\n            </FormContainer >\n        </div>\n\n    )\n}\n\nexport default UserEditScreen","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\authScreens\\ActivateAccount.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\authScreens\\RegisterScreen.js",["356","357"],"import React, { useState, useEffect } from 'react'\r\nimport { Link, Redirect } from 'react-router-dom'\r\nimport { Container, Row, Col, Form, Button } from 'react-bootstrap'\r\nimport { connect, useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\n//import FormContainer from '../components/FormContainer'\r\nimport { signup } from '../../redux/actions/authActions'\r\n\r\nfunction RegisterScreen({ signup, isAuthenticated }) {\r\n\r\n    const [accountCreated, setAccountCreated] = useState(false);\r\n    const [username, setUsername] = useState([])\r\n    const [email, setEmail] = useState([])\r\n    const [password, setPassword] = useState([])\r\n    const [re_password, setRe_password] = useState([])\r\n    const [message, setMessage] = useState('')\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    const auth = useSelector(state => state.auth)\r\n    const { error, loading, userInfo } = auth\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        if (password !== re_password) {\r\n            setMessage('Both passwords must be the same')\r\n        } else {\r\n            dispatch(signup(username, email, password, re_password));\r\n            setAccountCreated(true);\r\n        }\r\n    }\r\n    \r\n    \r\n    if (accountCreated) {\r\n        return <Redirect to='/login' />\r\n    }\r\n\r\n    if (isAuthenticated){\r\n        return <Redirect to=\"/\" />\r\n        }\r\n    return (\r\n        <Container className='content auth-container'>\r\n            <div className=\"auth-header text-center mb-4\">\r\n                <h2>Sign Up</h2>\r\n                <p>Add your deatils to sign up</p>\r\n            </div>\r\n            {message && <Message variant='danger'>{message}</Message>}\r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            {loading && <Loader />}\r\n                    <Form className=\"auth-form\" onSubmit={submitHandler}>\r\n                        <Form.Group className=\"mb-3\" controlId='name'>\r\n                            <Form.Control \r\n                                className=\"auth-input\" \r\n                                required\r\n                                minLength='6'\r\n                                type=\"name\" \r\n                                placeholder=\"Username\" \r\n                                value={username}\r\n                                onChange={(e) => setUsername(e.target.value)}\r\n                                />\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-3\" controlId='email'>\r\n                            <Form.Control\r\n                                required \r\n                                className=\"auth-input\" \r\n                                type=\"email\" \r\n                                placeholder=\"Email\" \r\n                                value={email}\r\n                                onChange={(e) => setEmail(e.target.value)}\r\n                                \r\n                                />\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-3\" controlId=\"password\">\r\n                            <Form.Control \r\n                                className=\"auth-input\" \r\n                                type=\"password\" \r\n                                placeholder=\"Password\" \r\n                                value={password}\r\n                                onChange={(e) => setPassword(e.target.value)}\r\n                                \r\n                                />\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-3\" controlId=\"passwordConfirm\">\r\n                            <Form.Control \r\n                                className=\"auth-input\" \r\n                                type=\"password\" \r\n                                placeholder=\"Confirm Password\" \r\n                                value={re_password}\r\n                                onChange={(e) => setRe_password(e.target.value)}\r\n                                />\r\n                        </Form.Group>\r\n                        <Button type=\"submit\" className=\"auth-button\">Sign Up</Button>\r\n                    </Form>\r\n                    <Row className=\"p-2\">\r\n                        <Col>\r\n                            <div className=\"\"> Already have an account? <Link to=\"/login\">Login</Link></div>\r\n                        </Col>\r\n                        <Col>\r\n                            \r\n                        </Col>\r\n                    </Row>\r\n        </Container>\r\n        \r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated\r\n  });\r\n\r\nexport default connect(mapStateToProps, {signup}) (RegisterScreen)","C:\\projects\\websites\\flolog-final\\frontend\\src\\redux\\reducers\\cartReducers.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\redux\\reducers\\authReducers.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\redux\\reducers\\orderReducers.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\redux\\reducers\\productReducers.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\redux\\reducers\\userReducers.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\Loader.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\Message.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\Rating.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\CheckoutSteps.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\FormContainer.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\ProductCarousel.js",[],["358","359"],"C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\Paginate.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\Product.js",["360","361"],"import React from 'react'\nimport { Card, Image } from 'react-bootstrap'\nimport Rating from './Rating'\nimport { Link } from 'react-router-dom'\n\nfunction Product({ product }) {\n    return (\n        <div className=\"\">\n            <Link to={`/product/${product.id}`}>\n                <Image className=\"product__img shadow-sm\" src={`${process.env.REACT_APP_API_URL}${product.image}`} fluid/>\n            </Link>\n            <div>\n                <Link to={`/product/${product.id}`}><h3 className='product__name'>{product.name}</h3></Link>\n                <p as=\"h3\"> &#8358; {product.price}</p>\n                <p>{product.dosageForm}</p>\n                <p>{product.strength}</p>\n                {/*\n                <div className=\"my-3\">\n                    <Rating value={product.rating} text={`${product.numReviews} reviews`} color={'#f8e825'} />\n                </div>\n                */}\n            </div>\n        \n        </div>\n    )\n}\n\nexport default Product\n","C:\\projects\\websites\\flolog-final\\frontend\\src\\constants\\productConstants.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\constants\\userConstants.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\redux\\actions\\orderActions.js",["362","363","364","365","366","367","368","369","370"],"import axios from 'axios'\nimport {\n    ORDER_CREATE_REQUEST,\n    ORDER_CREATE_SUCCESS,\n    ORDER_CREATE_FAIL,\n\n    ORDER_DETAILS_REQUEST,\n    ORDER_DETAILS_SUCCESS,\n    ORDER_DETAILS_FAIL,\n\n    ORDER_PAY_REQUEST,\n    ORDER_PAY_SUCCESS,\n    ORDER_PAY_FAIL,\n    ORDER_PAY_RESET,\n\n    ORDER_LIST_MY_REQUEST,\n    ORDER_LIST_MY_SUCCESS,\n    ORDER_LIST_MY_FAIL,\n    ORDER_LIST_MY_RESET,\n\n    ORDER_LIST_REQUEST,\n    ORDER_LIST_SUCCESS,\n    ORDER_LIST_FAIL,\n\n    ORDER_DELIVER_REQUEST,\n    ORDER_DELIVER_SUCCESS,\n    ORDER_DELIVER_FAIL,\n    ORDER_DELIVER_RESET,\n\n    CART_CLEAR_ITEMS\n} from './types'\n\n\n\nexport const createOrder = (order) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_CREATE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `JWT ${localStorage.getItem('access')}`,\n                //Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.post(\n            `${process.env.REACT_APP_API_URL}/api/orders/add/`,\n            order,\n            config\n        )\n\n        dispatch({\n            type: ORDER_CREATE_SUCCESS,\n            payload: data\n        })\n\n        dispatch({\n            type: CART_CLEAR_ITEMS,\n            payload: data\n        })\n\n        localStorage.removeItem('cartItems')\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_CREATE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_DETAILS_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                 Authorization: `JWT ${localStorage.getItem('access')}`,\n                //Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `${process.env.REACT_APP_API_URL}/api/orders/${id}/`,\n            config\n        )\n\n        dispatch({\n            type: ORDER_DETAILS_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_DETAILS_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\nexport const payOrder = (id, paymentResult) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_PAY_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                 Authorization: `JWT ${localStorage.getItem('access')}`,\n                //Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `${process.env.REACT_APP_API_URL}/api/orders/${id}/pay/`,\n            paymentResult,\n            config\n        )\n\n        dispatch({\n            type: ORDER_PAY_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_PAY_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const deliverOrder = (order) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_DELIVER_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `JWT ${localStorage.getItem('access')}`,\n                //Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `${process.env.REACT_APP_API_URL}/api/orders/${order.id}/deliver/`,\n            {},\n            config\n        )\n\n        dispatch({\n            type: ORDER_DELIVER_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_DELIVER_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\nexport const listMyOrders = () => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_LIST_MY_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                 Authorization: `JWT ${localStorage.getItem('access')}`,\n                //Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `${process.env.REACT_APP_API_URL}/api/orders/myorders/`,\n            config\n        )\n\n        dispatch({\n            type: ORDER_LIST_MY_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_LIST_MY_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const listOrders = () => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_LIST_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                 Authorization: `JWT ${localStorage.getItem('access')}`,\n                //Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `${process.env.REACT_APP_API_URL}/api/orders/`,\n            config\n        )\n\n        dispatch({\n            type: ORDER_LIST_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_LIST_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}","C:\\projects\\websites\\flolog-final\\frontend\\src\\redux\\actions\\userActions.js",["371"],"import axios from 'axios'\nimport {\n    USER_LOGIN_REQUEST,\n    USER_LOGIN_SUCCESS,\n    USER_LOGIN_FAIL,\n\n    USER_LOGOUT,\n\n    USER_REGISTER_REQUEST,\n    USER_REGISTER_SUCCESS,\n    USER_REGISTER_FAIL,\n\n    USER_DETAILS_REQUEST,\n    USER_DETAILS_SUCCESS,\n    USER_DETAILS_FAIL,\n    USER_DETAILS_RESET,\n\n    USER_UPDATE_PROFILE_REQUEST,\n    USER_UPDATE_PROFILE_SUCCESS,\n    USER_UPDATE_PROFILE_FAIL,\n    USER_UPDATE_PROFILE_RESET,\n\n    USER_LIST_REQUEST,\n    USER_LIST_SUCCESS,\n    USER_LIST_FAIL,\n    USER_LIST_RESET,\n\n    USER_DELETE_REQUEST,\n    USER_DELETE_SUCCESS,\n    USER_DELETE_FAIL,\n\n    USER_UPDATE_REQUEST,\n    USER_UPDATE_SUCCESS,\n    USER_UPDATE_FAIL,\n\n} from '../../constants/userConstants'\n\nimport { ORDER_LIST_MY_RESET } from '../../constants/orderConstants'\n\nexport const login = (email, password) => async (dispatch) => {\n    try {\n        dispatch({\n            type: USER_LOGIN_REQUEST\n        })\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.post(\n            '/api/users/login/',\n            { 'username': email, 'password': password },\n            config\n        )\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    } catch (error) {\n        dispatch({\n            type: USER_LOGIN_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const logout = () => (dispatch) => {\n    localStorage.removeItem('userInfo')\n    dispatch({ type: USER_LOGOUT })\n    dispatch({ type: USER_DETAILS_RESET })\n    dispatch({ type: ORDER_LIST_MY_RESET })\n    dispatch({ type: USER_LIST_RESET })\n}\n\n\nexport const register = (name, email, password) => async (dispatch) => {\n    try {\n        dispatch({\n            type: USER_REGISTER_REQUEST\n        })\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.post(\n            '/api/users/register/',\n            { 'name': name, 'email': email, 'password': password },\n            config\n        )\n\n        dispatch({\n            type: USER_REGISTER_SUCCESS,\n            payload: data\n        })\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    } catch (error) {\n        dispatch({\n            type: USER_REGISTER_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const getUserDetails = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_DETAILS_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/users/${id}/`,\n            config\n        )\n\n        dispatch({\n            type: USER_DETAILS_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: USER_DETAILS_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_UPDATE_PROFILE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `/api/users/profile/update/`,\n            user,\n            config\n        )\n\n        dispatch({\n            type: USER_UPDATE_PROFILE_SUCCESS,\n            payload: data\n        })\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    } catch (error) {\n        dispatch({\n            type: USER_UPDATE_PROFILE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const listUsers = () => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_LIST_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/users/`,\n            config\n        )\n\n        dispatch({\n            type: USER_LIST_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: USER_LIST_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const deleteUser = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_DELETE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.delete(\n            `/api/users/delete/${id}/`,\n            config\n        )\n\n        dispatch({\n            type: USER_DELETE_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: USER_DELETE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const updateUser = (user) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_UPDATE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `/api/users/update/${user._id}/`,\n            user,\n            config\n        )\n\n        dispatch({\n            type: USER_UPDATE_SUCCESS,\n        })\n\n        dispatch({\n            type: USER_DETAILS_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: USER_UPDATE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}","C:\\projects\\websites\\flolog-final\\frontend\\src\\constants\\orderConstants.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\redux\\actions\\productActions.js",["372","373","374"],"import axios from 'axios'\nimport {\n    PRODUCT_LIST_REQUEST,\n    PRODUCT_LIST_SUCCESS,\n    PRODUCT_LIST_FAIL,\n\n    PRODUCT_DETAILS_REQUEST,\n    PRODUCT_DETAILS_SUCCESS,\n    PRODUCT_DETAILS_FAIL,\n\n    PRODUCT_DELETE_REQUEST,\n    PRODUCT_DELETE_SUCCESS,\n    PRODUCT_DELETE_FAIL,\n\n    PRODUCT_CREATE_REQUEST,\n    PRODUCT_CREATE_SUCCESS,\n    PRODUCT_CREATE_FAIL,\n\n    PRODUCT_UPDATE_REQUEST,\n    PRODUCT_UPDATE_SUCCESS,\n    PRODUCT_UPDATE_FAIL,\n\n    PRODUCT_CREATE_REVIEW_REQUEST,\n    PRODUCT_CREATE_REVIEW_SUCCESS,\n    PRODUCT_CREATE_REVIEW_FAIL,\n\n\n    PRODUCT_TOP_REQUEST,\n    PRODUCT_TOP_SUCCESS,\n    PRODUCT_TOP_FAIL,\n\n} from './types'\n\n\nexport const listProducts = (keyword = '') => async (dispatch) => {\n    try {\n        dispatch({ type: PRODUCT_LIST_REQUEST })\n\n        const { data } = await axios.get(`${process.env.REACT_APP_API_URL}/api/products${keyword}`)\n\n        dispatch({\n            type: PRODUCT_LIST_SUCCESS,\n            payload: data\n        })\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_LIST_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\nexport const listTopProducts = () => async (dispatch) => {\n    try {\n        dispatch({ type: PRODUCT_TOP_REQUEST })\n\n        const { data } = await axios.get(`${process.env.REACT_APP_API_URL}/api/products/top/`)\n\n        dispatch({\n            type: PRODUCT_TOP_SUCCESS,\n            payload: data\n        })\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_TOP_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const listProductDetails = (id) => async (dispatch) => {\n    try {\n        dispatch({ type: PRODUCT_DETAILS_REQUEST })\n\n        const { data } = await axios.get(`${process.env.REACT_APP_API_URL}/api/products/${id}`)\n\n        dispatch({\n            type: PRODUCT_DETAILS_SUCCESS,\n            payload: data\n        })\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_DETAILS_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const deleteProduct = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: PRODUCT_DELETE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.delete(\n            `${process.env.REACT_APP_API_URL}/api/products/delete/${id}/`,\n            config\n        )\n\n        dispatch({\n            type: PRODUCT_DELETE_SUCCESS,\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_DELETE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\n\nexport const createProduct = () => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: PRODUCT_CREATE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.post(\n            `${process.env.REACT_APP_API_URL}/api/products/create/`,\n            {},\n            config\n        )\n        dispatch({\n            type: PRODUCT_CREATE_SUCCESS,\n            payload: data,\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_CREATE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\nexport const updateProduct = (product) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: PRODUCT_UPDATE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `JWT ${localStorage.getItem('access')}`,\n            }\n        }\n\n        const { data } = await axios.put(\n            `${process.env.REACT_APP_API_URL}/api/products/update/${product.id}/`,\n            product,\n            config\n        )\n        dispatch({\n            type: PRODUCT_UPDATE_SUCCESS,\n            payload: data,\n        })\n\n\n        dispatch({\n            type: PRODUCT_DETAILS_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_UPDATE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\nexport const createProductReview = (productId, review) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: PRODUCT_CREATE_REVIEW_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `JWT ${localStorage.getItem('access')}`,\n            }\n        }\n        \n\n        const { data } = await axios.post(\n            `${process.env.REACT_APP_API_URL}/api/products/${productId}/reviews/`,\n            review,\n            config\n        )\n        dispatch({\n            type: PRODUCT_CREATE_REVIEW_SUCCESS,\n            payload: data,\n        })\n\n\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_CREATE_REVIEW_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}","C:\\projects\\websites\\flolog-final\\frontend\\src\\redux\\actions\\authActions.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\redux\\actions\\cartActions.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\redux\\actions\\types.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\global\\Navigation.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\global\\Sidebar.js",["375","376","377","378"],"import React, { Fragment } from 'react';\r\nimport {Link, NavLink} from 'react-router-dom'\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport { useSelector, connect } from 'react-redux'\r\nimport { logout } from '../../redux/actions/authActions';\r\nimport {Dropdown, NavDropdown} from 'react-bootstrap';\r\n\r\nconst Sidebar = ({\r\n    isAuthenticated, \r\n    logout, \r\n    isOpen,\r\n    closeSidebar\r\n}) => {\r\n    const styles = isOpen ? 'sidebar sidebar--open' : 'sidebar sidebar--closed';\r\n\r\n    \r\nconst guestLinks = () => (\r\n\r\n        <Fragment>\r\n            <LinkContainer className='sidebar__link' to='/register'>\r\n                <li className='sidebar__list__item sidebar__auth-link' onClick={closeSidebar}>Sign Up</li>\r\n            </LinkContainer>\r\n            <LinkContainer className='sidebar__link' to='/login'>\r\n                <li className='sidebar__list__item sidebar__auth-link' onClick={closeSidebar}>Sign In</li>\r\n            </LinkContainer>\r\n        </Fragment>\r\n    );\r\n    \r\n    const authLinks = () => (\r\n        <Fragment>\r\n            <li className='sidebar__list__item' onClick={closeSidebar}>\r\n                <NavLink className='sidebar__link' to='/products'><img src=\"/assets/icons/Product_icon.png\" alt=\"\" style={{height:\"25px\", marginRight:\"20px\"}}/>\r\n                    Drugstore\r\n                </NavLink>\r\n            </li>\r\n       <LinkContainer className='sidebar__link' to='/profile'>\r\n            <li className='sidebar__list__item' onClick={closeSidebar}>Profile</li>\r\n        </LinkContainer>\r\n\r\n            <li className='sidebar__list__item sidebar__auth-link' onClick={closeSidebar} onClick={logout}>Logout</li>\r\n        </Fragment>\r\n    );\r\n\r\n    return (\r\n        <Fragment>\r\n            {isOpen ? <div className='sidebar__backdrop' onClick={closeSidebar}></div> : <Fragment></Fragment>}\r\n            <nav className={`${styles}`}>\r\n                <ul className='sidebar__list mt-5'>\r\n                    <div className='sidebar__logo'>\r\n                        Navbar App\r\n                    </div>\r\n                    <li className='sidebar__list__item' onClick={closeSidebar}>\r\n                        <NavLink className='sidebar__link' exact to='/'><img src=\"/assets/icons/Home_icon.png\" alt=\"\" style={{height:\"25px\", marginRight:\"20px\"}}/>\r\n                            Home\r\n                        </NavLink>\r\n                    </li>\r\n                \r\n                    <li className='sidebar__list__item' onClick={closeSidebar}>\r\n                        <NavLink className='sidebar__link' to='/services'><img src=\"/assets/icons/Product_icon.png\" alt=\"\" style={{height:\"25px\", marginRight:\"20px\"}}/>\r\n                            Services\r\n                        </NavLink>\r\n                    </li>\r\n                    <li className='sidebar__list__item' onClick={closeSidebar}>\r\n                        <NavLink className='sidebar__link' to='/about'><img src=\"/assets/icons/AboutUs_icon.png\" alt=\"\" style={{height:\"25px\", marginRight:\"20px\"}}/>\r\n                            About Us\r\n                        </NavLink>\r\n                    </li>\r\n                    <li className='sidebar__list__item' onClick={closeSidebar}>\r\n                        <NavLink className='sidebar__link' to='/posts'><img src=\"/assets/icons/Product_icon.png\" alt=\"\" style={{height:\"25px\", marginRight:\"20px\"}}/>\r\n                            Blog\r\n                        </NavLink>\r\n                    </li>\r\n                   \r\n                    <Dropdown.Divider />\r\n                    {isAuthenticated ? authLinks() : guestLinks()}\r\n                    \r\n                </ul>\r\n            </nav>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated\r\n  });\r\n  \r\nexport default connect(mapStateToProps, { logout })(Sidebar);","C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\Carousel.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\global\\_global\\_navbar.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\redux\\reducers\\blogReducers.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\blogscreen\\BlogListScreen.js",["379","380","381","382","383","384"],"import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Button, Card, Col, Container, Image, Row } from 'react-bootstrap'\r\nimport BlogCarousel from '../../components/blog/BlogCarousel'\r\nimport Blog from '../../components/blog/Blog'\r\nimport { listBlogs } from '../../redux/actions/blogActions'\r\nimport { getFeaturedBlog } from '../../redux/actions/blogActions'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nconst BlogListScreen = () => {\r\n    \r\n    const dispatch = useDispatch()\r\n    const blogList = useSelector(state => state.blogList)\r\n    const { error, loading, blogs } = blogList\r\n\r\n    const featuredBlog = useSelector(state => state.featuredBlog)\r\n    const { blog } = featuredBlog\r\n    const post = blog[0]\r\n\r\n    useEffect(() => {\r\n\r\n        dispatch(listBlogs())\r\n        dispatch(getFeaturedBlog())\r\n\r\n    }, [dispatch])\r\n    \r\n    return (\r\n        <Container className=\"content\">\r\n            <BlogCarousel />\r\n            <div style={{marginTop:\"20px\"}}>\r\n                <div className=\"post\">\r\n                    <h3 className=\"m-0 p-0\"><strong>Latest Posts</strong></h3>\r\n                    <hr />\r\n                    <Row>\r\n                        <Col md={8}>\r\n                            {blogs.map(blog => (\r\n                                <Col key={blog.id} sm={12} md={6} lg={4} xl={3}>\r\n                                    <Blog blog={blog} />\r\n                                </Col>\r\n                            ))}  \r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <div>\r\n                                {/*\r\n                                <Row>\r\n                                    <Col md={4}><Image className=\"post__img\" src=\"/assets/blog/post2.jpg\" alt=\"\" fluid/></Col>\r\n                                    <Col md={8}>\r\n                                        <div>\r\n                                            <p className=\"post__txt__title\">University Create New Epidermiological Model to Study COVID-19</p>\r\n                                            <p>Dec 27th - 5m</p>\r\n                                        </div>\r\n                                        \r\n                                    </Col>\r\n                                </Row>\r\n                                */}\r\n                            </div>\r\n                            <div><h2>Blog Categories</h2></div>\r\n                            <Row>\r\n                                <Col lg={4}> <h2><Link to=\"/blog/category/medications\">Medications</Link></h2> </Col>\r\n                                <Col lg={4}> <h2><Link to=\"/blog/category/diseases\">Diseases</Link></h2> </Col>\r\n                                <Col lg={4}> <h2><Link to=\"/blog/category/medical-equipment\">Equipments</Link></h2> </Col>\r\n                            </Row>\r\n                           \r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n           \r\n           \r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default BlogListScreen\r\n","C:\\projects\\websites\\flolog-final\\frontend\\src\\redux\\actions\\blogActions.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\blog\\Blog.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\blogscreen\\BlogDetailsScreen.js",["385","386","387","388","389","390"],"import React, { useState, useEffect } from 'react';\r\nimport { Button, Card, Container, Form, Image } from 'react-bootstrap';\r\nimport Message from '../../components/Message';\r\nimport Loader from '../../components/Loader';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom';\r\nimport { BLOG_COMMENT_RESET } from '../../redux/actions/types';\r\nimport { listBlogDetails, getBlogComment } from '../../redux/actions/blogActions';\r\n\r\n\r\nconst BlogDetailsScreen = ({match}) => {\r\n\r\n    const [comment, setComment] = useState('')\r\n\r\n    const blogDetails = useSelector(state => state.blogDetails)\r\n    const { loading, error, blog } = blogDetails\r\n    \r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const  blogComment = useSelector(state => state.blogComment)\r\n    const { loading:blogCommentLoading, error:blogCommentError, success:blogCommentSuccess} = blogComment\r\n\r\n    useEffect(() => {\r\n        const slug = match.params.id;\r\n        if (blogCommentSuccess) {\r\n            setComment('')\r\n            \r\n        }\r\n        dispatch(listBlogDetails(slug))\r\n    }, [dispatch, blogCommentSuccess])\r\n\r\n    const createBlog = () => {\r\n        return {__html: blog.body}\r\n    };\r\n\r\n    const capitalizeFirstLetter = (word) => {\r\n        if (word)\r\n            return word.charAt(0).toUpperCase() + word.slice(1);\r\n        return '';\r\n    };\r\n\r\n    const submitHandler = (e) => {\r\n        const slug = match.params.id\r\n        e.preventDefault()\r\n        dispatch(getBlogComment(\r\n            slug, {\r\n            comment\r\n        }\r\n        ))\r\n    }\r\n    \r\n    return (\r\n        <Container className=\"content post-details\">\r\n            <div>\r\n                <Image className=\"post-details__img\" src={blog.image} />\r\n                <h3 className='display-2 post-details__title'>{blog.title}</h3>\r\n                <h4 className='text-muted post-details__category'>Category: {capitalizeFirstLetter(blog.category)}</h4>\r\n                \r\n                <div className='mt-5 mb-5' dangerouslySetInnerHTML={createBlog()} />\r\n            </div>\r\n            <div className=\"blog__content\">\r\n            <div className=\"blog__comments\">\r\n                \r\n            {!blog?.comments?.length ? (\r\n                    <p>No comments</p>\r\n                ) : (\r\n                <div className=\"blog__comment\">\r\n                    {blog?.comments.map((comment) => (\r\n                    <div key={comment?.id}>\r\n                        <p className='blog__comment__name'>{comment?.name}</p>          \r\n                        <p className=\"blog__comment__date\"><i>{comment?.dateCreated.substring(0, 10)}</i></p>\r\n                        <p className=\"blog__comment__comment\">{comment?.comment}</p>\r\n                    </div> \r\n                    ))}\r\n                </div>\r\n                )}\r\n            </div>\r\n            {blogCommentLoading && <Loader />}\r\n            {blogCommentSuccess && <Message variant='success'>Comment Submitted</Message>}\r\n            {blogCommentError && <Message variant='info'>Please login before adding a comment</Message>}\r\n                <Form onSubmit={submitHandler}>\r\n                <Form.Group controlId='comment'>\r\n                    <Form.Label className=\"blog__add-comment\">Comment</Form.Label> {/* The label called review is named comment in the database(backend)*/}\r\n                    <Form.Control\r\n                        as='textarea'\r\n                        row='5'\r\n                        value={comment}\r\n                        onChange={(e) => setComment(e.target.value)}\r\n                    ></Form.Control>\r\n                </Form.Group>\r\n                <Button type='submit' variant='primary' className=\"blog__comment__button\">Add Comment</Button>\r\n                </Form>\r\n            </div>\r\n        </Container>\r\n        \r\n    );\r\n};\r\n\r\nexport default BlogDetailsScreen;","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\blogscreen\\BlogCategoryScreen.js",["391","392","393","394"],"import React, {useState, useEffect} from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {Container, Image} from 'react-bootstrap'\r\nimport { getBlogCategory } from '../../redux/actions/blogActions'\r\n\r\n\r\nconst BlogCategoryScreen = ({match}) => {\r\n    const [currentCategory, setCurrentCategory] = useState('');\r\n\r\n    const blogCategory = useSelector(state => state.blogCategory)\r\n    const { error, loading, blogs } = blogCategory\r\n    console.log(blogs)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const id = match.params.id\r\n        const category = match.params.id\r\n        setCurrentCategory(category);\r\n        dispatch(getBlogCategory(id))\r\n\r\n    }, [])\r\n\r\n\r\n    const getCategoryBlogs = () => {\r\n        let list = [];\r\n        let result = [];\r\n\r\n        blogs.map(blog => {\r\n            return list.push(\r\n                <div className=\"row no-gutters border rounded overflow-hidden flex-md-row mb-4 h-md-250 position-relative\">\r\n                    <div className=\"col p-4 d-flex flex-column position-static\">\r\n                        <strong className=\"d-inline-block mb-2 text-primary\">{blog.category}</strong>\r\n                        <h3 className=\"mb-0\">{blog.title}</h3>\r\n                        <p className=\"card-text mb-auto\">{blog.introduction}</p>\r\n                        <Link to={`/post/${blog.slug}`} className=\"stretched-link\">Read More</Link>\r\n                    </div>\r\n                    <div className=\"col-auto d-none d-lg-block\">\r\n                    <Image className=\"post__img\" src={`${process.env.REACT_APP_API_URL}${blog.image}`} alt={blog.title} fluid/>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        for (let i = 0; i < list.length; i += 2) {\r\n            result.push(\r\n                <div key={i} className='row mb-2'>\r\n                    <div className='col-md-6'>\r\n                        {list[i]}\r\n                    </div>\r\n                    <div className='col-md-6'>\r\n                        {list[i+1] ? list[i+1] : null}\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    return (\r\n        <Container className='content'>\r\n            {/*\r\n            <div className='container mt-3'>\r\n            <h3 className='display-4'>Category: {currentCategory} </h3>\r\n            <div className=\"nav-scroller py-1 mb-2\">\r\n                <nav className=\"nav d-flex justify-content-between\">\r\n                    <Link className=\"p-2 text-muted\" to='/blog/category/medications'>Medications</Link>\r\n                    <Link className=\"p-2 text-muted\" to='/blog/category/diseases/'>Diseases</Link>\r\n                    <Link className=\"p-2 text-muted\" to='/category/health_news'>Health News</Link>\r\n                    <Link className=\"p-2 text-muted\" to='/category/medications'>Medications</Link>\r\n                    <Link className=\"p-2 text-muted\" to='/category/medical_equipment'>Medical Equipment</Link>\r\n                </nav>\r\n            </div>\r\n           \r\n        </div>\r\n            */}\r\n            {getCategoryBlogs()}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default BlogCategoryScreen\r\n","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\authScreens\\SignUpScreen.js",["395","396","397","398","399","400","401","402","403"],"import React, { useState, useEffect } from 'react'\r\nimport { Link, Redirect } from 'react-router-dom'\r\nimport { Container, Button } from 'react-bootstrap'\r\nimport { connect, useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\nimport { signup } from '../../redux/actions/authActions'\r\nimport { Formik, Form } from 'formik';\r\nimport { TextField } from './_TextInput';\r\nimport * as Yup from 'yup';\r\n\r\nconst SignUpScreen = ({ signup, isAuthenticated }) => {\r\n  const [accountCreated, setAccountCreated] = useState(false);\r\n  const [username, setUsername] = useState([])\r\n  const [email, setEmail] = useState([])\r\n  const [password, setPassword] = useState([])\r\n  const [re_password, setRe_password] = useState([])\r\n  const [message, setMessage] = useState('')\r\n\r\n\r\n  const dispatch = useDispatch()\r\n  const auth = useSelector(state => state.auth)\r\n  const { error, loading, userInfo } = auth\r\n\r\n  const submitHandler = (e) => {\r\n      e.preventDefault();\r\n      if (password !== re_password) {\r\n          setMessage('Both passwords must be the same')\r\n      } else {\r\n          dispatch(signup(username, email, password, re_password));\r\n          setAccountCreated(true);\r\n      }\r\n  }\r\n  \r\n  const validate = Yup.object().shape({\r\n    username: Yup.string()\r\n      .max(15, 'Must be 20 characters or less')\r\n      .required('Username is required'),\r\n    email: Yup.string()\r\n      .email('Email is invalid')\r\n      .required('Email is required'),\r\n    password: Yup.string()\r\n      .min(6, \"A minimum of 6 characters is required\")\r\n      .required('Password is required'),\r\n    confirmPassword: Yup.string()\r\n      .oneOf([Yup.ref('password'), null], 'Password must match')\r\n      .required('Confirm your password'),\r\n  })\r\n  \r\n  if (accountCreated) {\r\n      return <Redirect to='/login' />\r\n  }\r\n\r\n  if (isAuthenticated){\r\n      return <Redirect to=\"/\" />\r\n      }\r\n\r\n\r\n\r\n  return (\r\n    <Container className=\"content auth-container\">\r\n      <Formik\r\n        initialValues={{\r\n          username: '',\r\n          email: '',\r\n          password: '',\r\n          confirmPassword: ''\r\n        }}\r\n        validationSchema={validate}\r\n        onSubmit={values => {\r\n          console.log(values)\r\n        }}\r\n      >\r\n        {({errors, touched}) => (\r\n          <div>\r\n            <h1 className=\"my-4 font-weight-bold .display-4\">Sign Up</h1>\r\n            <Form onSubmit={submitHandler}>\r\n              <TextField \r\n                name=\"username\" \r\n                label=\"Username\"\r\n                type=\"text\" \r\n                placeholder=\"Username\"\r\n                value={username}\r\n                onChange={(e) => setUsername(e.target.value)}\r\n                />\r\n              <TextField \r\n                name=\"email\" \r\n                label=\"Email\"\r\n                type=\"email\" \r\n                placeholder=\"Email\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                />\r\n              <TextField \r\n                name=\"password\" \r\n                label=\"Password\"\r\n                type=\"password\" \r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n              <TextField \r\n                name=\"confirmPassword\" \r\n                label=\"Confirm Password\"\r\n                type=\"password\" \r\n                value={re_password}\r\n                onChange={(e) => setRe_password(e.target.value)}\r\n                />\r\n              <button className=\"btn btn-primary mt-3\" type=\"submit\">Register</button>\r\n            </Form>\r\n          </div>\r\n        )}\r\n      </Formik>\r\n    </Container>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: state.auth.isAuthenticated\r\n});\r\n\r\nexport default connect(mapStateToProps, {signup}) (SignUpScreen)","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\authScreens\\_TextInput.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\authScreens\\SignInScreen.js",["404","405","406","407","408","409"],"import React, { useState} from 'react'\r\nimport { Container, Button} from 'react-bootstrap'\r\nimport { Link, Redirect, useLocation } from 'react-router-dom'\r\nimport { connect, useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\nimport { login } from '../../redux/actions/authActions'\r\nimport { Formik, Form } from 'formik';\r\nimport { TextField } from './_TextInput';\r\nimport * as Yup from 'yup';\r\n\r\nconst SignInScreen = ({ isAuthenticated }) => {\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    \r\n    const dispatch = useDispatch()\r\n    const {state: {from = \"/\"} = {} } = useLocation();\r\n    \r\n    const auth = useSelector(state => state.auth)\r\n    const { error, loading } = auth\r\n        \r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(login(email, password))\r\n    }\r\n    \r\n    if (isAuthenticated){\r\n        return <Redirect to={from} />\r\n    }\r\n\r\n\r\n    const validate = Yup.object({\r\n        email: Yup.string()\r\n        .email('Email is invalid')\r\n        .required('Email is required'),\r\n        password: Yup.string()\r\n        .min(6, 'Password must be at least 6 charaters')\r\n        .required('Password is required'),\r\n    })\r\n    return (\r\n        <Container className=\"content auth-container\">\r\n        <Formik\r\n            initialValues={{\r\n            email: '',\r\n            password: '',\r\n            }}\r\n            validationSchema={validate}\r\n            onSubmit={values => {\r\n            }}\r\n        >\r\n            {formik => (\r\n            <div>\r\n                <h1 className=\"my-4 font-weight-bold .display-4\">Sign In</h1>\r\n                <Form onSubmit={submitHandler}>\r\n                <TextField  \r\n                    name=\"email\" \r\n                    type=\"email\" \r\n                    placeholder=\"Enter Email\"\r\n                    value={email}\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                    />\r\n                <TextField \r\n                    name=\"password\" \r\n                    type=\"password\" \r\n                    placeholder=\"Enter Password\"\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                    />\r\n                <button className=\"btn btn-primary mt-3\" type=\"submit\">Login</button>\r\n                </Form>\r\n            </div>\r\n            )}\r\n        </Formik>\r\n    </Container>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated\r\n  });\r\n  \r\nexport default connect(mapStateToProps, {login}) (SignInScreen)","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\productScreens\\ProductDetailsScreen.js",["410","411"],"import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector, connect } from 'react-redux'\r\nimport { Link, useLocation } from 'react-router-dom'\r\nimport { Row, Col, Image, ListGroup, Button, Card, Form, Container } from 'react-bootstrap'\r\nimport Rating from '../../components/Rating'\r\nimport Message from '../../components/Message'\r\nimport LoadingMain from '../../components/spinners/LoadingMain'\r\nimport { listProductDetails, createProductReview } from '../../redux/actions/productActions'\r\nimport { PRODUCT_CREATE_REVIEW_RESET } from '../../constants/productConstants'\r\n\r\nfunction ProductScreen({ match, history, isAuthenticated }) {\r\n    const [qty, setQty] = useState(1)\r\n    const [rating, setRating] = useState(0)\r\n    const [comment, setComment] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n    const location = useLocation()\r\n\r\n    const productDetails = useSelector(state => state.productDetails)\r\n    const { loading, error, product } = productDetails\r\n\r\n \r\n    const auth = useSelector(state => state.auth)\r\n    const { user  } = auth\r\n\r\n    const productReviewCreate = useSelector(state => state.productReviewCreate)\r\n    const {\r\n        loading: loadingProductReview,\r\n        error: errorProductReview,\r\n        success: successProductReview,\r\n    } = productReviewCreate\r\n\r\n    useEffect(() => {\r\n        if (!isAuthenticated) {\r\n            history.push({\r\n                pathname: \"/login\",\r\n                state: {\r\n                    from: location\r\n                }\r\n            })\r\n        } else{\r\n            if (successProductReview) {\r\n                setRating(0)\r\n                setComment('')\r\n                dispatch({ type: PRODUCT_CREATE_REVIEW_RESET })\r\n            }\r\n            dispatch(listProductDetails(match.params.id))\r\n        }  \r\n    }, [dispatch, match, successProductReview])\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if(qty <=e.target.value <=product.countInStock && qty > 0){\r\n               console.log(qty)\r\n                history.push(`/cart/${match.params.id}?qty=${qty}`)\r\n                console.log(qty)\r\n        }else{\r\n            alert(\"Insifficient Quantity in Stock\")\r\n            }\r\n    }\r\n\r\n    \r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(createProductReview(\r\n            match.params.id, {\r\n            rating,\r\n            comment\r\n        }\r\n        ))\r\n    }\r\n\r\n    return (\r\n        <div className=\"product mx-4\" style={{marginTop:\"70px\"}}>\r\n            <Container className=''>\r\n            {loading ?\r\n                <LoadingMain />\r\n                : error\r\n                    ? <Message variant='danger'>{error}</Message>\r\n                    : (\r\n                        <div>\r\n                            <Row>\r\n                                <Col md={4} className=\"\">\r\n                                    <Image src={`${process.env.REACT_APP_API_URL}${product.image}`} alt={product.name} className=\"product__details__img\" fluid />   \r\n                                </Col>\r\n                                <Col md={4}>\r\n                                    <div>\r\n                                        <h4 className=\"product__name mt-3\">Generic Name: {product.name}</h4>\r\n                                        <p>Brand: {product.brand}  </p>\r\n                                        <p>Dosage Form: {product.dosageForm} </p>\r\n                                        <p>Strength: {product.strength}</p>\r\n                                        <p> Description: {product.description} </p>\r\n                                    \r\n                                        \r\n                                    </div>\r\n                                </Col>\r\n                                <Col md={4}>\r\n                                    <Card className=\"product__details__card\">\r\n                                        <ListGroup variant='flush'>\r\n                                            <ListGroup.Item>\r\n                                                <Row>\r\n                                                    <Col>Price:</Col>\r\n                                                    <Col>\r\n                                                        <strong>&#8358; {product.price}</strong>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </ListGroup.Item>\r\n                                            <ListGroup.Item>\r\n                                                <Row>\r\n                                                    <Col>Status:</Col>\r\n                                                    <Col>\r\n                                                        {product.countInStock > 0 ? 'In Stock' : 'Out of Stock'}\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </ListGroup.Item>\r\n\r\n                                        \r\n                                                <ListGroup.Item>\r\n                                                 \r\n                                                        <Form onSubmit ={handleSubmit}>\r\n                                                            <Form.Control\r\n                                                                style={{backgroundColor:\"white\"}}\r\n                                                                type=\"number\"\r\n                                                                min=\"1\"\r\n                                                                placeholder='Enter quantity'\r\n                                                                max={product.countInStock} \r\n                                                                onChange= {e=>setQty(e.target.value)}\r\n                                                              \r\n                                                            >\r\n                                                                \r\n\r\n                                                            </Form.Control>\r\n                                                            \r\n                                                            <div className=\"d-grid gap-2 pt-2\">\r\n                                                            <Button\r\n                                                            \r\n                                                            size=\"lg\"\r\n                                                            disabled={product.countInStock === 0}\r\n                                                            type=\"submit\">\r\n                                                            Add to Cart\r\n                                                        </Button>\r\n                                                            </div>\r\n                                                        </Form>\r\n                                                </ListGroup.Item>\r\n                                        \r\n\r\n\r\n                                            <ListGroup.Item>\r\n                                                \r\n                                            </ListGroup.Item>\r\n                                        </ListGroup>\r\n                                       \r\n                                    </Card>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row className=\"product__details__feedback\">\r\n                                <Col md={6}>\r\n                            {/*\r\n                                    {product.reviews.length === 0 && <Message variant='info'>Product reviews will be shown here if present</Message>}\r\n\r\n                                    \r\n                                        {product.reviews.map((review) => (\r\n                                            <div key={review.id}>\r\n                                                <strong>{review.name}</strong>\r\n                                                <Rating value={review.rating} color='#f8e825' />\r\n                                                <p>{review.dateCreated.substring(0, 10)}</p>\r\n                                                <p>{review.comment}</p>\r\n                                            </div>\r\n                                        ))}\r\n                                        */}\r\n                                        <ListGroup variant='flush'>\r\n                                    \r\n                                        <ListGroup.Item>\r\n                                            \r\n\r\n                                            {loadingProductReview && <LoadingMain />}\r\n                                            {successProductReview && <Message variant='success'>Feedback was sent successfully</Message>}\r\n                                            {errorProductReview && <Message variant='warning'>Sorry, we couldn't submit your feedback. Select an option and try again OR you may have given feedback on this product before.</Message>}\r\n\r\n                                            {user ? (\r\n                                                <Form onSubmit={submitHandler}>\r\n                                                    <Form.Group controlId='rating'>\r\n                                                        <Form.Label className=\"my-3\">Leave Feedback on this Product</Form.Label>\r\n                                                        <Form.Control\r\n                                                            as='select'\r\n                                                            value={rating}\r\n                                                            onChange={(e) => setRating(e.target.value)}\r\n                                                        >\r\n                                                            <option value=''>Option...</option>\r\n                                                            <option value='1'>1 - Very dissatisfied</option>\r\n                                                            <option value='2'>2 - Dissatisfied</option>\r\n                                                            <option value='3'>3 - Neither satisfied nor dissatisfied</option>\r\n                                                            <option value='4'>4 - Satisfied</option>\r\n                                                            <option value='5'>5 - Very satisfied</option>\r\n                                                        </Form.Control>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group controlId='comment'>\r\n                                                        <Form.Label className=\"my-3\">Add a comment</Form.Label> {/* The label called review is named comment in the database(backend)*/}\r\n                                                        <Form.Control\r\n                                                            as='textarea'\r\n                                                            row='5'\r\n                                                            col='10'\r\n                                                            value={comment}\r\n                                                            onChange={(e) => setComment(e.target.value)}\r\n                                                        ></Form.Control>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Button\r\n                                                        className=\"blog__comment__button\"\r\n                                                        disabled={loadingProductReview}\r\n                                                        type='submit'\r\n                                                        variant='primary'\r\n                                                    >\r\n                                                        Submit\r\n                                                    </Button>\r\n\r\n                                                </Form>\r\n                                            ) : (\r\n                                                    <Message variant='info'> <Link to='/login'>Sign In</Link> to Leave a feedback on this product</Message>\r\n                                                )}\r\n                                        </ListGroup.Item>\r\n                                    </ListGroup>\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                    )\r\n\r\n            }\r\n\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated\r\n  });\r\n  \r\n  export default connect(mapStateToProps, {listProductDetails }) ( ProductScreen )\r\n","C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\SearchBox.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\SearchProduct.js",["412"],"import React, { useState } from 'react'\r\nimport { Button, Form } from 'react-bootstrap'\r\nimport { useHistory } from 'react-router-dom'\r\nconst SearchProduct = () => {\r\n\r\n    const [keyword, setKeyword] = useState('')\r\n\r\n    let history = useHistory()\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        if (keyword) {\r\n            console.log(keyword)\r\n            history.push(`/products?keyword=${keyword}&page=1`)\r\n        } else {\r\n            history.push(history.push(history.location.pathname))\r\n        }\r\n    }\r\n    return (\r\n        <Form className=\"auth-form px-4\" onSubmit={submitHandler}>\r\n        <Form.Group controlId='searchbox' inline>\r\n            <Form.Control\r\n                className=\"auth-input\" \r\n                type='text'\r\n                placeholder=\"Enter product...\"\r\n                name='q'\r\n                onChange={(e) => { \r\n                    setKeyword(e.target.value)\r\n                }}\r\n            >\r\n            </Form.Control>\r\n        </Form.Group>\r\n        {/*}\r\n        <Button\r\n                type='submit'\r\n                variant='outline-success'\r\n                className='p-2'\r\n            >\r\n                Submit\r\n            </Button>\r\n            */}\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default SearchProduct\r\n","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\productScreens\\DrugStore.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\redux\\store.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\productScreens\\ProductsScreen.js",["413","414","415","416","417","418","419"],"C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\spinners\\LoadingMain.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\testSearch.js",[],["420","421"],"C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\cartScreen\\CartScreen.js",["422"],"import React, { useEffect} from 'react'\nimport { Link, Redirect, useLocation  } from 'react-router-dom'\nimport { useDispatch, useSelector, connect } from 'react-redux'\nimport { Row, Col, ListGroup, Image, Form, Button, Card, Container } from 'react-bootstrap'\nimport Message from '../../components/Message'\nimport { addToCart, removeFromCart } from '../../redux/actions/cartActions'\n\nfunction CartScreen({ match, history, isAuthenticated }) {\n    const productId = match.params.id\n    const location = useLocation()\n    const qty = location.search ? Number(location.search.split('=')[1]) : 1\n    const dispatch = useDispatch()\n\n    \n    const cart = useSelector(state => state.cart)\n    const { cartItems } = cart\n\n    useEffect(() => {\n        if (productId) {\n            dispatch(addToCart(productId, qty))\n        }\n    }, [dispatch, productId, qty])\n\n\n    const removeFromCartHandler = (id) => {\n        dispatch(removeFromCart(id))\n    }\n\n    const checkoutHandler = () => {\n        if (!isAuthenticated) {\n            history.push({\n                pathname: \"/login\",\n                state: {\n                    from: location\n                }\n            })\n        } else{\n            history.push('/shipping')\n        }  \n    }\n    const keepShopping = ()=>{\n        history.push('/products')\n    }\n\n    return (\n        <Container className=\"content checkout\">\n        <Row>\n            <Col md={8}>\n                <h2 className=\"checkout__header text-center\">Cart Page</h2>\n                {cartItems.length === 0 ? (\n                    <Message variant='info'>\n                        No Item in the Cart <Link to='/'>Go Back</Link>\n                    </Message>\n                ) : (\n                        <ListGroup variant='flush'>\n                            {cartItems.map(item => (\n                                <ListGroup.Item key={item.product}>\n\n                                    {/* Item info */}\n                                    <Row>\n                                        <Col md={2}>\n                                            <Image src={`${process.env.REACT_APP_API_URL}${item.image}`} alt={item.name} fluid rounded />\n                                        </Col>\n                                        <Col md={3}>\n                                            <Link to={`/product/${item.product}`}>{item.name}</Link>\n                                        </Col>\n\n                                        {/* Price of item */}\n                                        <Col md={2}>\n                                            &#8358; {item.price}\n                                        </Col>\n\n                                        {/* Column for adjusting quantity of items in the cart  */}\n                                        <Col md={3}>\n                                            <Form.Control\n                                                style={{backgroundColor:\"white\"}}\n                                                type=\"number\"\n                                                min=\"1\"\n                                                max={item.countInStock} \n                                                value={item.qty}\n                                                onChange={(e) => dispatch(addToCart(item.product, Number(e.target.value)))}\n                                            >\n                            \n\n                                            </Form.Control>\n                                        </Col>\n                                         {/* Remove Item from Cart Column */}       \n                                        <Col md={1}>\n                                            <Button\n                                                type='button'\n                                                variant='light'\n                                                onClick={() => removeFromCartHandler(item.product)}\n                                            >\n                                                <i className='fas fa-trash'></i>\n                                            </Button>\n                                            \n                                        </Col>\n                                    </Row>\n                                </ListGroup.Item>\n                            ))}\n                        </ListGroup>\n                    )}\n            </Col>\n\n            <Col md={4}>\n                <Card>\n                    <ListGroup variant='flush'>\n                        <ListGroup.Item className=\"\">\n                            <h2>{cartItems.reduce((acc, item) => acc + item.qty, 0)} Product(s) Added</h2>\n                            Sub total:  &#8358; {cartItems.reduce((acc, item) => acc + item.qty * item.price, 0).toFixed(2)}\n                        </ListGroup.Item>\n                    </ListGroup>\n\n                    <ListGroup.Item>\n                        <div className=\"d-grid gap-2\">\n                            <Button\n                                type='button'\n                                size=\"lg\"\n                                disabled={cartItems.length === 0}\n                                onClick={checkoutHandler}\n                            >\n                                Checkout\n                            </Button>\n                        </div>\n                        \n\n                    </ListGroup.Item>\n                    <ListGroup.Item>\n                        <div className=\"d-grid gap-2\">\n                            <Button\n                                type='button'\n                                size=\"lg\"\n                                variant=\"warning\"\n                                onClick={keepShopping}\n                            >\n                                Add More Products?\n                            </Button>\n                        </div>\n                        \n\n                    </ListGroup.Item>\n\n\n\n                </Card>\n            </Col>\n        </Row>\n        </Container>\n    )\n}\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated\n  });\n  \n  export default connect(mapStateToProps, { addToCart, removeFromCart}) (CartScreen)","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\orderScreens\\PlaceOrderScreen.js",["423","424","425"],"import React, { useEffect } from 'react'\r\nimport { Button, Row, Col, ListGroup, Image, Card, Container } from 'react-bootstrap'\r\nimport { Link, useLocation } from 'react-router-dom'\r\nimport { useDispatch, useSelector, connect } from 'react-redux'\r\nimport Message from '../../components/Message'\r\nimport CheckoutSteps from '../../components/CheckoutSteps'\r\nimport { createOrder } from '../../redux/actions/orderActions'\r\nimport { ORDER_CREATE_RESET } from '../../constants/orderConstants'\r\n\r\nfunction PlaceOrderScreen({ history, isAuthenticated }) {\r\n\r\n    const orderCreate = useSelector(state => state.orderCreate)\r\n    const { order, error, success } = orderCreate\r\n    const location = useLocation()\r\n    const dispatch = useDispatch()\r\n\r\n    const cart = useSelector(state => state.cart)\r\n\r\n    cart.itemsPrice = cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\r\n\r\n\r\n\r\n    if (!cart.paymentMethod) {\r\n        history.push('/payment')\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (success) {\r\n            history.push(`/order/${order.id}`)\r\n            dispatch({ type: ORDER_CREATE_RESET })\r\n        }\r\n    }, [success, history])\r\n\r\n    const placeOrder = () => {\r\n        if (!isAuthenticated) {\r\n            history.push({\r\n                pathname: \"/login\",\r\n                state: {\r\n                    from: location\r\n                }\r\n            })\r\n        } else{\r\n            dispatch(createOrder({\r\n                orderItems: cart.cartItems,\r\n                shippingAddress: cart.shippingAddress,\r\n                paymentMethod: cart.paymentMethod,\r\n                itemsPrice: cart.itemsPrice,\r\n            }))\r\n        }  \r\n        \r\n    }\r\n    return (\r\n        <Container className=\"content\">\r\n            <Row>\r\n                <Col md={4}>\r\n                     <div >\r\n                     \r\n                         <h3 className=\"me-2\" style={{marginTop:\"30px\"}}><strong>Shipping Address: </strong></h3>\r\n                         <p>\r\n                             {cart.shippingAddress.address},  {cart.shippingAddress.city}\r\n                             {'  '}\r\n                             {cart.shippingAddress.postalCode},\r\n                             {'  '}\r\n                             {cart.shippingAddress.country}\r\n                         </p>\r\n                     </div>\r\n                     <div >\r\n                         <h3 className=\"me-2\"><strong>Payment Method: </strong></h3>\r\n                         <p>\r\n                             {cart.paymentMethod}\r\n                         </p>\r\n                     </div> \r\n                            <h3><strong>Order Summary</strong></h3>\r\n                          \r\n                                <Row>\r\n                                    <Col><p>Sub total:</p></Col>\r\n                                    <Col><p>&#8358; {cart.itemsPrice}</p></Col>\r\n                                </Row>\r\n                          \r\n                                {error && <Message variant='danger'>{error}</Message>}\r\n                       \r\n                                <div className=\"d-grid gap-2\">\r\n                                    <Button\r\n                                        type='button'\r\n                                        size=\"lg\"\r\n                                        disabled={cart.cartItems === 0}\r\n                                        onClick={placeOrder}\r\n                                    >\r\n                                        Place Order\r\n                                    </Button>\r\n                                </div>\r\n                </Col>\r\n                <Col md={8}>\r\n                    <ListGroup variant='flush'>\r\n                        <ListGroup.Item>\r\n                            <h2>Order Items</h2>\r\n                            {cart.cartItems.length === 0 ? <Message variant='info'>\r\n                                No Product in the Cart\r\n                            </Message> : (\r\n                                <ListGroup variant='flush'>\r\n                                    {cart.cartItems.map((item, index) => (\r\n                                        <ListGroup.Item key={index}>\r\n                                            <Row>\r\n                                                <Col md={1}>\r\n                                                    <Image src={`${process.env.REACT_APP_API_URL}${item.image}`} alt={item.name} fluid rounded />\r\n                                                </Col>\r\n\r\n                                                <Col>\r\n                                                    <p className=\"mx-5\"><Link to={`/product/${item.product}`}>{item.name}</Link></p>\r\n                                                </Col>\r\n\r\n                                                <Col md={4}>\r\n                                                    <p>{item.qty} X &#8358; {item.price} = &#8358; {(item.qty * item.price).toFixed(2)}</p>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </ListGroup.Item>\r\n                                    ))}\r\n                                </ListGroup>\r\n                            )}\r\n                        </ListGroup.Item>\r\n                    </ListGroup>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated\r\n  });\r\n  \r\n  export default connect(mapStateToProps, {createOrder }) ( PlaceOrderScreen )","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\orderScreens\\OrderScreen.js",["426","427"],"import React, { useState, useEffect } from 'react'\nimport { Button, Row, Col, ListGroup, Image, Card, Container } from 'react-bootstrap'\nimport { Link, useLocation } from 'react-router-dom'\nimport { useDispatch, useSelector, connect } from 'react-redux'\nimport { PayPalButton } from 'react-paypal-button-v2'\nimport Message from '../../components/Message'\nimport LoadingMain from '../../components/spinners/LoadingMain'\nimport Loader from '../../components/Loader'\nimport { getOrderDetails, payOrder, deliverOrder } from '../../redux/actions/orderActions'\nimport { ORDER_PAY_RESET, ORDER_DELIVER_RESET } from '../../constants/orderConstants'\n\nfunction OrderScreen({ match, history, isAuthenticated }) {\n    const orderId = match.params.id\n    const dispatch = useDispatch()\n    const location = useLocation()\n\n    const [sdkReady, setSdkReady] = useState(false)\n\n    const orderDetails = useSelector(state => state.orderDetails)\n    const { order, error, loading } = orderDetails\n\n    const orderPay = useSelector(state => state.orderPay)\n    const { loading: loadingPay, success: successPay } = orderPay\n\n    const orderDeliver = useSelector(state => state.orderDeliver)\n    const { loading: loadingDeliver, success: successDeliver } = orderDeliver\n\n    if (!loading && !error) {\n        order.itemsPrice = order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\n    }\n\n\n    const addPayPalScript = () => {\n        const script = document.createElement('script')\n        script.type = 'text/javascript'\n        script.src = 'https://www.paypal.com/sdk/js?client-id=AU7EU-hk7Fhx_4JxjlZIdHXssAJDOBgt-ejulNmFSpuSPrrJPxj18G6uhouktuYEp3HRSFld1jaYfcWd'\n        script.async = true\n        script.onload = () => {\n            setSdkReady(true)\n        }\n        document.body.appendChild(script)\n    }\n\n    useEffect(() => {\n\n        if (!isAuthenticated) {\n            history.push({\n                pathname: \"/login\",\n                state: {\n                    from: location,\n                }\n            })\n        }\n\n        if (!order || successPay || order.id !== Number(orderId) || successDeliver) {\n            dispatch({ type: ORDER_PAY_RESET })\n            dispatch({ type: ORDER_DELIVER_RESET })\n\n            dispatch(getOrderDetails(orderId))\n        } else if (!order.isPaid) {\n            if (!window.paypal) {\n                addPayPalScript()\n            } else {\n                setSdkReady(true)\n            }\n        }\n    }, [dispatch, order, orderId, successPay, successDeliver])\n\n\n    const successPaymentHandler = (paymentResult) => {\n        dispatch(payOrder(orderId, paymentResult))\n    }\n\n    const deliverHandler = () => {\n        dispatch(deliverOrder(order))\n    }\n\n    return loading ? (\n        <LoadingMain />\n    ) : error ? (\n        <Message variant='danger'>{error}</Message>\n    ) : (\n                <Container className=\"content\">\n                   {/* <h1>Order: {order.Id}</h1> */}\n                    <Row>\n                        <Col md={8}>\n                            <ListGroup variant='flush'>\n                                <ListGroup.Item>\n                                    <p><strong>Username: </strong> {order.user.username}</p>\n                                    <p><strong>Email: </strong><a href={`mailto:${order.user.email}`}>{order.user.email}</a></p>\n                                    <p>\n                                        <strong>Shipping Address: </strong>\n                                        {order.shippingAddress.address},  {order.shippingAddress.city}\n                                        {'  '}\n                                        {order.shippingAddress.postalCode},\n                                {'  '}\n                                        {order.shippingAddress.country}\n                                    </p>\n                                    <Row>\n                                        <Col sm={2}>\n                                            <p><strong>Delivery Status:</strong></p>\n                                        </Col>\n                                        <Col sm={10}>\n                                        {order.isDelivered ? (\n                                        <Message variant='success'>Delivered on {order.dateDelivered}</Message>\n                                    ) : (\n                                            <Message variant='info'>Not Delivered</Message>\n                                        )}\n                                        </Col>\n\n                                    </Row>\n                                    \n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                    <p>\n                                        <strong>Payment Method: </strong>\n                                        {order.paymentMethod}\n                                    </p>\n                                    <Row><Col sm={2}><p><strong>Payment Status:</strong></p></Col>\n                                    <Col sm={10}>{order.isPaid ? (\n                                        <Message variant='success'>Payment successfully {order.datePaid}</Message>\n                                    ) : (\n                                            <Message variant='info'>Not Paid</Message>\n                                        )}\n                                    </Col>\n                                    </Row>\n                                </ListGroup.Item>\n\n                                <ListGroup.Item>\n                                    <h2>Order Items</h2>\n                                    {order.orderItems.length === 0 ? <Message variant='info'>\n                                        Order is empty\n                            </Message> : (\n                                            <ListGroup variant='flush'>\n                                                {order.orderItems.map((item, index) => (\n                                                    <ListGroup.Item key={index}>\n                                                        <Row>\n                                                            <Col md={1}>\n                                                                <Image src={`${process.env.REACT_APP_API_URL}${item.image}`} alt={item.name} fluid rounded />\n                                                            </Col>\n\n                                                            <Col>\n                                                                <p><Link to={`/product/${item.product}`}>{item.name}</Link></p>\n                                                            </Col>\n\n                                                            <Col md={4}>\n                                                                {item.qty} X &#8358; {item.price} = &#8358; {(item.qty * item.price).toFixed(2)}\n                                                            </Col>\n                                                        </Row>\n                                                    </ListGroup.Item>\n                                                ))}\n                                            </ListGroup>\n                                        )}\n                                </ListGroup.Item>\n\n                            </ListGroup>\n\n                        </Col>\n\n                        <Col md={4}>\n                            <Card>\n                                <ListGroup variant='flush'>\n                                    <ListGroup.Item>\n                                        <h2>Process Transaction</h2>\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item>\n                                        <Row>\n                                            <Col><p>Sub total:</p></Col>\n                                            <Col><p><strong>&#8358; {order.itemsPrice}</strong></p></Col>\n                                        </Row>\n                                    </ListGroup.Item>\n\n                                    {!order.isPaid && (\n                                        <ListGroup.Item>\n                                            {loadingPay && <LoadingMain />}\n\n                                            {!sdkReady ? (\n                                                <LoadingMain />\n                                            ) : (\n                                                    <PayPalButton\n                                                        amount={order.totalPrice}\n                                                        onSuccess={successPaymentHandler}\n                                                    />\n                                                )}\n                                        </ListGroup.Item>\n                                    )}\n                                </ListGroup>\n                                {loadingDeliver && <LoadingMain />}\n                                {isAuthenticated && isAuthenticated.isAdmin && order.isPaid && !order.isDelivered && (\n                                    <ListGroup.Item>\n                                        <Button\n                                            type='button'\n                                            className='btn btn-block'\n                                            onClick={deliverHandler}\n                                        >\n                                            Mark As Delivered\n                                        </Button>\n                                    </ListGroup.Item>\n                                )}\n                            </Card>\n                        </Col>\n                    </Row>\n                </Container>\n            )\n}\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated\n  });\n  \n  export default connect(mapStateToProps, { getOrderDetails, payOrder, deliverOrder }) (OrderScreen)\n","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\orderScreens\\OrderListScreen.js",["428"],"import React, { useState, useEffect } from 'react'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Table, Button, Container } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../../components/Loader'\nimport Message from '../../components/Message'\nimport { listOrders } from '../../redux/actions/orderActions'\n\nfunction OrderListScreen({ history }) {\n\n    const dispatch = useDispatch()\n\n    const orderList = useSelector(state => state.orderList)\n    const { loading, error, orders } = orderList\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n\n\n    useEffect(() => {\n        if (userInfo && userInfo.isAdmin) {\n            dispatch(listOrders())\n        } else {\n            history.push('/login')\n        }\n\n    }, [dispatch, history, userInfo])\n\n\n    return (\n        <Container className=\"content\">\n            <h1>Orders</h1>\n            {loading\n                ? (<Loader />)\n                : error\n                    ? (<Message variant='danger'>{error}</Message>)\n                    : (\n                        <Table striped bordered hover responsive className='table-sm'>\n                            <thead>\n                                <tr>\n                                    <th>ID</th>\n                                    <th>USER</th>\n                                    <th>DATE</th>\n                                    <th>Total</th>\n                                    <th>PAID</th>\n                                    <th>DELIVERED</th>\n                                    <th></th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                {orders.map(order => (\n                                    <tr key={order.id}>\n                                        <td>{order.id}</td>\n                                        <td>{order.user && order.user.name}</td>\n                                        <td>{order.dateCreated.substring(0, 10)}</td>\n                                        <td>&#8358;{order.totalPrice}</td>\n\n                                        <td>{order.isPaid ? (\n                                            order.datePaid.substring(0, 10)\n                                        ) : (\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\n                                            )}\n                                        </td>\n\n                                        <td>{order.isDelivered ? (\n                                            order.dateDelivered.substring(0, 10)\n                                        ) : (\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\n                                            )}\n                                        </td>\n\n                                        <td>\n                                            <LinkContainer to={`/order/${order.id}`}>\n                                                <Button variant='light' className='btn-sm'>\n                                                    Details\n                                                </Button>\n                                            </LinkContainer>\n\n\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </Table>\n                    )}\n        </Container>\n    )\n}\n\nexport default OrderListScreen","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\paymentScreen\\PaymentScreen.js",["429","430"],"import React, { useState, useEffect } from 'react'\nimport { Form, Button, Col, Container } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport FormContainer from '../../components/FormContainer'\nimport CheckoutSteps from '../../components/CheckoutSteps'\nimport { savePaymentMethod } from '../../redux/actions/cartActions'\n\nfunction PaymentScreen({ history }) {\n\n    const cart = useSelector(state => state.cart)\n    const { shippingAddress } = cart\n\n    const dispatch = useDispatch()\n\n    const [paymentMethod, setPaymentMethod] = useState('PayPal')\n\n    if (!shippingAddress.address) {\n        history.push('/shipping')\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(savePaymentMethod(paymentMethod))\n        history.push('/placeorder')\n    }\n\n    return (\n        <Container className=\"content\" >\n            <CheckoutSteps step1 step2 step3 />\n            <div className=\"d-flex justify-content-center checkout__header\" style={{paddingTop:\"15rem\" }}>\n            <Form onSubmit={submitHandler}>\n                <Form.Group>\n                    <Form.Label as='legend'>Payment Options</Form.Label>\n                    <Col>\n                        <Form.Check\n                            type='radio'\n                            label='PayPal or Credit Card'\n                            id='paypal'\n                            name='paymentMethod'\n                            checked\n                            onChange={(e) => setPaymentMethod(e.target.value)}\n                        >\n\n                        </Form.Check>\n                    </Col>\n                </Form.Group>\n                <div className=\"d-grid gap-2 pt-2\">\n                    <Button size=\"lg\" type=\"submit\"> Continue</Button>\n                </div>\n            </Form>\n            </div>\n        </Container>\n    )\n}\n\nexport default PaymentScreen\n","C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\baseScreens\\About.js",["431"],"C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\baseScreens\\Home.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\baseScreens\\Contact.js",[],"C:\\projects\\websites\\flolog-final\\frontend\\src\\screens\\shippingScreens\\ShippingScreen.js",["432","433","434"],"import React, { useState} from 'react'\r\nimport { Container, Form, Button, Image, Card} from 'react-bootstrap'\r\nimport { Link, Redirect } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport CheckoutSteps from '../../components/CheckoutSteps'\r\nimport { saveShippingAddress } from '../../redux/actions/cartActions'\r\n\r\nfunction ShippingScreen({history}) {\r\n\r\n\r\n    const cart = useSelector(state => state.cart)\r\n    const { shippingAddress } = cart\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [address, setAddress] = useState(shippingAddress.address)\r\n    const [city, setCity] = useState(shippingAddress.city)\r\n    const [postalCode, setPostalCode] = useState(shippingAddress.postalCode)\r\n    const [country, setCountry] = useState(shippingAddress.country)\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(saveShippingAddress({ address, city, postalCode, country }))\r\n        history.push('/payment')\r\n    }\r\n\r\n\r\n    return (\r\n        <Container className=' auth-container content'>\r\n        <Card className=\"p-5\">\r\n       <CheckoutSteps step1 step2 />\r\n        <h2 className=\"text-center checkout__header\">Shipping Address</h2>\r\n         {/*} {error && <Message variant='danger'>{error}</Message>}\r\n        {loading && <Loader />} */}\r\n            <Form className=\"auth-form\" onSubmit={submitHandler}>\r\n                <Form.Group className=\"mb-3\" controlId=\"address\">\r\n                    <Form.Control \r\n                        className=\"auth-input\" \r\n                        type='text'\r\n                        placeholder='Shipping address'\r\n                        value={address ? address : ''}\r\n                        onChange={(e) => setAddress(e.target.value)}\r\n                        required\r\n                        />\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\" controlId=\"city\">\r\n                    <Form.Control \r\n                        className=\"auth-input\" \r\n                        type='text'\r\n                        placeholder='City'\r\n                        value={city ? city : ''}\r\n                        onChange={(e) => setCity(e.target.value)}\r\n                        required\r\n                        />\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\" controlId='postalCode'>\r\n                    <Form.Control\r\n                        className=\"auth-input\"\r\n                        type='text'\r\n                        placeholder='Postal code'\r\n                        value={postalCode ? postalCode : ''}\r\n                        onChange={(e) => setPostalCode(e.target.value)}\r\n                        required\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId='country'>\r\n                    <Form.Control\r\n                        className=\"auth-input\" \r\n                        type='text'\r\n                        placeholder='Country'\r\n                        value={country ? country : ''}\r\n                        onChange={(e) => setCountry(e.target.value)}\r\n                        required\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                    <div className='d-grid gap-2'>\r\n                        <Button size=\"lg\" type=\"submit\">Next</Button>\r\n                    </div>\r\n            </Form>\r\n            </Card>\r\n</Container>\r\n    )\r\n}\r\n\r\nexport default ShippingScreen\r\n","C:\\projects\\websites\\flolog-final\\frontend\\src\\components\\blog\\BlogCarousel.js",[],{"ruleId":"435","replacedBy":"436"},{"ruleId":"437","replacedBy":"438"},{"ruleId":"435","replacedBy":"439"},{"ruleId":"437","replacedBy":"440"},{"ruleId":"441","severity":1,"message":"442","line":2,"column":10,"nodeType":"443","messageId":"444","endLine":2,"endColumn":14},{"ruleId":"445","severity":1,"message":"446","line":53,"column":22,"nodeType":"447","messageId":"448","endLine":53,"endColumn":24},{"ruleId":"435","replacedBy":"449"},{"ruleId":"437","replacedBy":"450"},{"ruleId":"441","severity":1,"message":"451","line":2,"column":8,"nodeType":"443","messageId":"444","endLine":2,"endColumn":14},{"ruleId":"452","severity":1,"message":"453","line":13,"column":8,"nodeType":"454","endLine":13,"endColumn":10,"suggestions":"455"},{"ruleId":"441","severity":1,"message":"456","line":6,"column":9,"nodeType":"443","messageId":"444","endLine":6,"endColumn":20},{"ruleId":"441","severity":1,"message":"457","line":12,"column":13,"nodeType":"443","messageId":"444","endLine":12,"endColumn":18},{"ruleId":"441","severity":1,"message":"458","line":12,"column":20,"nodeType":"443","messageId":"444","endLine":12,"endColumn":27},{"ruleId":"441","severity":1,"message":"459","line":12,"column":29,"nodeType":"443","messageId":"444","endLine":12,"endColumn":33},{"ruleId":"441","severity":1,"message":"460","line":1,"column":17,"nodeType":"443","messageId":"444","endLine":1,"endColumn":25},{"ruleId":"441","severity":1,"message":"461","line":8,"column":8,"nodeType":"443","messageId":"444","endLine":8,"endColumn":21},{"ruleId":"441","severity":1,"message":"462","line":2,"column":45,"nodeType":"443","messageId":"444","endLine":2,"endColumn":50},{"ruleId":"441","severity":1,"message":"463","line":2,"column":52,"nodeType":"443","messageId":"444","endLine":2,"endColumn":56},{"ruleId":"441","severity":1,"message":"460","line":1,"column":17,"nodeType":"443","messageId":"444","endLine":1,"endColumn":25},{"ruleId":"441","severity":1,"message":"464","line":4,"column":19,"nodeType":"443","messageId":"444","endLine":4,"endColumn":30},{"ruleId":"441","severity":1,"message":"465","line":1,"column":17,"nodeType":"443","messageId":"444","endLine":1,"endColumn":26},{"ruleId":"441","severity":1,"message":"466","line":3,"column":37,"nodeType":"443","messageId":"444","endLine":3,"endColumn":43},{"ruleId":"441","severity":1,"message":"467","line":5,"column":10,"nodeType":"443","messageId":"444","endLine":5,"endColumn":33},{"ruleId":"441","severity":1,"message":"468","line":6,"column":8,"nodeType":"443","messageId":"444","endLine":6,"endColumn":15},{"ruleId":"441","severity":1,"message":"469","line":7,"column":8,"nodeType":"443","messageId":"444","endLine":7,"endColumn":14},{"ruleId":"441","severity":1,"message":"470","line":18,"column":12,"nodeType":"443","messageId":"444","endLine":18,"endColumn":19},{"ruleId":"441","severity":1,"message":"471","line":18,"column":21,"nodeType":"443","messageId":"444","endLine":18,"endColumn":31},{"ruleId":"441","severity":1,"message":"472","line":21,"column":11,"nodeType":"443","messageId":"444","endLine":21,"endColumn":19},{"ruleId":"441","severity":1,"message":"457","line":27,"column":14,"nodeType":"443","messageId":"444","endLine":27,"endColumn":19},{"ruleId":"441","severity":1,"message":"458","line":27,"column":21,"nodeType":"443","messageId":"444","endLine":27,"endColumn":28},{"ruleId":"441","severity":1,"message":"464","line":3,"column":19,"nodeType":"443","messageId":"444","endLine":3,"endColumn":30},{"ruleId":"452","severity":1,"message":"473","line":43,"column":8,"nodeType":"454","endLine":43,"endColumn":46,"suggestions":"474"},{"ruleId":"441","severity":1,"message":"475","line":1,"column":27,"nodeType":"443","messageId":"444","endLine":1,"endColumn":36},{"ruleId":"441","severity":1,"message":"476","line":22,"column":29,"nodeType":"443","messageId":"444","endLine":22,"endColumn":37},{"ruleId":"435","replacedBy":"477"},{"ruleId":"437","replacedBy":"478"},{"ruleId":"441","severity":1,"message":"463","line":2,"column":10,"nodeType":"443","messageId":"444","endLine":2,"endColumn":14},{"ruleId":"441","severity":1,"message":"479","line":3,"column":8,"nodeType":"443","messageId":"444","endLine":3,"endColumn":14},{"ruleId":"441","severity":1,"message":"480","line":14,"column":5,"nodeType":"443","messageId":"444","endLine":14,"endColumn":20},{"ruleId":"441","severity":1,"message":"481","line":19,"column":5,"nodeType":"443","messageId":"444","endLine":19,"endColumn":24},{"ruleId":"441","severity":1,"message":"482","line":28,"column":5,"nodeType":"443","messageId":"444","endLine":28,"endColumn":24},{"ruleId":"441","severity":1,"message":"476","line":42,"column":26,"nodeType":"443","messageId":"444","endLine":42,"endColumn":34},{"ruleId":"441","severity":1,"message":"476","line":90,"column":26,"nodeType":"443","messageId":"444","endLine":90,"endColumn":34},{"ruleId":"441","severity":1,"message":"476","line":131,"column":26,"nodeType":"443","messageId":"444","endLine":131,"endColumn":34},{"ruleId":"441","severity":1,"message":"476","line":172,"column":26,"nodeType":"443","messageId":"444","endLine":172,"endColumn":34},{"ruleId":"441","severity":1,"message":"476","line":214,"column":26,"nodeType":"443","messageId":"444","endLine":214,"endColumn":34},{"ruleId":"441","severity":1,"message":"476","line":254,"column":26,"nodeType":"443","messageId":"444","endLine":254,"endColumn":34},{"ruleId":"441","severity":1,"message":"483","line":21,"column":5,"nodeType":"443","messageId":"444","endLine":21,"endColumn":30},{"ruleId":"441","severity":1,"message":"484","line":117,"column":17,"nodeType":"443","messageId":"444","endLine":117,"endColumn":21},{"ruleId":"441","severity":1,"message":"476","line":187,"column":26,"nodeType":"443","messageId":"444","endLine":187,"endColumn":34},{"ruleId":"441","severity":1,"message":"476","line":231,"column":26,"nodeType":"443","messageId":"444","endLine":231,"endColumn":34},{"ruleId":"441","severity":1,"message":"442","line":2,"column":9,"nodeType":"443","messageId":"444","endLine":2,"endColumn":13},{"ruleId":"441","severity":1,"message":"485","line":4,"column":10,"nodeType":"443","messageId":"444","endLine":4,"endColumn":21},{"ruleId":"441","severity":1,"message":"456","line":6,"column":19,"nodeType":"443","messageId":"444","endLine":6,"endColumn":30},{"ruleId":"486","severity":1,"message":"487","line":40,"column":91,"nodeType":"488","messageId":"489","endLine":40,"endColumn":107},{"ruleId":"441","severity":1,"message":"466","line":3,"column":10,"nodeType":"443","messageId":"444","endLine":3,"endColumn":16},{"ruleId":"441","severity":1,"message":"463","line":3,"column":18,"nodeType":"443","messageId":"444","endLine":3,"endColumn":22},{"ruleId":"441","severity":1,"message":"462","line":3,"column":40,"nodeType":"443","messageId":"444","endLine":3,"endColumn":45},{"ruleId":"441","severity":1,"message":"457","line":15,"column":13,"nodeType":"443","messageId":"444","endLine":15,"endColumn":18},{"ruleId":"441","severity":1,"message":"458","line":15,"column":20,"nodeType":"443","messageId":"444","endLine":15,"endColumn":27},{"ruleId":"441","severity":1,"message":"490","line":19,"column":11,"nodeType":"443","messageId":"444","endLine":19,"endColumn":15},{"ruleId":"441","severity":1,"message":"463","line":2,"column":18,"nodeType":"443","messageId":"444","endLine":2,"endColumn":22},{"ruleId":"441","severity":1,"message":"442","line":6,"column":10,"nodeType":"443","messageId":"444","endLine":6,"endColumn":14},{"ruleId":"441","severity":1,"message":"491","line":7,"column":10,"nodeType":"443","messageId":"444","endLine":7,"endColumn":28},{"ruleId":"441","severity":1,"message":"458","line":16,"column":13,"nodeType":"443","messageId":"444","endLine":16,"endColumn":20},{"ruleId":"441","severity":1,"message":"457","line":16,"column":22,"nodeType":"443","messageId":"444","endLine":16,"endColumn":27},{"ruleId":"452","severity":1,"message":"492","line":31,"column":8,"nodeType":"454","endLine":31,"endColumn":38,"suggestions":"493"},{"ruleId":"441","severity":1,"message":"494","line":9,"column":12,"nodeType":"443","messageId":"444","endLine":9,"endColumn":27},{"ruleId":"441","severity":1,"message":"457","line":12,"column":13,"nodeType":"443","messageId":"444","endLine":12,"endColumn":18},{"ruleId":"441","severity":1,"message":"458","line":12,"column":20,"nodeType":"443","messageId":"444","endLine":12,"endColumn":27},{"ruleId":"452","severity":1,"message":"495","line":22,"column":8,"nodeType":"454","endLine":22,"endColumn":10,"suggestions":"496"},{"ruleId":"441","severity":1,"message":"475","line":1,"column":27,"nodeType":"443","messageId":"444","endLine":1,"endColumn":36},{"ruleId":"441","severity":1,"message":"442","line":2,"column":10,"nodeType":"443","messageId":"444","endLine":2,"endColumn":14},{"ruleId":"441","severity":1,"message":"466","line":3,"column":21,"nodeType":"443","messageId":"444","endLine":3,"endColumn":27},{"ruleId":"441","severity":1,"message":"469","line":5,"column":8,"nodeType":"443","messageId":"444","endLine":5,"endColumn":14},{"ruleId":"441","severity":1,"message":"468","line":6,"column":8,"nodeType":"443","messageId":"444","endLine":6,"endColumn":15},{"ruleId":"441","severity":1,"message":"470","line":18,"column":10,"nodeType":"443","messageId":"444","endLine":18,"endColumn":17},{"ruleId":"441","severity":1,"message":"457","line":23,"column":11,"nodeType":"443","messageId":"444","endLine":23,"endColumn":16},{"ruleId":"441","severity":1,"message":"458","line":23,"column":18,"nodeType":"443","messageId":"444","endLine":23,"endColumn":25},{"ruleId":"441","severity":1,"message":"476","line":23,"column":27,"nodeType":"443","messageId":"444","endLine":23,"endColumn":35},{"ruleId":"441","severity":1,"message":"466","line":2,"column":21,"nodeType":"443","messageId":"444","endLine":2,"endColumn":27},{"ruleId":"441","severity":1,"message":"442","line":3,"column":10,"nodeType":"443","messageId":"444","endLine":3,"endColumn":14},{"ruleId":"441","severity":1,"message":"469","line":5,"column":8,"nodeType":"443","messageId":"444","endLine":5,"endColumn":14},{"ruleId":"441","severity":1,"message":"468","line":6,"column":8,"nodeType":"443","messageId":"444","endLine":6,"endColumn":15},{"ruleId":"441","severity":1,"message":"457","line":20,"column":13,"nodeType":"443","messageId":"444","endLine":20,"endColumn":18},{"ruleId":"441","severity":1,"message":"458","line":20,"column":20,"nodeType":"443","messageId":"444","endLine":20,"endColumn":27},{"ruleId":"441","severity":1,"message":"479","line":5,"column":8,"nodeType":"443","messageId":"444","endLine":5,"endColumn":14},{"ruleId":"452","severity":1,"message":"497","line":49,"column":8,"nodeType":"454","endLine":49,"endColumn":47,"suggestions":"498"},{"ruleId":"441","severity":1,"message":"466","line":2,"column":10,"nodeType":"443","messageId":"444","endLine":2,"endColumn":16},{"ruleId":"441","severity":1,"message":"442","line":2,"column":10,"nodeType":"443","messageId":"444","endLine":2,"endColumn":14},{"ruleId":"441","severity":1,"message":"499","line":2,"column":16,"nodeType":"443","messageId":"444","endLine":2,"endColumn":26},{"ruleId":"441","severity":1,"message":"466","line":4,"column":31,"nodeType":"443","messageId":"444","endLine":4,"endColumn":37},{"ruleId":"441","severity":1,"message":"500","line":4,"column":46,"nodeType":"443","messageId":"444","endLine":4,"endColumn":50},{"ruleId":"441","severity":1,"message":"469","line":6,"column":8,"nodeType":"443","messageId":"444","endLine":6,"endColumn":14},{"ruleId":"441","severity":1,"message":"501","line":12,"column":8,"nodeType":"443","messageId":"444","endLine":12,"endColumn":17},{"ruleId":"452","severity":1,"message":"497","line":41,"column":8,"nodeType":"454","endLine":41,"endColumn":27,"suggestions":"502"},{"ruleId":"435","replacedBy":"503"},{"ruleId":"437","replacedBy":"504"},{"ruleId":"441","severity":1,"message":"505","line":2,"column":16,"nodeType":"443","messageId":"444","endLine":2,"endColumn":24},{"ruleId":"441","severity":1,"message":"463","line":2,"column":46,"nodeType":"443","messageId":"444","endLine":2,"endColumn":50},{"ruleId":"441","severity":1,"message":"506","line":6,"column":8,"nodeType":"443","messageId":"444","endLine":6,"endColumn":21},{"ruleId":"452","severity":1,"message":"507","line":32,"column":8,"nodeType":"454","endLine":32,"endColumn":26,"suggestions":"508"},{"ruleId":"441","severity":1,"message":"469","line":8,"column":8,"nodeType":"443","messageId":"444","endLine":8,"endColumn":14},{"ruleId":"452","severity":1,"message":"497","line":67,"column":8,"nodeType":"454","endLine":67,"endColumn":62,"suggestions":"509"},{"ruleId":"441","severity":1,"message":"460","line":1,"column":17,"nodeType":"443","messageId":"444","endLine":1,"endColumn":25},{"ruleId":"441","severity":1,"message":"475","line":1,"column":27,"nodeType":"443","messageId":"444","endLine":1,"endColumn":36},{"ruleId":"441","severity":1,"message":"461","line":4,"column":8,"nodeType":"443","messageId":"444","endLine":4,"endColumn":21},{"ruleId":"441","severity":1,"message":"510","line":2,"column":39,"nodeType":"443","messageId":"444","endLine":2,"endColumn":48},{"ruleId":"441","severity":1,"message":"462","line":2,"column":35,"nodeType":"443","messageId":"444","endLine":2,"endColumn":40},{"ruleId":"441","severity":1,"message":"442","line":3,"column":10,"nodeType":"443","messageId":"444","endLine":3,"endColumn":14},{"ruleId":"441","severity":1,"message":"505","line":3,"column":16,"nodeType":"443","messageId":"444","endLine":3,"endColumn":24},"no-native-reassign",["511"],"no-negated-in-lhs",["512"],["511"],["512"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["511"],["512"],"'Navbar' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkAuthenticated' and 'load_user'. Either include them or remove the dependency array. If 'checkAuthenticated' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["513"],"'NavDropdown' is defined but never used.","'error' is assigned a value but never used.","'loading' is assigned a value but never used.","'user' is assigned a value but never used.","'useState' is defined but never used.","'FormContainer' is defined but never used.","'Image' is defined but never used.","'Card' is defined but never used.","'useDispatch' is defined but never used.","'Component' is defined but never used.","'Button' is defined but never used.","'LOAD_USER_PROFILE_RESET' is defined but never used.","'Message' is defined but never used.","'Loader' is defined but never used.","'message' is assigned a value but never used.","'setMessage' is assigned a value but never used.","'dispatch' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["514"],"'useEffect' is defined but never used.","'userInfo' is assigned a value but never used.",["511"],["512"],"'Rating' is defined but never used.","'ORDER_PAY_RESET' is defined but never used.","'ORDER_LIST_MY_RESET' is defined but never used.","'ORDER_DELIVER_RESET' is defined but never used.","'USER_UPDATE_PROFILE_RESET' is defined but never used.","'data' is assigned a value but never used.","'useSelector' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'post' is assigned a value but never used.","'BLOG_COMMENT_RESET' is defined but never used.","React Hook useEffect has a missing dependency: 'match.params.id'. Either include it or remove the dependency array.",["515"],"'currentCategory' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'match.params.id'. Either include them or remove the dependency array.",["516"],"React Hook useEffect has missing dependencies: 'history', 'isAuthenticated', and 'location'. Either include them or remove the dependency array.",["517"],"'useHistory' is defined but never used.","'Form' is defined but never used.","'SearchBox' is defined but never used.",["518"],["511"],["512"],"'Redirect' is defined but never used.","'CheckoutSteps' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'order.id'. Either include them or remove the dependency array.",["519"],["520"],"'ListGroup' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"521","fix":"522"},{"desc":"523","fix":"524"},{"desc":"525","fix":"526"},{"desc":"527","fix":"528"},{"desc":"529","fix":"530"},{"desc":"531","fix":"532"},{"desc":"533","fix":"534"},{"desc":"535","fix":"536"},"Update the dependencies array to be: [checkAuthenticated, load_user]",{"range":"537","text":"538"},"Update the dependencies array to be: [user, userId, successUpdate, history, dispatch]",{"range":"539","text":"540"},"Update the dependencies array to be: [dispatch, blogCommentSuccess, match.params.id]",{"range":"541","text":"542"},"Update the dependencies array to be: [dispatch, match.params.id]",{"range":"543","text":"544"},"Update the dependencies array to be: [dispatch, history, isAuthenticated, location, match, successProductReview]",{"range":"545","text":"546"},"Update the dependencies array to be: [dispatch, history, isAuthenticated, keyword, location]",{"range":"547","text":"548"},"Update the dependencies array to be: [success, history, order.id, dispatch]",{"range":"549","text":"550"},"Update the dependencies array to be: [dispatch, order, orderId, successPay, successDeliver, isAuthenticated, history, location]",{"range":"551","text":"552"},[446,448],"[checkAuthenticated, load_user]",[1438,1476],"[user, userId, successUpdate, history, dispatch]",[1101,1131],"[dispatch, blogCommentSuccess, match.params.id]",[747,749],"[dispatch, match.params.id]",[1821,1860],"[dispatch, history, isAuthenticated, location, match, successProductReview]",[1448,1467],"[dispatch, history, isAuthenticated, keyword, location]",[1144,1162],"[success, history, order.id, dispatch]",[2469,2523],"[dispatch, order, orderId, successPay, successDeliver, isAuthenticated, history, location]"]